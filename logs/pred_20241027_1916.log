 Pred Start time: 2024-10-27 19:16:27
10/27/2024 19:16:30 - INFO - dbgpt_hub_sql.llm_base.load_tokenizer - Quantizing model to 8 bit.
10/27/2024 19:16:42 - INFO - dbgpt_hub_sql.llm_base.adapter - Fine-tuning method: LoRA
10/27/2024 19:16:43 - INFO - dbgpt_hub_sql.llm_base.adapter - Loaded fine-tuned model from checkpoint(s): /root/autodl-fs/output/codellama-13b/CodeLlama-13b-sql-qlora-code/checkpoint-5190
10/27/2024 19:16:43 - INFO - dbgpt_hub_sql.llm_base.load_tokenizer - trainable params: 0 || all params: 13068456960 || trainable%: 0.0000
10/27/2024 19:16:43 - INFO - dbgpt_hub_sql.data_process.data_utils - Add pad token: <unk>
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
How many clubs are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Count the number of clubs.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
List the name of clubs in ascending alphabetical order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the names of clubs, ordered alphabetically?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the managers and captains of clubs?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Return the managers and captains of all clubs.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
List the name of clubs whose manufacturer is not "Nike"

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the names of clubs who do not have the manufacturer Nike?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the names of players in ascending order of wins count?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Return the names of players in order of count of wins, ascending.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What is the name of the player with the highest earnings?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Return the name of the player who earns the most money.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the distinct countries of players with earnings higher than 1200000?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
From which countries are players who make more than 1200000 from?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What is the country of the player with the highest earnings among players that have more than 2 win counts?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Of players who have more than 2 wins, what is the country of the player who makes the most?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Show names of players and names of clubs they are in.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the names of players and the corresponding clubs that they are in?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Show names of clubs that have players with more than 2 win counts.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the names of clubs that have players who have won more than twice?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Show names of players from the club with manager "Sam Allardyce".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the names of players from the club managed by Sam Allardyce?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Show names of clubs in descending order of average earnings of players belonging.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the names of clubs, ordered descending by the average earnings of players within each?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Show different manufacturers and the number of clubs they are associated with.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
How many clubs use each manufacturer?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Please show the most common manufacturer of clubs.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Which manufacturer is most common among clubs?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
List the manufacturers that are associated with more than one club.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Which manufacturers work for more than 1 club?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
List the country that have more than one player.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Which countries have produced more than one player?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
List the name of clubs that do not have players.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the names of clubs that do not have any players?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What is the number of distinct countries of all players?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
How many different countries are players from?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
Show the earnings of players from country "Australia" or "Zimbabwe".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "club" (\n"Club_ID" int,\n"Name" text,\n"Manager" text,\n"Captain" text,\n"Manufacturer" text,\n"Sponsor" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "player" (\n"Player_ID" real,\n"Name" text,\n"Country" text,\n"Earnings" real,\n"Events_number" int,\n"Wins_count" int,\n"Club_ID" int,\nPRIMARY KEY ("Player_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES "club"("Club_ID")\n);']

###Input:
###Input:
What are the earnings of players from either of the countries of Australia or Zimbabwe?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
For every order, how many products does it contain, and what are the orders' statuses and ids?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List the dates of the orders which were placed at the earliest time or have more than 1 items.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the dates of the earliest order and the dates of all orders with more than 1 item?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
Which customers did not make any orders? List the first name, middle initial and last name.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
WHat are the first and last names, and middle initials of all customers who did not make any orders?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the id, name, price and color of the products which have not been ordered for at least twice?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
Which orders have at least 2 products on it? List the order id and date.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the ids and dates of the orders with at least two products?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
Which product are listed in orders most frequently? List the id, product name and price.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the ids, names, and prices of all products that are ordered most frequently?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
Which order have the least sum of the product prices. List the order id and sum.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the order that total cost the least , and how much is the total cost ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the most popular payment method?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the payment method that most customers use?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many number of products does each gender of customers buy? List the gender and the number

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many products does each gender buy?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many orders has each gender of customers placed?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many orders has each gender placed?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List the customers' first name, middle initial, last name and payment methods.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the first names, middle initials, last names, and payment methods of all customers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List the invoices' status, date and the date of shipment.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the statuses, dates, and shipment dates for all invoices?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List the names of the products being shipped and the corresponding shipment date.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the names of the products tht have been shipped, and on what days were they shipped?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the product name and the color of the ordered items which have been shipped?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the names and colors of all products that have been shipped?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List all the distinct product names, price and descriptions which are bought by female customers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the different names, prices, and descriptions for all products bought by female customers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are invoices status of all the orders which have not been shipped?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the invoice statuses for all orderes that have not been shipped out yet?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the total cost of all the orders ? List the order id , date , and total cost .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
For each order, what is its id, date, and total amount paid?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many customers have placed any order?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many different customers have ordered things?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many item states are there in the orders?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many different item status codes are there listed in ordered items?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many different payment methods are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many different payment methods can customers choose from?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the login names and passwords of the customers whose phone number have the prefix '+12'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the usernames and passwords of all customers whose phone number starts with '+12'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the product sizes of the products whose name has the substring 'Dell'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the sizes of all products whose name includes the word 'Dell'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the product price and the product size of the products whose price is above average?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the prices and sizes of all products whose price is above the mean?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many kinds of products have not been sold?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the number of products that have not been ordered yet?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many customers do not have any payment method?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many customers do not have a listed payment method?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are all the order status and all the dates of orders?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the status codes and dates placed for all of the orders?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List the address, town and county information of the customers who live in the USA.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the addresses, towns, and county information for all customers who live in the United States?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List all the pairs of buyer first names and product names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the first names of all buyers and what products did they buy? List them in pairs.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many items are shipped?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How many products have been shipped?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the product average price?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
How much do the products cost on average?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the average price of the products being ordered?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the price of all products being ordered on average?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the email address, town and county of the customers who are of the least common gender?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List the order date of the orders who are placed by customers with at least 2 payment methods.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the date of all orders that have been placed by customers with at least 2 payment methods?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the most uncommon order status?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What is the least common order status?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
For all the products sold for more than 3 times, list their id and description.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
For all products sold more than 3 times, what are their ids and descriptions?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
List the invoice dates and ids of the invoices causing at least 2 shipments.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the dates and ids of the invoices that are related to at least 2 shipments?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
what are all shipment tracking numbers and shipment dates?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the tracking numbers and dates for all shipments listed?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the color, description and size of the products priced below the maximum price.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY ,\n`parent_product_id` INTEGER,\n`product_name` VARCHAR(80),\n`product_price` DECIMAL(19,4) DEFAULT 0,\n`product_color` VARCHAR(50),\n`product_size` VARCHAR(50),\n`product_description` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`gender_code` VARCHAR(1) NOT NULL,\n`customer_first_name` VARCHAR(50),\n`customer_middle_initial` VARCHAR(1),\n`customer_last_name` VARCHAR(50),\n`email_address` VARCHAR(255),\n`login_name` VARCHAR(80),\n`login_password` VARCHAR(20),\n`phone_number` VARCHAR(255),\n`address_line_1` VARCHAR(255),\n`town_city` VARCHAR(50),\n`county` VARCHAR(50),\n`country` VARCHAR(50)\n);', 'CREATE TABLE `Customer_Payment_Methods` (\n`customer_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Invoices` (\n`invoice_number` INTEGER PRIMARY KEY,\n`invoice_status_code` VARCHAR(10) NOT NULL,\n`invoice_date` DATETIME\n);', 'CREATE TABLE `Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_status_code` VARCHAR(10) NOT NULL,\n`date_order_placed` DATETIME NOT NULL,\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER PRIMARY KEY ,\n`product_id` INTEGER NOT NULL,\n`order_id` INTEGER NOT NULL,\n`order_item_status_code` VARCHAR(10) NOT NULL,\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipments` (\n`shipment_id` INTEGER PRIMARY KEY,\n`order_id` INTEGER NOT NULL,\n`invoice_number` INTEGER NOT NULL,\n`shipment_tracking_number` VARCHAR(80),\n`shipment_date` DATETIME,\nFOREIGN KEY (`invoice_number` ) REFERENCES `Invoices`(`invoice_number` ),\nFOREIGN KEY (`order_id` ) REFERENCES `Orders`(`order_id` )\n);', 'CREATE TABLE `Shipment_Items` (\n`shipment_id` INTEGER NOT NULL,\n`order_item_id` INTEGER NOT NULL,\nPRIMARY KEY (`shipment_id`,`order_item_id`),\nFOREIGN KEY (`shipment_id` ) REFERENCES `Shipments`(`shipment_id` ),\nFOREIGN KEY (`order_item_id` ) REFERENCES `Order_Items`(`order_item_id` )\n);']

###Input:
###Input:
What are the colors , descriptions , and sizes for all products that are not at the maximum price ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Return the names of directors who are older than the average age.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Find the the name of the oldest director.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
How many channels have the word 'bbc' in their internet link?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
How many different digital terrestrial channels are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
List all program titles in the order of starting year. List the most recent one first.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Which director is in charge of the most programs?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Find the name and age of the director who is in charge of the most programs?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Return the title of the program that began most recently.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Find the name and website link of the channels that have more than one program.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Find the number of programs for each channel. Return the name of each channel as well.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Find the number of channels that do not run any program.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
What is the name of the director who is in the "Dracula" program?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Find the name and internet web of the channel that is directed by the most directors.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Find the name of the directors whose age is between 30 and 60.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
give me the name of channels that have both a director younger than 40 and a director older than 60.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "channel" (\n"Channel_ID" int,\n"Name" text,\n"Analogue_terrestrial_channel" text,\n"Digital_terrestrial_channel" text,\n"Internet" text,\nPRIMARY KEY ("Channel_ID")\n);', 'CREATE TABLE "director" (\n"Director_ID" int,\n"Name" text,\n"Age" int,\nPRIMARY KEY ("Director_ID")\n);', 'CREATE TABLE "program" (\n"Program_ID" int,\n"Start_Year" real,\n"Title" text,\n"Director_ID" int,\n"Channel_ID" int,\nPRIMARY KEY ("Program_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);', 'CREATE TABLE "director_admin" (\n"Director_ID" int,\n"Channel_ID" int,\n"Is_first_director" bool,\nPRIMARY KEY ("Director_ID","Channel_ID"),\nFOREIGN KEY ("Director_ID") REFERENCES "director"("Director_ID"),\nFOREIGN KEY ("Channel_ID") REFERENCES "channel"("Channel_ID")\n);']

###Input:
###Input:
Find the id and name of the channel that is not directed by Hank Baskett.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
How many radios are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
List the transmitters of radios in ascending order of erp kw .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
What are the names and original air dates of tv shows?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
List the station names of city channels whose affiliation is not "ABC".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
What is the transmitter of the radio with the largest ERP_kW?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
What is the average ERP across all radios?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
Show the different affiliations of city channels and the number of city channels with each affiliation.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
Please show the most common affiliation for city channels.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
List the affiliations shared by more than three city channels.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
Show the cities and station names of city channels in ascending alphabetical order of station name.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
Show the transmitters of radios and the cities of the channels they are associated with.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
Show the transmitters of the radios and the number of city channels they are associated with.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "city_channel" (\n"ID" int,\n"City" text,\n"Station_name" text,\n"Owned_Since" real,\n"Affiliation" text,\nPRIMARY KEY ("ID")\n);', 'CREATE TABLE "radio" (\n"Radio_ID" int,\n"Transmitter" text,\n"Radio_MHz" text,\n"2FM_MHz" text,\n"RnaG_MHz" text,\n"Lyric_FM_MHz" text,\n"ERP_kW" text,\nPRIMARY KEY ("Radio_ID")\n);', 'CREATE TABLE "tv_show" (\n"tv_show_ID" int,\n"tv_show_name" text,\n"Sub_tittle" text,\n"Next_show_name" text,\n"Original_Airdate" text,\nPRIMARY KEY ("tv_show_ID")\n);', 'CREATE TABLE "city_channel_radio" (\n"City_channel_ID" int,\n"Radio_ID" int,\n"Is_online" bool,\nPRIMARY KEY ("City_channel_ID","Radio_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`Radio_ID`) REFERENCES `radio`(`Radio_ID`)\n);', 'CREATE TABLE "city_channel_tv_show" (\n"City_channel_ID" int,\n"tv_show_ID" int,\n"Is_online" bool,\n"Is_free" bool,\nPRIMARY KEY ("City_channel_ID","tv_show_ID"),\nFOREIGN KEY (`City_channel_ID`) REFERENCES `city_channel`(`ID`),\nFOREIGN KEY (`tv_show_ID`) REFERENCES `tv_show`(`tv_show_ID`)\n);']

###Input:
###Input:
Show the distinct transmitters of radios that are not associated with any city channel.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What is the model of the vehicle with maximum top speed whose power is higher than 6000?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What are the names of the drivers who are citizens of the 'United States'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the names of drivers with citizenship from the United States.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What is the id of the driver who has driven the most vehicles, and how many vehicles is this?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the maximum and average power for the vehicles built by Zhuzhou.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What is the id of the vehicle driven for the least times for the vehicles ever used?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the id of the vehicle that has been driven the fewest times.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What is the top speed and power of the vehicle manufactured in the year of 1996?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the top speed and power of the vehicle that was built in the year 1996.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What are the build year, model name and builder of the vehicles?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Give the build year, model, and builder of each vehicle.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
How many drivers have driven vehicles built in 2012?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Count the number of different drivers who have driven vehicles built in 2012.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
How many drivers have raced in 'NASCAR'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Count the number of drivers who have raced in NASCAR.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What is the average top speed of vehicles?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the average top speed across all vehicles.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What are the distinct driver names who have driven vehicles with power more than 5000 ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the names of drivers who have driven vehicles with power over 5000.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Which car models have total production larger than 100 or top speed higher than 150?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Give the models of cars that have a total production of over 100 or a top speed over 150.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What are the model names and build year of the cars with 'DJ' in its model name?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the model and build year of cars that include "DJ" in their model names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What are the models which have not been driven by any drivers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the models of vehicles that have never been driven.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
How many vehicles have maximum top speed?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Count the number of vehicles that have a top speed equal to the maximum across all vehicles.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Show all driver names in the alphabetical order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What are the names of drivers, returned in alphbetical order?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
How many drivers have been racing in each racing series?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Count the number of drivers that have raced in each series.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
How many drivers have not driven any cars?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "vehicle" (\n"Vehicle_ID" int,\n"Model" text,\n"Build_Year" text,\n"Top_Speed" int,\n"Power" int,\n"Builder" text,\n"Total_Production" text,\nPRIMARY KEY ("Vehicle_ID")\n);', 'CREATE TABLE "driver" (\n"Driver_ID" int,\n"Name" text,\n"Citizenship" text,\n"Racing_Series" text,\nPRIMARY KEY ("Driver_ID")\n);', 'CREATE TABLE "vehicle_driver" (\n"Driver_ID" int,\n"Vehicle_ID" int,\nPRIMARY KEY ("Driver_ID","Vehicle_ID"),\nFOREIGN KEY ("Driver_ID") REFERENCES "driver"("Driver_ID"),\nFOREIGN KEY ("Vehicle_ID") REFERENCES "vehicle"("Vehicle_ID")\n);']

###Input:
###Input:
Count the number of drivers who have not driven any vehicles.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
How many exams are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Count the number of exams.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
List the distinct subject code of exams in ascending alphabetical order .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Give me an alphabetically ordered list of the distinct subject code for exams.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
What are the names and dates of the exams with subject code that is not "Database"?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Find the exams whose subject code is not "Database". What are the exam dates and exam names?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
List the dates of the exams with subject code containing the word "data", in descending order of dates.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
What are the dates of the exams whose subject code contains the substring "data"? Return them in descending order of dates.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
What are the type of questions and their counts?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
For each question type, return its type code and its count of occurrence.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
What are the distinct student answer texts that received comments "Normal"?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
List all the distinct student answer texts to which comments "Normal" were given?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
How many different comments are there for student answers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Count the number of different comments for student answers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
List all the student answer texts in descending order of count.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Sort the student answer texts in descending order of their frequency of occurrence.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Please show the first names of students and the dates of their answers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
For each student answer, find the first name of the student and the date of the answer.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Please show the email addresses of students and the dates of their answers in descending order of dates.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Please show the least common assessment for students.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Which assessment has the smallest frequency count?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Please show the first names of the students that have at least two answer records.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Which students have 2 or more answer records? Give me their first names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
What is the most common valid answer text?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Find the valid answer text that appeared most frequently.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
List the last names of the students whose gender is not "M".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
What are the last names of the students with gender other than "M"?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
List each gender and the corresponding number of students.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
For each gender, return the gender code and the number of students who identify as that gender.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
List the last names of the students whose gender is "F" or "M".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Which students identify their gender as "F" or "M"? Give me their last names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
List the first names of the students who do not have any answers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Which students do not have any answers? Find their first names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Show the student answer texts that received both "Normal" and "Absent" as comments.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Which student answer texts were given both "Normal" and "Absent" as comments?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Show the types of questions that have at least three questions.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Which types of questions have 3 or more questions? Return the questions type code.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
Show all information on students.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\nStudent_ID INTEGER NOT NULL,\nFirst_Name VARCHAR(255),\nMiddle_Name VARCHAR(255),\nLast_Name VARCHAR(255),\nGender_MFU CHAR(1),\nStudent_Address VARCHAR(255),\nEmail_Adress VARCHAR(255),\nCell_Mobile_Phone VARCHAR(255),\nHome_Phone VARCHAR(255),\nPRIMARY KEY (Student_ID)\n);', 'CREATE TABLE Questions (\nQuestion_ID INTEGER NOT NULL,\nType_of_Question_Code VARCHAR(15) NOT NULL,\nQuestion_Text VARCHAR(255),\nPRIMARY KEY (Question_ID)\n);', 'CREATE TABLE Exams (\nExam_ID INTEGER NOT NULL,\nSubject_Code CHAR(15) NOT NULL,\nExam_Date DATETIME,\nExam_Name VARCHAR(255),\nPRIMARY KEY (Exam_ID)\n);', 'CREATE TABLE Questions_in_Exams (\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nPRIMARY KEY (Exam_ID, Question_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID),\nFOREIGN KEY (Exam_ID) REFERENCES Exams (Exam_ID)\n);', 'CREATE TABLE Valid_Answers (\nValid_Answer_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nValid_Answer_Text VARCHAR(255),\nPRIMARY KEY (Valid_Answer_ID),\nFOREIGN KEY (Question_ID) REFERENCES Questions (Question_ID)\n);', 'CREATE TABLE Student_Answers (\nStudent_Answer_ID INTEGER NOT NULL,\nExam_ID INTEGER NOT NULL,\nQuestion_ID INTEGER NOT NULL,\nStudent_ID INTEGER NOT NULL,\nDate_of_Answer DATETIME,\nComments VARCHAR(255),\nSatisfactory_YN VARCHAR(1),\nStudent_Answer_Text VARCHAR(255),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),\nFOREIGN KEY (Exam_ID, Question_ID) REFERENCES Questions_in_Exams (Exam_ID,Question_ID)\n);', 'CREATE TABLE Student_Assessments (\nStudent_Answer_ID VARCHAR(100) NOT NULL,\nValid_Answer_ID INTEGER NOT NULL,\nStudent_Answer_Text VARCHAR(255),\nSatisfactory_YN CHAR(1),\nAssessment VARCHAR(40),\nPRIMARY KEY (Student_Answer_ID),\nFOREIGN KEY (Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)\n);']

###Input:
###Input:
What is al the available information of each student?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many addresses do we have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Count the number of addresses.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
List all address ids and address details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are all the address ids and address details?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many products do we have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Count the number of products.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all product ids, product type codes, and product name.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the ids, type codes, and names for all products?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the price for the product with name Monitor?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the price of the Monitor product.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show the minimum, average, maximum price for all products.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the minimum, average, and maximum prices across all products?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the average price for products with type Clothes?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Return the average price of Clothes.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many hardware type products do we have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Count the number of products of the type Hardware.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all product names with price higher than the average.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the names of products that have a price above the average for all products.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all hardware product names with price higher than the average price of hardware type products.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the names of Hardware product with prices above the average price of Hardware products.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the name of the most expensive product with type Clothes?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the name of the most expensive Clothes product.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the product id and product name for the cheapest Hardware type product?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the id and name of the cheapest Hardware product.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
List all product names in descending order of price.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the names of the products, sorted by descending price?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all hardware type products in ascending order of price.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the names of all Hardware products, sorted by price ascending?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
List all product type codes and the number of products in each type.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many products are there for each product type?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all product type codes and the average price for each type.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the average price of products for each product type?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the product type code with at least two products?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the product type codes of product types that have two or more products.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the product type code with most number of products?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the most frequent product type code?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many customers do we have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Count the number of customers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all customer ids and customer names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the ids and names of all customers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the customer address, customer phone, and customer email for Jeromy?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the address, phone, and email for customers with the name Jeromy.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all payment method codes and the number of customers in each code.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many customers use each payment method?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the payment method code used by most number of customers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the code of the payment method that is most commonly used.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all customer names with the  payment method code used by least number of customers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the names of customers who use the least common payment method?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the payment method and customer number for customer named Jeromy?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the payment method code and customer number corresponding to the customer named Jeromy.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the distinct payment methods used by customers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the different payment method codes that customers use.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show the id and the product type for all products, order by product name.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the ids and product types for all products, sorted alphabetically by product name?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the product type with least number of products?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the code of the product type that is least common?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many customer orders do we have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Count the number of customer orders.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show the order ids, order dates, and order status codes for all orders by customer Jeromy.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What were the ids, dates, and status codes for orders made by Jeromy?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all customer names, ids and the number of orders by each customer.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the names, ids, and number of orders made for each customer?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the customer id, name, phone, and email for the customer with most orders?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the id, name, phone, and email corresponding to the customer who made the most orders.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all order status and the number of orders in each status.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many orders have each order status code?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the order status code that is most common?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Give the order status code that is most frequent across customer orders.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many customers do not have an order?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Count the number of customers who have not made an order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all product names without an order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the names of products that have not been ordered?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many products named Monitor have been ordered?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What is the total number of Monitor products that have been ordered?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many customers have ordered the product named Monitor?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Count the number of different customers who have bought a Monitor Product.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
How many customers have an order?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Count the number of differnt customers who have made an order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all customer ids without an order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the ids of customers who have not made an order?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Products` (\n`product_id` INTEGER PRIMARY KEY,\n`product_type_code` VARCHAR(15),\n`product_name` VARCHAR(80),\n`product_price` DOUBLE NULL\n);', 'CREATE TABLE `Addresses` (\n`address_id` INTEGER PRIMARY KEY,\n`address_details` VARCHAR(255)\n);', 'CREATE TABLE `Customers` (\n`customer_id` INTEGER PRIMARY KEY,\n`address_id` INTEGER NOT NULL,\n`payment_method_code` VARCHAR(15),\n`customer_number` VARCHAR(20),\n`customer_name` VARCHAR(80),\n`customer_address` VARCHAR(255),\n`customer_phone` VARCHAR(80),\n`customer_email` VARCHAR(80)\n);', 'CREATE TABLE `Customer_Orders` (\n`order_id` INTEGER PRIMARY KEY,\n`customer_id` INTEGER NOT NULL,\n`order_date` DATETIME NOT NULL,\n`order_status_code` VARCHAR(15),\nFOREIGN KEY (`customer_id` ) REFERENCES `Customers`(`customer_id` )\n);', 'CREATE TABLE `Order_Items` (\n`order_item_id` INTEGER NOT NULL ,\n`order_id` INTEGER NOT NULL,\n`product_id` INTEGER NOT NULL,\n`order_quantity` VARCHAR(80),\nFOREIGN KEY (`order_id` ) REFERENCES `Customer_Orders`(`order_id` ),\nFOREIGN KEY (`product_id` ) REFERENCES `Products`(`product_id` )\n);']

###Input:
###Input:
What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
How many buildings are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Count the number of buildings.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
List the names of buildings in ascending order of number of stories.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
What is the list of building names, sorted by the number of stories of each building in ascending order?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
List the addresses of buildings in descending order of building completion year.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Sort the buildings in descending order of building completion year, and return the building addresses.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
What is the maximum number of stories of buildings not completed in 1980?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Among the buildings not completed in 1980, what is the maximum number of stories?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
What is the average population for all regions?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Compute the average population of a region.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
What are the names of regions in ascending alphabetical order?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
List the names of regions in alphabetical order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
What are the capitals of the regions with area bigger than 10000?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Give me the capitals of the regions whose area is larger than 10000.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
List the capital of the region with the largest population.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Which region has the largest population? Give me the capital of the region.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
List the names of the regions with the top 5 largest areas.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
What are the names of the 5 largest regions in terms of area?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Show the names of buildings and the names of regions they are in.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
For each building, return the name of the building and the name of the region it belongs to.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Show the names of regions that have more than one building.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Which regions have more than one building? Give me the names of the regions.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Show the capital of the region that has the most buildings.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Which region has the largest number of buildings? Show me the capital of the region.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Show addresses of buildings and the capitals of regions they are in.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
For each building, return the address of the building and the name of the region it belongs to.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Show the number of stories of buildings in the region with name "Abruzzo".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Return the number of stories for each building in the region named "Abruzzo".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Please show each completion year and the number of buildings completed in that year.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
For completion year, return the year and the number of buildings completed.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
List the year in which the most buildings are completed.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
In which year did the most building constructions complete?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
List the names of regions that do not have any buildings.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
What are the names of regions in which there are no buildings?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Show the distinct addresses of buildings.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Give me a list of distinct building addresses.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Show the completed years of buildings in descending order of the number of stories.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "building" (\n"Building_ID" int,\n"Region_ID" int,\n"Name" text,\n"Address" text,\n"Number_of_Stories" int,\n"Completed_Year" int,\nPRIMARY KEY ("Building_ID"),\nFOREIGN KEY ("Region_ID") REFERENCES "region"("Region_ID")\n);', 'CREATE TABLE "region" (\n"Region_ID" int,\n"Name" text,\n"Capital" text,\n"Area" int,\n"Population" int,\nPRIMARY KEY ("Region_ID")\n);']

###Input:
###Input:
Sort buildings in descending order of the number of stories, and return their completion years.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
List details of all the channel in alphabetical order .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
What is the list of channel details ordered alphabetically ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
How many services are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Count the number of services.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
What is the most common analytical layer type code?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find the analytical layer type code that appears most often.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find all the services that has been used by the customer with details "Hardy Kutch".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which services were used by the customer with details "Hardy Kutch"? Give me the service details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find the details of the services that have been used by more than 3 times .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which services were used by customers by more than 3 times? Give me the service details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find the details of the customer who has used services the most times.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
return the details of the customer with largest count of used services.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find the name of the customer who has used the most types of services .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which customer has used the most types of services ? Give me the customer details .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find the details of the customer who has never used any services .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which customers never used any services ? Give me the customer details .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find the details of the customers who have used the least-used service .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which customers used the least commonly-used service ? Give me the distinct customer details .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
How many distinct customer and services details are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Count the total number of available customers and services details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find all the customers whose name contains "Kutch".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
What are the details of the customers who have "Kutch" in part of their details?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find the name of all the services which either have been used by customer "Hardy Kutch" or have been rated as "good" in one of the customer interactions.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which services are used by the customer "Hardy Kutch" or are rated as "good" in a customer interaction? Give me the service details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find the names of all the services which both have been used by customer "Hardy Kutch" and have been rated "bad" in one of the customer interactions.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which services are both used by the customer "Hardy Kutch" and are rated as "bad" in a customer interaction? Give me the service details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find details of all the services that have interacted with `` 15 ij '' for the the channel details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Give me the details of all the services that have interacted with the channel with detail "15 ij".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which customers have experienced status "Stuck" and service and channel detail "bad" in  an interaction? Give me the customer details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
How many integration platforms are successful?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Count the number of integration platforms that have "Success" in the details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
List the details of all the customers who are associated with a failed integration platform .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which customers have integration platform details "Fail" in interactions? Give me the customer details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which service ( s ) has never been used by any customer ? List their details .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find details of the services that no customer has ever used . Return the service details .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find all the layer type codes with their corresponding usage count.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
For each analytical layer, return the analytical layer type code and the number of times it was used.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Services (\nService_ID INTEGER NOT NULL,\nService_Details VARCHAR(255),\nPRIMARY KEY (Service_ID)\n);', 'CREATE TABLE Customers (\nCustomer_ID INTEGER NOT NULL,\nCustomer_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Customer_ID)\n);', 'CREATE TABLE Channels (\nChannel_ID INTEGER NOT NULL,\nChannel_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Channel_ID)\n);', 'CREATE TABLE Customers_and_Services (\nCustomers_and_Services_ID INTEGER NOT NULL,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nCustomers_and_Services_Details CHAR(15) NOT NULL,\nPRIMARY KEY (Customers_and_Services_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Customer_Interactions (\nCustomer_Interaction_ID INTEGER NOT NULL,\nChannel_ID INTEGER,\nCustomer_ID INTEGER,\nService_ID INTEGER,\nStatus_Code CHAR(15),\nServices_and_Channels_Details VARCHAR(255),\nPRIMARY KEY (Customer_Interaction_ID),\nFOREIGN KEY (Service_ID) REFERENCES Services (Service_ID),\nFOREIGN KEY (Channel_ID) REFERENCES Channels (Channel_ID),\nFOREIGN KEY (Customer_ID) REFERENCES Customers (Customer_ID)\n);', 'CREATE TABLE Integration_Platform (\nIntegration_Platform_ID INTEGER NOT NULL,\nCustomer_Interaction_ID INTEGER NOT NULL,\nIntegration_Platform_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Integration_Platform_ID),\nFOREIGN KEY (Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)\n);', 'CREATE TABLE Analytical_Layer (\nAnalytical_ID INTEGER NOT NULL,\nCustomers_and_Services_ID VARCHAR(40) NOT NULL,\nPattern_Recognition VARCHAR(255) NOT NULL,\nAnalytical_Layer_Type_Code CHAR(15),\nPRIMARY KEY (Analytical_ID),\nFOREIGN KEY (Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)\n);']

###Input:
###Input:
Which services have been rated as "unsatisfied" in customers and services details? Give me the service_details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
How many vehicles do we have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Count the number of vehicles.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show names for all vehicles in descending order of model year.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the names of all vehicles, ordered by model year descending?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
List all distinct types of powertrain of vehicles.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the different types of powertrains?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show types of powertrain with vehicles both from 2014 and 2013.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the types of powertrains that have vehicles that were made in both 2013 and 2014?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show all types of powertrain and the number of vehicles in each type.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
How many vehicles have each type of powertrain?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What is the type of powertrain with most number of vehicles.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Which type of powertrain is most common?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show minimum, maximum, and average annual fuel cost for all vehicles.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the minimum, maximum, and average annual fuel costs across all vehicles?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show the name, age, membership credit for all customers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the names, ages, and membership credits for all customers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show the name and age of the customer with maximum membership credit.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What is the name and age of the customer with the most membership credit?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What is the average age for customers with a membership credit above the average?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Return the average age for customers who have membership above the average across all customers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show all information for all discounts.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Return all information about discounts.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show the name and total hours of renting for each vehicle.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the names and total rental hours for each vehicle?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show the name of vehicles with no renting history.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the names of vehicles that have never been rented?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show the name of customer with at least two renting history records.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the names of customers who have two or more records of rental history?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show the name and model year of the vehicle with most number of renting history records.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What is the name and model year of the vehicle which has been rented the most times?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Show the vehicle name with a descending order of total hours of renting.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the names of vehicles, sorted descending by total hours of renting?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What is the discount name with most number of renting history records?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Return the name of the discount that corresponds to the most rental history records.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Find the name and powertrain type of the cars that rented for more than 30 total hours.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the names and powertrain types of cars that have more than 30 total rental hours?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
Find the average city and highway fuel rates for cars with different powertrain types.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "Customers" (\n"id" int,\n"name" text,\n"age" int,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Discount" (\n"id" int,\n"name" text,\n"membership_credit" int,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Vehicles" (\n"id" int,\n"name" text,\n"Model_year" int,\n"Type_of_powertrain" text,\n"Combined_fuel_economy_rate" int,\n"City_fuel_economy_rate" int,\n"Highway_fuel_economy_rate" int,\n"Cost_per_25_miles" real,\n"Annual_fuel_cost" real,\n"Notes" text,\nPRIMARY KEY ("id")\n);', 'CREATE TABLE "Renting_history" (\n"id" int,\n"customer_id" int,\n"discount_id" int,\n"vehicles_id" int,\n"total_hours" int,\nPRIMARY KEY ("id"),\nFOREIGN KEY ("customer_id") REFERENCES "Customers"("id"),\nFOREIGN KEY ("vehicles_id") REFERENCES "Vehicles"("id"),\nFOREIGN KEY ("discount_id") REFERENCES "Discount"("id")\n);']

###Input:
###Input:
What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What is the average amount of a student loan?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Compute the average amount of student loans.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the biographical data of the students who never had a detention or student loan .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which students never had a detention or student loan ? Find their biographical data .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the loan amounts and loan dates of the students who have at least 2 achievements?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the amount and date of loan for the students who have two or more achievements.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the detail and id of the teacher who teaches the most courses.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the detail and id of the teacher who teaches the largest number of courses?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the distinct descriptions of all the detentions which have ever happened?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Return the distinct descriptions of all the detentions that have happened.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the personal details and the address type descriptions of all the students.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the personal details and the address type descriptions of each student?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the the address details and the biographical information of the students.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the address details and biographical information of each student?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the biographical data and the date of the transcript of all the students.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the biographical data and the date of transcript issuance of each student?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
How many students got the most common result in the behavioral monitoring details? Also list the result details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Find the most common result in the behavioral monitoring details. What are the count and the details of this result?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What is the biographical information of the students who got the most common result for their behaviour monitoring details ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which students have gone through any event? List the students' biographical data and event date.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Find the biographical data and event date for students who participated in any events.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
How many students have joined in the most common type of event? List the number, the event type and description.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What is the type of event the most students joined? Give me the number of students, and the event type code and description.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
How are all the achievements described? List the achievement detail and the type description.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the achievement detail and the type description of each achievements?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
How many teachers have taught a student who has not won any achievements?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Count the number of teachers who have taught students who have never won an achievement.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the date of the transcripts and the transcript details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the date and detail of each transcript?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the achievement type code, achievement details and the date of the achievements.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the type code, details, and date of each achievement?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Show the detention start time and end time of the detentions.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the starting time and ending time of each detention record?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Show the biographical information of the students whose details include the substring 'Suite'.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which students have 'Suite' as a substring in their details? Give me their biographical information.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the details for all the pairs of teachers and students who are in the same class.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
How many courses do students take at most? Also find the id of the student who takes the most courses.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which students take 2 courses? List student id and details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the ids and details of the students who take 2 courses?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What is the least common detention type? Show the type code and the description.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Give me the type code and description of the least common detention type.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which students have a student loan more than the average amount? List the students' biographical data and the details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Find the biographical data and details for students whose student loan is above the average amount.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
When was the earliest date of loan?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Return the earliest date of loan in the record.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which student has the loan with the minimum value? List the student's biographical information.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Find the biographical information of the student with the smallest student loan.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
When was the transcript issued for the student with loan of maximum value?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What is the transcript issuance date for the student with the largest amount of loan?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Which teachers have taught the student with the earliest transcript issuance? List the teacher details.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Find the details of the teachers who have taught the student with the earliest transcript issuance.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
How much total loan does each student have ? List the student ids and the amounts .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
For each student, find the student id and the total amount of loan he or she has.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
How many courses does each student take? List the student id, the student biographical data and the course count.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
For each student, find the student id, student biographical data, and the number of courses he or she takes.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
How many students have gone through a detention?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Count the number of students who have a detention record.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What is the code and description of the most common student address type?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What is the most common student address type? Give me the code and description of the address type.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
For those students who have gone through an event, who do not have a student loan? List the students' biographical data

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Among the students who have an event record, who do not have a student loan? Return the students' biographical data.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
List the start time and the end time of the students' addresses for the students who have 2 transcripts.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
What are the start time and end time of addresses for the students who receive 2 transcripts?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
When did all the detentions start?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Students (\n`student_id` INTEGER NOT NULL,\n`bio_data` VARCHAR(255) NOT NULL,\n`student_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`student_id`)\n);', 'CREATE TABLE Transcripts (\n`transcript_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_transcript` DATETIME(3),\n`transcript_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`transcript_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Behaviour_Monitoring (\n`behaviour_monitoring_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`behaviour_monitoring_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`behaviour_monitoring_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Addresses (\n`address_id` INTEGER NOT NULL,\n`address_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_id`)\n);', 'CREATE TABLE Ref_Event_Types (\n`event_type_code` CHAR(10) NOT NULL,\n`event_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_type_code`)\n);', 'CREATE TABLE Ref_Achievement_Type (\n`achievement_type_code` CHAR(15) NOT NULL,\n`achievement_type_description` VARCHAR(80),\nPRIMARY KEY (`achievement_type_code`)\n);', 'CREATE TABLE Ref_Address_Types (\n`address_type_code` CHAR(10) NOT NULL,\n`address_type_description` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`address_type_code`)\n);', 'CREATE TABLE Ref_Detention_Type (\n`detention_type_code` CHAR(10) NOT NULL,\n`detention_type_description` VARCHAR(80),\nPRIMARY KEY (`detention_type_code`)\n);', 'CREATE TABLE Student_Events (\n`event_id` INTEGER NOT NULL,\n`event_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`event_date` DATETIME(3),\n`other_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`event_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (event_type_code) REFERENCES Ref_Event_Types (event_type_code)\n);', 'CREATE TABLE Teachers (\n`teacher_id` INTEGER NOT NULL,\n`teacher_details` VARCHAR(255),\nPRIMARY KEY (`teacher_id`)\n);', 'CREATE TABLE Student_Loans (\n`student_loan_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_of_loan` DATETIME(3),\n`amount_of_loan` DECIMAL(15,4),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`student_loan_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id)\n);', 'CREATE TABLE Classes (\n`class_id` INTEGER NOT NULL,\n`student_id` INTEGER NOT NULL,\n`teacher_id` INTEGER NOT NULL,\n`class_details` VARCHAR(255) NOT NULL,\nPRIMARY KEY (`class_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (teacher_id) REFERENCES Teachers (teacher_id)\n);', 'CREATE TABLE Students_Addresses (\n`student_address_id` INTEGER NOT NULL,\n`address_id` INTEGER NOT NULL,\n`address_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_from` DATETIME(3),\n`date_to` DATETIME(3),\nPRIMARY KEY (`student_address_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (address_id) REFERENCES Addresses (address_id),\nFOREIGN KEY (address_type_code) REFERENCES Ref_Address_Types (address_type_code)\n);', 'CREATE TABLE Detention (\n`detention_id` INTEGER NOT NULL,\n`detention_type_code` CHAR(10) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`datetime_detention_start` DATETIME(3),\n`datetime_detention_end` DATETIME(3),\n`detention_summary` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`detention_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code)\n);', 'CREATE TABLE Achievements (\n`achievement_id` INTEGER NOT NULL,\n`achievement_type_code` CHAR(15) NOT NULL,\n`student_id` INTEGER NOT NULL,\n`date_achievement` DATETIME(3),\n`achievement_details` VARCHAR(255),\n`other_details` VARCHAR(255),\nPRIMARY KEY (`achievement_id`),\nFOREIGN KEY (student_id) REFERENCES Students (student_id),\nFOREIGN KEY (achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code)\n);']

###Input:
###Input:
Give me the detention start date for all the detention records.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
List all the author names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names of all the authors?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all Client names and their addresses.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names and addressed of all clients?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
List all Book titles, ISBNs, and sale prices.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the titles, ISBNs, and sale prices for all books?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
How many books do we have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Count the number of books.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
How many authors are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Count the number of authors.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
How many clients are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Return the number of clients.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
List names and addresses of all clients in alphabetical order by their names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names and addressed of all clients, ordered alphabetically by name?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all book titles and corresponding author names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names of all books and their corresponding authors?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all order ids and their client names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the ids of all orders and the corresponding client names?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all author names and the numbers of books each has written.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names of all the authors, and how many books has each written?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all book isbns and the numbers of orders for each.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are all isbns for each book, and how many times has each been ordered?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all book isbns and the total amount ordered for each.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the isbns for all books, and what is the total amount ordered for each?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show the book title corresponding to the book with the most number of orders.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the title of the book that has been ordered the greatest number of times?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show the book title and purchase price of the book that has had the greatest amount in orders.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the title and purchase price of the book that has the highest total order amount?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show the titles of books that have been ordered.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the different titles of books that have been ordered in the past?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show the names of clients who have ordered at least once.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names of the different clients who have made an order?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all client names and the number of orders each has made.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names of all the clients, and how many times has each of them ordered?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the name of the client with the most number of orders?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Give the name of the client who has made the most orders.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show the client names and their total amounts of books ordered.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names of all the clients, and the total amount of books ordered by each?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show the client name who has the most total amount of books ordered.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the name of the client who has ordered the greatest total amount of books?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all book titles for books that have no orders.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the titles of books that have never been ordered?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all client names for clients who have not made orders.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names of clients who have never made an order?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the maximum and the minimum sale price?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Give the maximum and minimum sale price of books.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the average purchase price and the average sale price?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Give the average purchase price and average sale price for books.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the maximum difference between the sale price and purchase price?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Return the largest difference in sale price and purchase price.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
List all book titles which have sale prices higher than the average.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the titles of books with sale prices above the average sale price across all books?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
List all book titles which have the lowest sale price .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the titles of books that have a sale price equal to the lowest sale price across all books ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
List all book titles which have highest purchase prices .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the titles of books with the highest purchase price across all books ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the average sale price of books written by George Orwell?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Give the average sale price of books authored by George Orwell.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are sale prices of books written by Plato?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Return the sale prices of books authored by Plato.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the title of the book written by George Orwell that has the lowest sale price?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Give the title of book by George Orwell that has the lowest saleprice.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What is the title of the book written by Plato has price lower than the average sale price of all books?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Who is the author of the book "Pride and Prejudice"?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Give the name of the author who wrote the book titled Pride and Prejudice.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
List titles of all books published by an author whose name contains the string 'Plato'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the titles of all books written by an author with a name that contains Plato?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
How many orders do we have for "Pride and Prejudice"?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Return the number of orders received for Pride and Prejudice.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show ids for orders including both "Pride and Prejudice" and "The Little Prince".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the order ids for orders that include both Pride and Prejudice and The Little Prince?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all book isbns which were ordered by both client Peter Doe and client James Smith.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the isbns of books ordered by both clients named Peter Doe and James Smith?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Find the title of books which are ordered by client Peter Doe but not client James Smith.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
Show all client names who have orders for "Pride and Prejudice".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Client\n(IdClient CHAR(10) PRIMARY KEY,\n Name VARCHAR(25) NOT NULL,\n Address VARCHAR(60) NOT NULL,\n NumCC CHAR(16) NOT NULL);', 'create table Orders\n(IdOrder CHAR(10) PRIMARY KEY,\n IdClient CHAR(10) NOT NULL REFERENCES Client on delete cascade,\n DateOrder DATE,\n DateExped DATE);', 'create table Author\n( idAuthor NUMBER PRIMARY KEY,\n  Name VARCHAR(25));', 'create table Book\n(ISBN CHAR(15) PRIMARY KEY,\nTitle VARCHAR(60) NOT NULL,\nAuthor CHAR(4) NOT NULL,\nPurchasePrice NUMBER(6,2) DEFAULT 0,\nSalePrice NUMBER(6,2) DEFAULT 0);', 'create table Author_Book\n(ISBN CHAR(15),\nAuthor NUMBER,\nCONSTRAINT al_PK PRIMARY KEY (ISBN, Author),\nCONSTRAINT BookA_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT Author_FK FOREIGN KEY (Author) REFERENCES `Author`(idAuthorA));', 'create table Books_Order(\nISBN CHAR(15),\nIdOrder CHAR(10),\namount NUMBER(3) CHECK (amount >0),\nCONSTRAINT lp_PK PRIMARY KEY (ISBN, idOrder),\nCONSTRAINT Book_FK FOREIGN KEY (ISBN) REFERENCES `Book`(ISBN) on delete cascade,\nCONSTRAINT pedido_FK FOREIGN KEY (IdOrder) REFERENCES `Orders`(IdOrder) on delete cascade);']

###Input:
###Input:
What are the names of clients who have ordered Pride and Prejudice?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
How many books are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
List the titles of books in ascending alphabetical order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
List the titles of books in descending order of pages.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What are the types and release dates of books?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What are the maximum and minimum number of chapters for each book?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What are the titles of books that are not "Poet"?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What is the average rating in reviews?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What are the titles and ratings of books?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What is the rating of the book with the largest number of chapters?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What is the rank of the book with the smallest number of pages?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What is the title of the book with the highest rank in the review?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What is the average number of readers for books of type "Novel"?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
For each book type return the type and the number of books of that type.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What is the most common type of books?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What are the types of books that have at least three books belonging to?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
List the titles of books in ascending order of the ratings in review?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
List the title and audio length for all the books in descending order of the number of readers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
How many books do not have reviews?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
How many distinct types of book are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "book" (\n"Book_ID" int,\n"Title" text,\n"Type" text,\n"Pages" int,\n"Chapters" int,\n"Audio" text,\n"Release" text,\nPRIMARY KEY ("Book_ID")\n);', 'CREATE TABLE "review" (\n"Review_ID" int,\n"Book_ID" int,\n"Rating" real,\n"Readers_in_Million" real,\n"Rank" int,\nPRIMARY KEY ("Review_ID"),\nFOREIGN KEY ("Book_ID") REFERENCES `book`("Book_ID")\n);']

###Input:
###Input:
What are the type and title of the books that are not rated?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
How many customers are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Count the number of customers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
List the names of customers in ascending order of level of membership.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Sort all the customers by the level of membership in ascending order, and return the customer names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
What are the nationalities and card credits of customers?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Find the nationality and card credit of each customer.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Show the names of customers with nationality "England" or "Australia".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Which customers have nationality "England" or "Australia"? Give me their names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
What is the average card credit of customers with membership level higher than 1?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Find the average card credit customers whose membership level is above 1.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
What is the card credit of the customer with the highest membership level?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Find the customer with the highest membership level and return his or her card credit.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Show different nationalities of customers, along with the number of customers of each nationality.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
How many customers are associated with each nationality? List the nationality and the number of customers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Show the most common nationality of customers.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Which nationality does the most customers have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Which nations have both customers with card credit above 50 and customers with card credit below 75.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Show the names of customers and names of dishes they order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
For each order, return the customer name and the dish name.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Show the names of customers and names of dishes they order, in descending order of the quantity of dish.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Show each customer name and the total quantities of dishes ordered by that customer.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Show the customers with total quantity of order bigger than 1.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Which customers have total order quantity greater than 1? Give me the customer names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Show distinct managers of branches.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Who are the distinct managers of branches?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
List the names of customers that do not have any order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "customer" (\n"Customer_ID" int,\n"Name" text,\n"Nationality" text,\n"Card_Credit" real,\n"Level_of_Membership" int,\nPRIMARY KEY ("Customer_ID")\n);', 'CREATE TABLE "branch" (\n"Branch_ID" int,\n"Manager" text,\n"Years_opened" int,\n"Location_of_office" text,\nPRIMARY KEY ("Branch_ID")\n);', 'CREATE TABLE "customer_order" (\n"Customer_ID" int,\n"Branch_ID" int,\n"Dish_Name" text,\n"Quantity" int,\nPRIMARY KEY ("Customer_ID","Branch_ID","Dish_Name"),\nFOREIGN KEY ("Customer_ID") REFERENCES `customer`("Customer_ID"),\nFOREIGN KEY ("Branch_ID") REFERENCES `branch`("Branch_ID")\n);']

###Input:
###Input:
Which customers do not have any order? Give me the customer names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
How many members are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
List the names of members in ascending order of age.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
What are the names and nationalities of the members?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
List the names of members whose nationality is not `` England '' .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Show the names of members whose age is either 19 or 20.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
What is the name of the oldest member?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Show different nationalities along with the number of members of each nationality.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Please show the most common nationality of members.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Show the nations that have at least two members.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Show the names of club leaders and the names of clubs they joined.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Show the names of club leaders of clubs with overall ranking higher than 100.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Show the names of club leaders that joined their club before 2018.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Show the name of the leader of the club named "Houston".

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
List the names of members that are not club leaders.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Show the nations that have both members older than 22 and members younger than 19.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
What is the average age of all the club leaders?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "member" (\n"Member_ID" int,\n"Name" text,\n"Nationality" text,\n"Age" int,\nPRIMARY KEY ("Member_ID")\n);', 'CREATE TABLE "club" (\n"Club_ID" int,\n"Overall_Ranking" int,\n"Team_Leader" text,\n"Club_Name" text,\nPRIMARY KEY ("Club_ID")\n);', 'CREATE TABLE "club_leader" (\n"Club_ID" int,\n"Member_ID" int,\n"Year_Join" text,\nPRIMARY KEY ("Club_ID","Member_ID"),\nFOREIGN KEY ("Club_ID") REFERENCES `club`("Club_ID"),\nFOREIGN KEY ("Member_ID") REFERENCES `member`("Member_ID")\n);']

###Input:
###Input:
Which club name contains the string 'state'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List all collections' subset. List the subsets' names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the collection susbset names?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is detail of collection subset with name 'Top collection'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What collection details are there on the subset named 'Top collection'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List all documents's subset. List the subset's name.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the document subset names?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the detail of document subset with name 'Best for 2000'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the details on the document subsets that are named 'Best for 2000'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List document id of all documents.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the object id of the document objects?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the parent document of document owned by Marlin? List the document id.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the document object ids of the objects owned by Marlin?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the owner of document with the Description 'Braeden Collection'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the owners of the document objects described as the 'Braeden Collection'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the owner of the parent document of document owned by 'Marlin'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
Who is the owner of the parent document of every documents where 'Marlin' is the owner?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the different descriptions of all the parent documents?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the unique description of every parent document?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
How many documents owned by Marlin?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the count of documents owned by Marlin?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List all documents ids that are not the parent of other documents.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the ids of the documents that are not parent documents?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
How many child documents does each parent document has? List the document id and the number.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the number of child documents for each parent document, and what are the ids of the parent documents?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List the name of all collections.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
what are the collection names?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the description of collection named Best?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the collection descriptions that are named as 'Best'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the name of the parent collection of the collection named Nice?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the names of all parent collections of the collection named Nice?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
Which collection is not the parent of other collection? List the collection's name.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the names of the collections that are not the parent of the other collections?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List document that have more than one child. List the document id.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the ids of the documents that have more than one child?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
How many child collection does the collection named Best has?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the number of child collections belonging to the collection named Best?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List all document which is related to document owned by Ransom . List the document id .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the document object ids of the related to the document owned by Ransom ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List collection subset id, name and number of collections in each subset.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the collection subset ids, names, and number of collections for each subset?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
Which document has most of child? List the document id and the number of child.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
For each document object id, how many children do they have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
Which document has least number of related documents? List the document id and the number of related documents.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the document object id with the least number of documents ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List all owner of documents that is related to documents owned by Braeden.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the different owners of documents that are related to ones owned by Braeden?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
Which unique subset does document owned by Braeden belong to? List the subset name.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the different subset names of all documents owned by Braeden?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List subset id, name and number of different documents in each subset.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the subset id, name, and number of different documents for each subset?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
Which document subset has most of number of distinct documents ? List subset id , name and number of documents .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
For document subset named 'Best for 2000', List all document id that in this subset.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
For the document subset named 'Best for 2000', what are the document ids in that subset?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List all document subsets of documents that related to each document id. List the name of document subset and the document id.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List the Collection Name that document owned by 'Ransom ' belong to .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the collection name of a document owned by 'Ransom'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
How many collections does each document belong to? List the count and the document id.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
For each document object id, how many collections does it belong to?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
How many documents does collection named 'Best' has?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the number of documents in the collection named 'Best'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List the document id of all documents in collection named Best.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What is the number of document object ids in the collection named Best?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
Which collection have most number of documents? List collection name, id and number of documents.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List id of documents that in document subset Best for 2000 and collection named Best.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List id of documents that in collection named Best but not in document subset Best for 2000.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List id of documents that in document subset Best for 2000 or in collection named Best.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
List all name of collections that are related to collection named Best.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the names of the collections that are related to the collection named Best?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
How many collections that are related to collection named Best?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
How many different collections are related to the one named 'Best'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
Which collection subset does collection name Best in? List collection subset name.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE Document_Subsets (\nDocument_Subset_ID INTEGER NOT NULL,\nDocument_Subset_Name VARCHAR(255) NOT NULL,\nDocument_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subsets (\nCollection_Subset_ID INTEGER NOT NULL,\nCollection_Subset_Name VARCHAR(255) NOT NULL,\nCollecrtion_Subset_Details VARCHAR(255) NOT NULL,\nPRIMARY KEY (Collection_Subset_ID)\n);', 'CREATE TABLE Document_Objects (\nDocument_Object_ID INTEGER NOT NULL,\nParent_Document_Object_ID INTEGER,\nOwner VARCHAR(255),\nDescription VARCHAR(255),\nOther_Details VARCHAR(255),\nPRIMARY KEY (Document_Object_ID)\n);', 'CREATE TABLE Collections (\nCollection_ID INTEGER NOT NULL,\nParent_Collection_ID INTEGER,\nCollection_Name VARCHAR(255),\nCollection_Description VARCHAR(255),\nPRIMARY KEY (Collection_ID)\n);', 'CREATE TABLE Documents_in_Collections (\nDocument_Object_ID INTEGER NOT NULL,\nCollection_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Collection_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID)\n);', 'CREATE TABLE Document_Subset_Members (\nDocument_Object_ID INTEGER NOT NULL,\nRelated_Document_Object_ID INTEGER NOT NULL,\nDocument_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Document_Object_ID, Related_Document_Object_ID),\nFOREIGN KEY (Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID),\nFOREIGN KEY (Related_Document_Object_ID) REFERENCES Document_Objects\n(Document_Object_ID),\nFOREIGN KEY (Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID)\n);', 'CREATE TABLE Collection_Subset_Members (\nCollection_ID INTEGER NOT NULL,\nRelated_Collection_ID INTEGER NOT NULL,\nCollection_Subset_ID INTEGER NOT NULL,\nPRIMARY KEY (Collection_ID, Related_Collection_ID),\nFOREIGN KEY (Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Related_Collection_ID) REFERENCES Collections (Collection_ID),\nFOREIGN KEY (Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID)\n);']

###Input:
###Input:
What are the collection subsets that the collection named 'Best' in?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
How many songs contain "Love" in their names?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
List the name of the songs in ascending, lexicographical order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
List the names and languages of the songs .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the maximum and minimum voice sound quality score of the performances?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the id, language and original artist of the songs whose name is not 'Love'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the names and original artists of the song whose English translation is 'All the streets of love'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the distinct stage presence scores for all the songs that are in language 'English' ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the ids and names of the participants who have performed at least two songs?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the ids, names and popularity of the participants, order by the number of songs they perform?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the id and name of the song sung by the most participants?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
How many performances have a stage presence score less than 7 or higher than 9?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
How many songs listed are not performed?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the average rhythm scores for the songs in each different language?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the distinct names of the participants who have sung a song in 'English'?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
Which song names have the substring "Is"?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "participants" (\n"id" int,\n"name" text,\n"popularity" real,\nprimary key ("id")\n);', 'CREATE TABLE "songs" (\n"id" int,\n"language" text,\n"original_artist" text,\n"name" text,\n"english_translation" text,\nprimary key ("id")\n);', 'CREATE TABLE "performance_score" (\n"participant_id" int,\n"songs_id" int,\n"voice_sound_quality" real,\n"rhythm_tempo" real,\n"stage_presence" real,\nprimary key ("participant_id", "songs_id"),\nforeign key("participant_id") references `participants`("id"),\nforeign key("songs_id") references `songs`("id")\n);']

###Input:
###Input:
Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
How many cities do we have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Count the number of cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
List all different states .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are all the distinct states?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
How many countries do we have?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Count the number of coutries.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show names, codes, states, countries for all cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the names, codes, states, and countries for all cities?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the latitude and longitude for Baltimore?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What latitude and longitude correspond to Baltimore?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show names for all cities in state PA.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the names of all cities in PA?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
How many cities are in Canada?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Count the number of cities in Canada.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show names for all USA city ordered by latitude.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are all the city names for cities in the USA, ordered by latitude?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show all states and number of cities in each state.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
How many cities are in each state?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show all countries and number of cities in each .

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
How many cities are there in each country?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
List all states with at least two cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Which states have at least two cities?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Which state has most number of cities?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the state that has the most cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Which country has fewest number of cities?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the country with the fewest number of cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show the first name and the last name for students living in state MD.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the full names of students living in MD?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
How many students live in China?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Count the number of students living in China.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Return the first name and major of students are living in Baltimore?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the first names and majors of students living in Baltimore?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show the number of students living in each country.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
How many students live in each country?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Find the number of students living in each city.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
How many students live in each city?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Which state has most number of students?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the state that has the most students.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Which country has least number of students?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the country with the fewest students.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show names for all cities where at least three students live.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the names of cities with at least three students?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show all states where more than 5 students live.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the states with more than 5 students?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show ids for all students who don't live in USA.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What the the student ids for students not living in the USA?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show ids for all female (sex is F) students living in state PA.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the student ids for female students in the state of PA?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show ids for all male students living outside of USA.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the ids for male students not in the USA?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the distance between BAL and CHI?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the distance between BAL and CHI?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show me the distance between Boston and Newark.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the distance between Boston and Newark?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the average, minimum, maximum distance between two cities?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the average, minimum, and maximum distances between two cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show me the city code of two cities with maximum distance.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the city codes of the cities with the maximum distance?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show me the city code of two cities with a distance greater than the average.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the city codes of cities with distance greater than average?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show me the city code of two cities with a distance less than 1000.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the city codes corresponding to cities with distances less than 1000?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the total distance between city BAL and all other cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the sum of distances between BAL and other cities?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the average distance between Boston and all other cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the average distance between Boston and other cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the name of the city closest to Chicago?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the name of the nearest city to Chicago.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the name of the city furthest to Boston?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the city name of the city with greatest distance from Boston.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show all city codes and the total distance to all other cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
For each city, what is the the city code and sum of distances from each?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Show all city names and the average distance to all other cities.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What are the city name and average distances from each city?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the distance between the cities where Linda Smith and Tracy Kim live?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the first name and last name of the student living furthest to Linda Smith?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
What is the full name of the student who lives furthest from Linda Smith?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Which state does the student whose first name is Linda live in?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Student (\n        StuID        INTEGER PRIMARY KEY,\n        LName        VARCHAR(12),\n        Fname        VARCHAR(12),\n        Age      INTEGER,\n        Sex      VARCHAR(1),\n        Major        INTEGER,\n        Advisor      INTEGER,\n        city_code    VARCHAR(3),\n        FOREIGN KEY(city_code) REFERENCES City(city_code)\n );', 'create table Direct_distance (\n  city1_code varchar(3) ,\n  city2_code varchar(3) ,\n  distance INTEGER,\n  FOREIGN KEY(city1_code) REFERENCES City(city_code),\n  FOREIGN KEY(city2_code) REFERENCES City(city_code)\n  \n) ;', 'create table City (\n       city_code  \tVARCHAR(3) PRIMARY KEY,\n       city_name  \tVARCHAR(25),\n       state\t\tVARCHAR(2),\n       country\t\tVARCHAR(25),\n       latitude\t\tFLOAT,\n       longitude\tFLOAT\n);']

###Input:
###Input:
Give the state that the student with first name Linda lives in.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Return all details of sailors who are older than 30.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What can you tell me about sailors who are older than age 30?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Return name and age for sailors who are younger than 30.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name and age of every sailor who is younger than age 30?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find boats reserved by Sailor with id 1.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the different boat ids reserved by the sailor whose id is 1?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Who reserved boat 102?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name of the sailor who reserved boat 102?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Return the unique boat ids (bid) of all reserved boats.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the ids of all boats that are reserved by someone?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name of sailors whose names contain letter e?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name of every sailor whose name contains the letter e?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
return the unique ids of sailors who are older than any sailors.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the different id of every sailor who is not the youngest?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Return the unique names of sailors who are older than any sailors whose rating is larger than 7.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the different names of sailors who are older than some other sailor with a rating larger than 7?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the name and id of the sailors who reserved at least one boat?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name and id of every sailor who reserved one or more boats?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the id and name of the sailors who reserved more than one boat.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the different names of sailors who reserved two or more boats ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the id of Sailors (sid) that reserved red or blue boat.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the sids for sailors who reserved red or blue boats?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the name and id of Sailors (sid) that reserved red or blue boat.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the names and ids of sailors who reserved red or blue boats?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the id of Sailors (sid) that reserved red and blue boat.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the ids of sailors who reserved red and blue boats?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the name and id of Sailors (sid) that reserved red and blue boat.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the names and ids of sailors who reserved red and blue boats?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the ids of sailors that haven’t reserved a boat?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the ids of sailors who have not reserved a boat?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
what is the name and id of sailors who do not have a reservation of a boat?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the names and ids of all sailors who do not have boat reservations?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find id for the sailors who do not have a reservation of a boat?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is id about sailors who do not have boat reservations?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name of the sailors who reserved boat with id 103?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the name of the sailors who reserved boat with id 103.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name of all sailors whose rating is higher than any sailor named Luis?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the sailors' names, the ones whose rating is higher than any sailor named Luis?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name of all sailors whose rating is higher than all sailors named Luis?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the names of all sailors with a higher rating than every sailor named Luis?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the name and age of the oldest sailor.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name and age of the sailor with maximum age?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
how many sailors in total?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
How many sailors exist?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the average age of sailors whose rating is 7?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is average age of all sailors who have a rating of 7?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
How many sailors whose name starts with letter D exist ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the count of the sailors whose name starts with letter D ?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the average rating and max age of all sailors?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the average rating and largest age for the sailors

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the number of reservations for each boat.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
How many reservations exist for each boat?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the number of reservations for each boat with id greater than 50.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
How many reservations exist for each boat with an id greater than 50?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the number of reservations for each boat with more than 1 reservation.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
How many reservations exist for each boat that has more than 1 reservation already?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the number of reservations by sailors with id greater than 1 for each boat.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
How many reservations for each boat did the sailors with an id greater than 1 make?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the rating and average age for sailors who have reserved red boat grouped by rating?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the rating and average age for sailors who reserved red boats for each rating?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the name, rating and age of all sailors ordered by rating and age.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the name, rating, and age for every sailor? And order them by rating and age.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the total number of boats.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
How many boats are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
How many boats are red?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
How many red boats exist?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the names of boats booked by sailors whose age is between 20 and 30.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the names of the boats booked by people between age 20 and 30?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is highest rating between sailors?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What is the maximum rating for sailors?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
Find the names of sailors who reserved boat with the name Melon.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the names of sailors who reserved a boat with the name Melon?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
List the names and ages of all sailors sorted by rating in descending order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['create table Sailors (\nsid INTEGER primary key,\nname TEXT,\nrating INTEGER,\nage INTEGER\n);', 'CREATE TABLE Boats (\n  bid INTEGER primary key,\n  name TEXT,\n  color TEXT\n);', 'CREATE TABLE Reserves (\n  sid INTEGER,\n  bid INTEGER,\n  day TEXT,\n  foreign key (sid) references Sailors(sid),\n  foreign key (bid) references Boats(bid)\n);']

###Input:
###Input:
What are the names and ages of all sailors sorted by decreasing rating?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the model of the most expensive headphone.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which headphone model has the highest price?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
List all different headphone models in the alphabetical order.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Return the list of distinct headphone models ordered alphabetically.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which headphone class is the most common one?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which headphone class contains the most headphones?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which headphone class does have more than two headphones?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the headphone class that does not contain more than two headphones.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the number of headphones with a price higher than 200 for each class.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
How many headphones cost more than 200 for each headphone class?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
how many different earpads are there?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Count the number of different earpads.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the top 2 earpads that are mostly used.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
What are the top 2 earpads in terms of the number of headphones using them?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
What are the model, class, and construction of the cheapest headphone?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the model, class, and construction of the headphone with the lowest price.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the average price for each headphone construction.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
How much does headphones cost on average for each headphone construction?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which headphone classes have both headphones with "Bowls" and headphones with "Comfort Pads" earpads?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the headphone classes that contain both headphones using "Bowls" earpads and headphones using "Comfort Pads" earpads.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which earpads never use plastic construction?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find all earpads that do not use plastic construction.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the headphone models whose price is below the average price.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
What are the headphone models that cost less than the average price?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Sort all store names by store open date.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Give me a list of store names, sorted by store open date.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
List name and parking info for the stores in the Tarzana neighborhood.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which stores are located in the "Tarzana" neighborhood? Return their names and parking information.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
How many different neighborhoods are there for all stores?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Count the number of distinct neighborhoods stores are located.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
find the number of stores in each neighborhood.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
How many stores are there in each neighborhood?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the name of the store which has the most headphones in stock. List the number of headphones as well.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which store has the headphones in stock? Give me the store name and the total quantity.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the name of stores which have no headphone in stock.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which stores do not have any headphones in stock? Give me the store names.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which headphone models do not have any stock in any store?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the headphone models that are not in stock in any store.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which headphone model has the largest quantity of stock across all the stores?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the headphone model whose total quantity in stock is the largest.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
How many headphones are stored in the Woodman store?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the total quantity of headphones stored in the Woodman store.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Which neighborhood does not have any headphone in stock?

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE "headphone" (\n"Headphone_ID" int,\n"Model" text,\n"Class" text,\n"Driver-matched_dB" real,\n"Construction" text,\n"Earpads" text,\n"Price" int,\nPRIMARY KEY ("Headphone_ID")\n);', 'CREATE TABLE "store" (\n"Store_ID" int,\n"Name" text,\n"Neighborhood" text,\n"Parking" text,\n"Date_Opened" text,\nPRIMARY KEY ("Store_ID")\n);', 'CREATE TABLE "stock" (\n"Store_ID" int,\n"Headphone_ID" int,\n"Quantity" int,\nPRIMARY KEY ("Store_ID","Headphone_ID"),\nFOREIGN KEY (`Store_ID`) REFERENCES `store`(`Store_ID`),\nFOREIGN KEY (`Headphone_ID`) REFERENCES `headphone`(`Headphone_ID`)\n);']

###Input:
###Input:
Find the neighborhood where no headphones are in stock.

###Response:

###Response:
item[input] 
I want you to act as a SQL terminal in front of an example database,          you need only to return the sql command to me.Below is an instruction that describes a task,          Write a response that appropriately completes the request.
##Instruction:
I want you to act as a SQL terminal in front of an example database, you need only to return the sql command to me.Below is an instruction that describes a task, Write a response that appropriately completes the request.
"
##Instruction:
['CREATE TABLE `Affiliation` (\n  `affiliation_id` int(11) NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `address` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`affiliation_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;', 'CREATE TABLE `Author` (\n  `author_id` int(11) NOT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `email` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`author_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;', 'CREATE TABLE `Author_list` (\n  `paper_id` varchar(25) NOT NULL,\n  `author_id` int(11) NOT NULL,\n  `affiliation_id` int(11) DEFAULT NULL,\n  PRIMARY KEY (`paper_id`,`author_id`),\n  KEY `author_id` (`author_id`),\n  KEY `affiliation_id` (`affiliation_id`),\n  CONSTRAINT `Author_list_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),\n  CONSTRAINT `Author_list_ibfk_2` FOREIGN KEY (`author_id`) REFERENCES `Author` (`author_id`),\n  CONSTRAINT `Author_list_ibfk_3` FOREIGN KEY (`affiliation_id`) REFERENCES `Affiliation` (`affiliation_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;', 'CREATE TABLE `Citation` (\n  `paper_id` varchar(25) NOT NULL,\n  `cited_paper_id` varchar(25) NOT NULL,\n  PRIMARY KEY (`paper_id`,`cited_paper_id`),\n  KEY `cited_paper_id` (`cited_paper_id`),\n  CONSTRAINT `Citation_ibfk_1` FOREIGN KEY (`paper_id`) REFERENCES `Paper` (`paper_id`),\n  CONSTRAINT `Citation_ibfk_2` FOREIGN KEY (`cited_paper_id`) REFERENCES `Paper` (`paper_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;', 'CREATE TABLE `Paper` (\n  `paper_id` varchar(25) NOT NULL,\n  `title` varchar(255) DEFAULT NULL,\n  `venue` varchar(255) DEFAULT NULL,\n  `year` int(11) DEFAULT NULL,\n  PRIMARY KEY (`paper_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;', "Create Them','HLT',2007),('N07-1029','Combining Outputs from Multiple Machine Translation Systems','HLT',2007),('N07-1030','Joint Determination of Anaphoricity and Coreference Resolution using Integer Programming','HLT',2007),('N07-1031','Automating Creation of Hierarchical Faceted Metadata Structures','HLT',2007),('N07-1032','Cross-Instance Tuning of Unsupervised Document Clustering Algorithms','HLT',2007),('N07-1033','Using ``Annotator Rationales\\'\\' to Improve Machine Learning for Text Categorization','HLT',2007),('N07-1034','Combining Reinformation Learning with Information-State Update Rules','HLT',2007),('N07-1035','Estimating the Reliability of MDP Policies: a Confidence Interval Approach','HLT',2007),('N07-1036','An Exploration of Eye Gaze in Spoken Language Processing for Multimodal Conversational Interfaces','HLT',2007),('N07-1037','Extracting Semantic Orientations of Phrases from Dictionary','HLT',2007),('N07-1038','Multiple Aspect Ranking Using the Good Grief Algorithm','HLT',2007),('N07-1039','Extracting Appraisal Expressions','HLT',2007),('N07-1040','Whose Idea Was This and Why Does it Matter? Attributing Scientific Work to Citations','HLT',2007),('N07-1041','Combining Probability-Based Rankers for Action-Item Detection','HLT',2007),('N07-1042','Multi-Document Relationship Fusion via Constraints on Probabilistic Databases','HLT',2007),('N07-1043','An Integrated Approach to Measuring Semantic Similarity between Words Using Information Available on the Web','HLT',2007),('N07-1044','An Information Retrieval Approach to Sense Ranking','HLT',2007),('N07-1045','Near-Synonym Choice in an Intelligent Thesaurus','HLT',2007),('N07-1046','A Log-Linear Block Transliteration Model based on Bi-Stream HMMs','HLT',2007),('N07-1047','Applying Many-to-Many Alignments and Hidden Markov Models to Letter-to-Phoneme Conversion','HLT',2007),('N07-1048','Analysis of Morph-Based Speech Recognition and the Modeling of Out-of-Vocabulary Words Across Languages','HLT',2007),('N07-1049','Tree Revision Learning for Dependency Parsing','HLT',2007),('N07-1050','Incremental Non-Projective Dependency Parsing','HLT',2007),('N07-1051','Improved Inference for Unlexicalized Parsing','HLT',2007),('N07-1052','Approximate Factoring for A* Search','HLT',2007),('N07-1053','A Cascaded Machine Learning Approach to Interpreting Temporal Expressions','HLT',2007),('N07-1054','Building and Refining Rhetorical-Semantic Relation Models','HLT',2007),('N07-1055','A Unified Local and Global Model for Discourse Coherence','HLT',2007),('N07-1056','Randomized Decoding for Selection-and-Ordering Problems','HLT',2007),('N07-1057','Multilingual Structural Projection across Interlinear Text','HLT',2007),('N07-1058','Combining Lexical and Grammatical Features to Improve Readability Measures for First and Second Language Texts','HLT',2007),('N07-1059','Automatic Assessment of Student Translations for Foreign Language Tutoring','HLT',2007),('N07-1060','Automatic and Human Scoring of Word Definition Responses','HLT',2007),('N07-1061','A Comparison of Pivot Methods for Phrase-Based Statistical Machine Translation','HLT',2007),('N07-1062','Efficient Phrase-Table Representation for Machine Translation with Applications to Online MT and Speech Translation','HLT',2007),('N07-1063','An Efficient Two-Pass Approach to Synchronous-CFG Driven Statistical MT','HLT',2007),('N07-1064','Statistical Phrase-Based Post-Editing','HLT',2007),('N07-1065','Automatic Answer Typing for How-Questions','HLT',2007),('N07-1066','A Probabilistic Framework for Answer Selection in Question Answering','HLT',2007),('N07-1067','Question Answering Using Integrated Information Retrieval and Information Extraction','HLT',2007),('N07-1068','Toward Multimedia: A String Pattern-Based Passage Ranking Model for Video Question Answering','HLT',2007),('N07-1069','Can Semantic Roles Generalize Across Genres?','HLT',2007),('N07-1070','Towards Robust Semantic Role Labeling','HLT',2007),('N07-1071','ISP: Learning Inferential Selectional Preferences','HLT',2007),('N07-1072','Computing Semantic Similarity between Skill Statements for Approximate Matching','HLT',2007),('N07-2001','Comparing User Simulation Models For Dialog Strategy Learning','HLT',2007),('N07-2002','Automatic Acquisition of Grammatical Types for Nouns','HLT',2007),('N07-2003','Conquest---An Open-Source Dialog System for Conferences','HLT',2007),('N07-2004','Joint Versus Independent Phonological Feature Models within CRF Phone Recognition','HLT',2007),('N07-2005','K-Best Suffix Arrays','HLT',2007),('N07-2006','Translation Model Pruning via Usage Statistics for Statistical Machine Translation','HLT',2007),('N07-2007','Combination of Statistical Word Alignments Based on Multiple Preprocessing Schemes','HLT',2007),('N07-2008','A Fast Method for Parallel Document Identification','HLT',2007),('N07-2009','Generalized Graphical Abstractions for Statistical Machine Translation','HLT',2007),('N07-2010','Situated Models of Meaning for Sports Video Retrieval','HLT',2007),('N07-2011','Exploring Affect-Context Dependencies for Adaptive System Development','HLT',2007),('N07-2012','A Filter-Based Approach to Detect End-of-Utterances from Prosody in Dialog Systems','HLT',2007),('N07-2013','Document Similarity Measures to Distinguish Native vs. Non-Native Essay Writers','HLT',2007),('N07-2014','Arabic Diacritization through Full Morphological Tagging','HLT',2007),('N07-2015','Are Very Large N-Best Lists Useful for SMT?','HLT',2007),('N07-2016','Relationship between Non-Projective Edges Their Level Types and Well-Nestedness','HLT',2007),('N07-2017','iROVER: Improving System Combination with Classification','HLT',2007),('N07-2018','Clustered Sub-Matrix Singular Value Decomposition','HLT',2007),('N07-2019','Implicitly Supervised Language Model Adaptation for Meeting Transcription','HLT',2007),('N07-2020','ILR-Based MT Comprehension Test with Multi-Level Questions','HLT',2007),('N07-2021','Semi-Supervised Learning for Semantic Parsing using Support Vector Machines','HLT',2007),('N07-2022','Discriminative Alignment Training without Annotated Data for Machine Translation','HLT',2007),('N07-2023','A Geometric Interpretation of Non-Target-Normalized Maximum Cross-Channel Correlation for Vocal Activity Detection in Meetings','HLT',2007),('N07-2024','Detection of Non-Native Sentences Using Machine-Translated Training Data','HLT',2007),('N07-2025','Exploiting Rich Syntactic Information for Relationship Extraction from Biomedical Articles','HLT',2007),('N07-2026','Look Who is Talking: Soundbite Speaker Name Recognition in Broadcast News Speech','HLT',2007),('N07-2027','Tagging Icelandic Text using a Linguistic and a Statistical Tagger','HLT',2007),('N07-2028','Efficient Computation of Entropy Gradient for Semi-Supervised Conditional Random Fields','HLT',2007),('N07-2029','Hybrid Document Indexing with Spectral Embedding','HLT',2007),('N07-2030','On using Articulatory Features for Discriminative Speaker Adaptation','HLT',2007),('N07-2031','RH: A Retro-Hybrid Parser','HLT',2007),('N07-2032','Subtree Mining for Relation Extraction from Wikipedia','HLT',2007),('N07-2033','Advances in the CMU/Interact Arabic GALE Transcription System','HLT',2007),('N07-2034','An Integrated Architecture for Speech-Input Multi-Target Machine Translation','HLT',2007),('N07-2035','Analysis and System Combination of Phrase- and N-Gram-Based Statistical Machine Translation Systems','HLT',2007),('N07-2036','Stating with Certainty or Stating with Doubt: Intercoder Reliability Results for Manual Annotation of Epistemically Modalized Statements','HLT',2007),('N07-2037','Joint Morphological-Lexical Language Modeling for Machine Translation','HLT',2007),('N07-2038','Agenda-Based User Simulation for Bootstrapping a POMDP Dialogue System','HLT',2007),('N07-2039','Reversible Sound-to-Letter/Letter-to-Sound Modeling Based on Syllable Structure','HLT',2007),('N07-2040','Are Some Speech Recognition Errors Easier to Detect than Others?','HLT',2007),('N07-2041','Simultaneous Identification of Biomedical Named-Entity and Functional Relation Using Statistical Parsing Techniques','HLT',2007),('N07-2042','Virtual Evidence for Training Speech Recognizers Using Partially Labeled Data','HLT',2007),('N07-2043','A High Accuracy Method for Semi-Supervised Information Extraction','HLT',2007),('N07-2044','The Effects of Word Prediction on Communication Rate for AAC','HLT',2007),('N07-2045','Language Modeling for Determiner Selection','HLT',2007),('N07-2046','Entity Extraction is a Boring Solved Problem---Or is it?','HLT',2007),('N07-2047','Kernel Regression Based Machine Translation','HLT',2007),('N07-2048','Modifying SO-PMI for Japanese Weblog Opinion Mining by Using a Balancing Factor and Detecting Neutral Expressions','HLT',2007),('N07-2049','Combined Use of Speaker- and Tone-Normalized Pitch Reset with Pause Duration for Automatic Story Segmentation in Mandarin Broadcast News','HLT',2007),('N07-2050','Chinese Named Entity Recognition with Cascaded Hybrid Model','HLT',2007),('N07-2051','A Three-Step Deterministic Parser for Chinese Dependency Parsing','HLT',2007),('N07-2052','Comparing Wikipedia and German Wordnet by Evaluating Semantic Relatedness on Multiple Datasets','HLT',2007),('N07-2053','Selective Phrase Pair Extraction for Improved Statistical Machine Translation','HLT',2007),('N07-2054','Speech Summarization Without Lexical Features for Mandarin Broadcast News','HLT',2007),('N07-2055','A Semi-Automatic Evaluation Scheme: Automated Nuggetization for Manual Annotation','HLT',2007),('N07-3001','Query Expansion Using Domain Information in Compounds','HLT',2007),('N07-3002','Learning Structured Classifiers for Statistical Dependency Parsing','HLT',2007),('N07-3003','Creating a Knowledge Base from a Collaboratively Generated Encyclopedia','HLT',2007),('N07-3004','Knowledge-Based Labeling of Semantic Relationships in English','HLT',2007),('N07-3005','Analysis of Summarization Evaluation Experiments','HLT',2007),('N07-3006','Exploiting Event Semantics to Parse the Rhetorical Structure of Natural Language Text','HLT',2007),('N07-3007','Dynamic Use of Ontologies in Dialogue Systems','HLT',2007),('N07-3008','Semantic Frames in Romanian Natural Language Processing Systems','HLT',2007),('N07-3009','Combining Evidence for Improved Speech Retrieval','HLT',2007),('N07-3010','Unsupervised Natural Language Processing Using Graph Models','HLT',2007),('N07-4001','Demonstration of PLOW: A Dialogue System for One-Shot Task Learning','HLT',2007),('N07-4002','The Automated Text Adaptation Tool','HLT',2007),('N07-4003','Adaptive Tutorial Dialogue Systems Using Deep NLP Techniques','HLT',2007),('N07-4004','POSSLT: A Korean to English Spoken Language Translation System','HLT',2007),('N07-4005','Automatic Segmentation and Summarization of Meeting Speech','HLT',2007),('N07-4006','Cedit - Semantic Networks Manual Annotation Tool','HLT',2007),('N07-4007','Spoken Dialogue Systems for Language Learning','HLT',2007),('N07-4008','RavenCalendar: A Multimodal Dialog System for Managing a Personal Calendar','HLT',2007),('N07-4009','The CALO Meeting Assistant','HLT',2007),('N07-4010','OMS-J: An Opinion Mining System for Japanese Weblog Reviews Using a Combination of Supervised and Unsupervised Approaches','HLT',2007),('N07-4011','Learning to Find Transliteration on the Web','HLT',2007),('N07-4012','A Conversational In-Car Dialog System','HLT',2007);", "Create Lexical Resources Using Information Extraction Techniques: The MOP System','ACL',2004),('P04-1029','Optimizing Typed Feature Structure Grammar Parsing Through Non-Statistical Indexing','ACL',2004),('P04-1030','Head-Driven Parsing For Word Lattices','ACL',2004),('P04-1031','Balancing Clarity And Efficiency In Typed Feature Logic Through Delaying','ACL',2004),('P04-1032','Minimal Recursion Semantics As Dominance Constraints: Translation Evaluation And Analysis','ACL',2004),('P04-1033','Learning With Unlabeled Data For Text Categorization Using A Bootstrapping And A Feature Projection Technique','ACL',2004),('P04-1034','The Sentimental Factor: Improving Review Classification Via Human-Provided Information','ACL',2004),('P04-1035','A Sentimental Education: Sentiment Analysis Using Subjectivity Summarization Based On Minimum Cuts','ACL',2004),('P04-1036','Finding Predominant Word Senses In Untagged Text','ACL',2004),('P04-1037','Unsupervised Sense Disambiguation Using Bilingual Probabilistic Models','ACL',2004),('P04-1038','Chinese Verb Sense Discrimination Using An EM Clustering Model With Rich Linguistic Features','ACL',2004),('P04-1039','Relieving The Data Acquisition Bottleneck In Word Sense Disambiguation','ACL',2004),('P04-1040','Enriching The Output Of A Parser Using Memory-Based Learning','ACL',2004),('P04-1041','Long-Distance Dependency Resolution In Automatically Acquired Wide-Coverage PCFG-Based LFG Approximations','ACL',2004),('P04-1042','Deep Dependencies From Context-Free Statistical Parsers: Correcting The Surface Dependency Approximation','ACL',2004),('P04-1043','A Study On Convolution Kernels For Shallow Statistic Parsing','ACL',2004),('P04-1044','Combining Acoustic And Pragmatic Features To Predict Recognition Performance In Spoken Dialogue Systems','ACL',2004),('P04-1045','Predicting Student Emotions In Computer-Human Tutoring Dialogues','ACL',2004),('P04-1046','Building Verb Predicates: A Computational View','ACL',2004),('P04-1047','Large-Scale Induction And Evaluation Of Lexical Resources From The Penn-II Treebank','ACL',2004),('P04-1048','Inducing Frame Semantic Verb Classes From WordNet And LDOCE','ACL',2004),('P04-1049','Paragraph- Word- And Coherence-Based Approaches To Sentence Ranking: A Comparison Of Algorithm And Human Performance','ACL',2004),('P04-1050','Evaluating Centering-Based Metrics Of Coherence For Text Structuring Using A Reliably Annotated Corpus','ACL',2004),('P04-1051','Computing Locally Coherent Discourses','ACL',2004),('P04-1052','Generating Referring Expressions In Open Domains','ACL',2004),('P04-1053','Discovering Relations Among Named Entities From Large Corpora','ACL',2004),('P04-1054','Dependency Tree Kernels For Relation Extraction','ACL',2004),('P04-1055','Classifying Semantic Relations In Bioscience Texts','ACL',2004),('P04-1056','Collective Information Extraction With Relational Markov Networks','ACL',2004),('P04-1057','Error Mining For Wide-Coverage Grammar Engineering','ACL',2004),('P04-1058','Alternative Approaches For Generating Bodies Of Grammar Rules','ACL',2004),('P04-1059','Adaptive Chinese Word Segmentation','ACL',2004),('P04-1060','Experiments In Parallel-Text Based Grammar Induction','ACL',2004),('P04-1061','Corpus-Based Induction Of Syntactic Structure: Models Of Dependency And Constituency','ACL',2004),('P04-1062','Annealing Techniques For Unsupervised Statistical Language Learning','ACL',2004),('P04-1063','Multi-Engine Machine Translation With Voted Language Model','ACL',2004),('P04-1064','Aligning Words Using Matrix Factorisation','ACL',2004),('P04-1065','FSA: An Efficient And Flexible C++ Toolkit For Finite State Automata Using On-Demand Computation','ACL',2004),('P04-1066','Improving IBM Word Alignment Model 1','ACL',2004),('P04-1067','A Geometric View On Bilingual Lexicon Extraction From Comparable Corpora','ACL',2004),('P04-1068','Creating Multilingual Translation Lexicons With Regional Variations Using Web Corpora','ACL',2004),('P04-1069','Probabilistic Parsing Strategies','ACL',2004),('P04-1070','An Alternative Method Of Training Probabilistic LR Parsers','ACL',2004),('P04-1071','Wrapping Of Trees','ACL',2004),('P04-1072','Splitting Complex Temporal Questions For Question Answering Systems','ACL',2004),('P04-1073','Question Answering Using Constraint Satisfaction: QA-By-Dossier-With-Contraints','ACL',2004),('P04-1074','Applying Machine Learning To Chinese Temporal Relation Resolution','ACL',2004),('P04-1075','Multi-Criteria-Based Active Learning For Named Entity Recognition','ACL',2004),('P04-1076','Weakly Supervised Learning For Cross-Document Person Name Disambiguation Supported By Information Extraction','ACL',2004),('P04-1077','Automatic Evaluation Of Machine Translation Quality Using Longest Common Subsequence And Skip-Bigram Statistics','ACL',2004),('P04-1078','A Unified Framework For Automatic Evaluation Using N-Gram Co-Occurrence Statistics','ACL',2004),('P04-1079','Extending The BLEU MT Evaluation Method With Frequency Weightings','ACL',2004),('P04-1080','Learning Word Sense With Feature Selection And Order Identification Capabilities','ACL',2004),('P04-1081','A Kernel PCA Method For Superior Word Sense Disambiguation','ACL',2004),('P04-1082','Using Linguistic Principles To Recover Empty Categories','ACL',2004),('P04-1083','Statistical Machine Translation By Parsing','ACL',2004),('P04-1084','Generalized Multitext Grammars','ACL',2004),('P04-1085','Identifying Agreement And Disagreement In Conversational Speech: Use Of Bayesian Networks To Model Pragmatic Dependencies','ACL',2004),('P04-1086','Using Conditional Random Fields To Predict Pitch Accents In Conversational Speech','ACL',2004),('P04-1087','Acquiring The Meaning Of Discourse Markers','ACL',2004),('P04-1088','FLSA: Extending Latent Semantic Analysis With Features For Dialogue Act Classification','ACL',2004),('P04-2001','Determining The Specificity Of Terms Using Compositional And Contextual Information','ACL',2004),('P04-2002','Minimizing The Length Of Non-Mixed Initiative Dialogs','ACL',2004),('P04-2003','Searching For Topics In A Large Collection Of Texts','ACL',2004),('P04-2004','Temporal Context: Applications And Implications For Computational Linguistics','ACL',2004),('P04-2005','Automatic Acquisition Of English Topic Signatures Based On A Second Language','ACL',2004),('P04-2006','ISTART: Paraphrase Recognition','ACL',2004),('P04-2007','Towards A Semantic Classification Of Spanish Verbs Based On Subcategorisation Information','ACL',2004),('P04-2008','Improving The Accuracy Of Subcategorizations Acquired From Corpora','ACL',2004),('P04-2009','Robust VPE Detection Using Automatically Parsed Text','ACL',2004),('P04-2010','A Machine Learning Approach To German Pronoun Resolution','ACL',2004),('P04-2011','Beyond N In N-Gram Tagging','ACL',2004),('P04-2012','A Framework For Unsupervised Natural Language Morphology Induction','ACL',2004),('P04-3001','TransType2 - An Innovative Computer-Assisted Translation System','ACL',2004),('P04-3002','Improving Domain-Specific Word Alignment For Computer Assisted Translation','ACL',2004),('P04-3003','Constructing Transliteration Lexicons From Web Corpora','ACL',2004),('P04-3004','Subsentential Translation Memory For Computer Assisted Writing And Translation','ACL',2004),('P04-3005','Customizing Parallel Corpora At The Document Level','ACL',2004),('P04-3006','An Automatic Filter For Non-Parallel Texts','ACL',2004),('P04-3007','Exploiting Aggregate Properties Of Bilingual Dictionaries For Distinguishing Senses Of English Words And Inducing English Sense Clusters','ACL',2004),('P04-3008','Interactive Grammar Development With WCDG','ACL',2004),('P04-3009','Wide Coverage Symbolic Surface Realization','ACL',2004),('P04-3010','Part-Of-Speech Tagging Considering Surface Form For An Agglutinative Language','ACL',2004),('P04-3011','Is Conceptual Combination Influenced By Word Order?','ACL',2004),('P04-3012','Corpus Representativeness For Syntactic Information Acquisition','ACL',2004),('P04-3013','Exploiting Unannotated Corpora For Tagging And Chunking','ACL',2004),('P04-3014','Improving Bitext Word Alignments Via Syntax-Based Reordering Of English','ACL',2004),('P04-3015','Hierarchy Extraction Based On Inclusion Of Appearance','ACL',2004),('P04-3016','Knowledge Intensive E-Mail Summarization In CARPANTA','ACL',2004),('P04-3017','Finding Anchor Verbs For Biomedical IE Using Predicate-Argument Structures','ACL',2004),('P04-3018','Resource Analysis For Question Answering','ACL',2004),('P04-3019','TANGO: Bilingual Collocational Concordancer','ACL',2004),('P04-3020','Graph-Based Ranking Algorithms For Sentence Extraction Applied To Text Summarization','ACL',2004),('P04-3021','Compiling Boostexter Rules Into A Finite-State Transducer','ACL',2004),('P04-3022','Combining Lexical Syntactic And Semantic Features With Maximum Entropy Models For Information Extraction','ACL',2004),('P04-3023','On The Equivalence Of Weighted Finite-State Transducers','ACL',2004),('P04-3024','A New Feature Selection Score For Multinomial Naive Bayes Text Classification Based On KL-Divergence','ACL',2004),('P04-3025','Incorporating Topic Information Into Semantic Analysis Models','ACL',2004),('P04-3026','A Practical Solution To The Problem Of Automatic Word Sense Induction','ACL',2004),('P04-3027','Automatic Clustering Of Collocation For Detecting Practical Sense Boundary','ACL',2004),('P04-3028','Co-Training For Predicting Emotions With Spoken Dialogue Data','ACL',2004),('P04-3029','Multimodal Database Access On Handheld Devices','ACL',2004),('P04-3030','Wysiwym With Wider Coverage','ACL',2004),('P04-3031','NLTK: The Natural Language Toolkit','ACL',2004),('P04-3032','Dyna: A Language For Weighted Dynamic Programming','ACL',2004),('P04-3033','MATCHkiosk: A Multimodal Interactive City Guide','ACL',2004),('P04-3034','Fragments And Text Categorization','ACL',2004),('P05-1001','A High-Performance Semi-Supervised Learning Method For Text Chunking','ACL',2005),('P05-1002','Scaling Conditional Random Fields Using Error-Correcting Codes','ACL',2005),('P05-1003','Logarithmic Opinion Pools For Conditional Random Fields','ACL',2005),('P05-1004','Supersense Tagging Of Unknown Nouns Using Semantic Similarity','ACL',2005),('P05-1005','Learning Semantic Classes For Word Sense Disambiguation','ACL',2005),('P05-1006','The Role Of Semantic Roles In Disambiguating Verb Senses','ACL',2005),('P05-1007','Aggregation Improves Learning: Experiments In Natural Language Generation For Intelligent Tutoring Systems','ACL',2005),('P05-1008','Empirically-Based Control Of Natural Language Generation','ACL',2005),('P05-1009','Towards Developing Generation Algorithms For Text-To-Text Applications','ACL',2005),('P05-1010','Probabilistic CFG With Latent Annotations','ACL',2005),('P05-1011','Probabilistic Disambiguation Models For Wide-Coverage HPSG Parsing','ACL',2005),('P05-1012','Online Large-Margin Training Of Dependency Parsers','ACL',2005),('P05-1013','Pseudo-Projective Dependency Parsing','ACL',2005),('P05-1014','The Distributional Inclusion Hypotheses And Lexical Entailment','ACL',2005),('P05-1015','Seeing Stars: Exploiting Class Relationships For Sentiment Categorization With Respect To Rating Scales','ACL',2005),('P05-1016','Inducing Ontological Co-Occurrence Vectors','ACL',2005),('P05-1017','Extracting Semantic Orientations Of Words Using Spin Model','ACL',2005),('P05-1018','Modeling Local Coherence: An Entity-Based Approach','ACL',2005),('P05-1019','Modelling The Substitutability Of Discourse Connectives','ACL',2005),('P05-1020','Machine Learning For Coreference Resolution: From Local Classification To Global Ranking','ACL',2005),('P05-1021','Improving Pronoun Resolution Using Statistics-Based Semantic Compatibility Information','ACL',2005),('P05-1022','Coarse-To-Fine N-Best Parsing And MaxEnt Discriminative Reranking','ACL',2005),('P05-1023','Data-Defined Kernels For Parse Reranking Derived From Probabilistic Models','ACL',2005),('P05-1024','Boosting-Based Parse Reranking With Subtree Features','ACL',2005),('P05-1025','Automatic Measurement Of Syntactic Development In Child Language','ACL',2005),('P05-1026','Experiments With Interactive Question-Answering','ACL',2005),('P05-1027','Question Answering As Question-Biased Term Extraction: A New Approach Toward Multilingual QA','ACL',2005),('P05-1028','Exploring And Exploiting The Limited Utility Of Captions In Recognizing Intention In Information Graphics','ACL',2005),('P05-1029','Scaling Up From Dialogue To Multilogue: Some Principles And Benchmarks','ACL',2005),('P05-1030','Implications For Generating Clarification Requests In Task-Oriented Dialogues','ACL',2005),('P05-1031','Towards Finding And Fixing Fragments: Using ML To Identify Non-Sentential Utterances And Their Antecedents In Multi-Party Dialogue','ACL',2005),('P05-1032','Scaling Phrase-Based Statistical Machine Translation To Larger Corpora And Longer Phrases','ACL',2005),('P05-1033','A Hierarchical Phrase-Based Model For Statistical Machine Translation','ACL',2005),('P05-1034','Dependency Treelet Translation: Syntactically Informed Phrasal SMT','ACL',2005),('P05-1035','QARLA: A Framework For The Evaluation Of Text Summarization Systems','ACL',2005),('P05-1036','Supervised And Unsupervised Learning For Sentence Compression','ACL',2005),('P05-1037','Digesting Virtual Geek Culture: The Summarization Of Technical Internet Relay Chats','ACL',2005),('P05-1038','Lexicalization In Crosslinguistic Probabilistic Parsing: The Case Of French','ACL',2005),('P05-1039','What To Do When Lexicalization Fails: Parsing German With Suffix Analysis And Smoothing','ACL',2005),('P05-1040','Detecting Errors In Discontinuous Structural Annotation','ACL',2005),('P05-1041','High Precision Treebanking - Blazing Useful Trees Using POS Information','ACL',2005),('P05-1042','A Dynamic Bayesian Framework To Model Context And Memory In Edit Distance Learning: An Application To Pronunciation Classification','ACL',2005),('P05-1043','Learning Stochastic OT Grammars: A Bayesian Approach Using Data Augmentation And Gibbs Sampling','ACL',2005),('P05-1044','Contrastive Estimation: Training Log-Linear Models On Unlabeled Data','ACL',2005),('P05-1045','Incorporating Non-Local Information Into Information Extraction Systems By Gibbs Sampling','ACL',2005),('P05-1046','Unsupervised Learning Of Field Segmentation Models For Information Extraction','ACL',2005),('P05-1047','A Semantic Approach To IE Pattern Induction','ACL',2005),('P05-1048','Word Sense Disambiguation Vs. Statistical Machine Translation','ACL',2005),('P05-1049','Word Sense Disambiguation Using Label Propagation Based Semi-Supervised Learning','ACL',2005),('P05-1050','Domain Kernels For Word Sense Disambiguation','ACL',2005),('P05-1051','Improving Name Tagging By Reference Resolution And Relation Detection','ACL',2005),('P05-1052','Extracting Relations With Integrated Information Using Kernel Methods','ACL',2005),('P05-1053','Exploring Various Knowledge In Relation Extraction','ACL',2005),('P05-1054','A Quantitative Analysis Of Lexical Differences Between Genders In Telephone Conversations','ACL',2005),('P05-1055','Position Specific Posterior Lattices For Indexing Speech','ACL',2005),('P05-1056','Using Conditional Random Fields For Sentence Boundary Detection In Speech','ACL',2005),('P05-1057','Log-Linear Models For Word Alignment','ACL',2005),('P05-1058','Alignment Model Adaptation For Domain-Specific Word Alignment','ACL',2005),('P05-1059','Stochastic Lexicalized Inversion Transduction Grammar For Alignment','ACL',2005),('P05-1060','Multi-Field Information Extraction And Cross-Document Fusion','ACL',2005),('P05-1061','Simple Algorithms For Complex Relation Extraction With Applications To Biomedical IE','ACL',2005),('P05-1062','Resume Information Extraction With Cascaded Hybrid Model','ACL',2005),('P05-1063','Discriminative Syntactic Language Modeling For Speech Recognition','ACL',2005),('P05-1064','A Phonotactic Language Model For Spoken Language Identification','ACL',2005),('P05-1065','Reading Level Assessment Using Support Vector Machines And Statistical Language Models','ACL',2005),('P05-1066','Clause Restructuring For Statistical Machine Translation','ACL',2005),('P05-1067','Machine Translation Using Probabilistic Synchronous Dependency Insertion Grammars','ACL',2005),('P05-1068','Context-Dependent SMT Model Using Bilingual Verb-Noun Collocation','ACL',2005),('P05-1069','A Localized Prediction Model For Statistical Machine Translation','ACL',2005),('P05-1070','Instance-Based Sentence Boundary Determination By Optimization For Natural Language Generation','ACL',2005),('P05-1071','Arabic Tokenization Part-Of-Speech Tagging And Morphological Disambiguation In One Fell Swoop','ACL',2005),('P05-1072','Semantic Role Labeling Using Different Syntactic Views','ACL',2005),('P05-1073','Joint Learning Improves Semantic Role Labeling','ACL',2005),('P05-1074','Paraphrasing With Bilingual Parallel Corpora','ACL',2005),('P05-1075','A Nonparametric Method For Extraction Of Candidate Phrasal Terms','ACL',2005),('P05-1076','Automatic Acquisition Of Adjectival Subcategorization From Corpora','ACL',2005),('P05-1077','Randomized Algorithms And NLP: Using Locality Sensitive Hash Functions For High Speed Noun Clustering','ACL',2005),('P05-2001','Hybrid Methods For POS Guessing Of Chinese Unknown Words','ACL',2005),('P05-2002','Understanding The Thematic Structure Of The Qur\\'an: An Exploratory Multivariate Approach','ACL',2005),('P05-2003','An Extensive Empirical Study Of Collocation Extraction Methods','ACL',2005),('P05-2004','Jointly Labeling Multiple Sequences: A Factorial HMM Approach','ACL',2005),('P05-2005','Exploiting Named Entity Taggers In A Second Language','ACL',2005),('P05-2006','Automatic Discovery Of Intentions In Text And Its Application To Question Answering','ACL',2005),('P05-2007','American Sign Language Generation: Multimodal NLG With Multiple Linguistic Channels','ACL',2005),('P05-2008','Using Emoticons To Reduce Dependency In Machine Learning Techniques For Sentiment Classification','ACL',2005),('P05-2009','Learning Meronyms From Biomedical Text','ACL',2005),('P05-2010','Using Readers To Identify Lexical Cohesive Structures In Texts','ACL',2005),('P05-2011','Towards An Optimal Lexicalization In A Natural-Sounding Portable Natural Language Generator For Dialog Systems','ACL',2005),('P05-2012','Phrase Linguistic Classification And Generalization For Improving Statistical Machine Translation','ACL',2005),('P05-2013','Automatic Induction Of A CCG Grammar For Turkish','ACL',2005),('P05-2014','Dialogue Act Tagging For Instant Messaging Chat Sessions','ACL',2005),('P05-2015','Learning Strategies For Open-Domain Natural Language Question Answering','ACL',2005),('P05-2016','Dependency-Based Statistical Machine Translation','ACL',2005),('P05-2017','Minimalist Parsing Of Subjects Displaced From Embedded Clauses In Free Word Order Languages','ACL',2005),('P05-2018','Centrality Measures In Text Mining: Prediction Of Noun Phrases That Appear In Abstracts','ACL',2005),('P05-2019','A Corpus-Based Approach To Topic In Danish Dialog','ACL',2005),('P05-2020','Learning Information Structure In The Prague Treebank','ACL',2005),('P05-2021','Speech Recognition Of Czech - Inclusion Of Rare Words Helps','ACL',2005),('P05-2022','Using Bilingual Dependencies To Align Words In English/French Parallel Corpora','ACL',2005),('P05-2023','An Unsupervised System For Identifying English Inclusions In German Text','ACL',2005),('P05-2024','Corpus-Oriented Development Of Japanese HPSG Parsers','ACL',2005),('P05-2025','Unsupervised Discrimination And Labeling Of Ambiguous Names','ACL',2005),('P05-2026','A Domain-Specific Statistical Surface Realizer','ACL',2005),('P05-3001','An Information-State Approach To Collaborative Reference','ACL',2005),('P05-3002','Accessing GermaNet Data And Computing Semantic Relatedness','ACL',2005),('P05-3003','Efficient Solving And Exploration Of Scope Ambiguities','ACL',2005),('P05-3004','CL Research\\'s Knowledge Management System','ACL',2005),('P05-3005','Dynamically Generating A Protein Entity Dictionary Using Online Resources','ACL',2005),('P05-3006','Descriptive Question Answering In Encyclopedia','ACL',2005),('P05-3007','High Throughput Modularized NLP System For Clinical Text','ACL',2005),('P05-3008','A Voice Enabled Procedure Browser For The International Space Station','ACL',2005),('P05-3009','The Linguist\\'s Search Engine: An Overview','ACL',2005),('P05-3010','Learning Source-Target Surface Patterns For Web-Based Terminology Translation','ACL',2005),('P05-3011','Speech OGLE: Indexing Uncertainty For Spoken Document Search','ACL',2005),('P05-3012','Multimodal Generation In The COMIC Dialogue System','ACL',2005),('P05-3013','Language Independent Extractive Summarization','ACL',2005),('P05-3014','SenseLearner: Word Sense Disambiguation For All Words In Unrestricted Text','ACL',2005),('P05-3015','Syntax-Based Semi-Supervised Named Entity Tagging','ACL',2005),('P05-3016','Portable Translator Capable Of Recognizing Characters On Signboard And Menu Captured By Its Built-In Camera','ACL',2005),('P05-3017','Supporting Annotation Layers For Natural Language Processing','ACL',2005),('P05-3018','Word Alignment And Cross-Lingual Resource Acquisition','ACL',2005),('P05-3019','SenseRelate::TargetWord - A Generalized Framework For Word Sense Disambiguation','ACL',2005),('P05-3020','A Practical Solution To The Problem Of Automatic Part-Of-Speech Induction From Text','ACL',2005),('P05-3021','Automating Temporal Annotation With TARSQI','ACL',2005),('P05-3022','Two Diverse Systems Built Using Generic Components For Spoken Dialogue (Recent Progress On TRIPS)','ACL',2005),('P05-3023','Transonics: A Practical Speech-To-Speech Translator For English-Farsi Medical Dialogs','ACL',2005),('P05-3024','The Wild Thing','ACL',2005),('P05-3025','Interactively Exploring A Machine Translation Model','ACL',2005),('P05-3026','Multi-Engine Machine Translation Guided By Explicit Word Matching','ACL',2005),('P05-3027','SenseClusters: Unsupervised Clustering And Labeling Of Similar Contexts','ACL',2005),('P05-3028','A Flexible Stand-Off Data Model With Query Language For Multi-Level Annotation','ACL',2005),('P05-3029','HAHAcronym: A Computational Humor System','ACL',2005),('P05-3030','Organizing English Reading Materials For Vocabulary Learning','ACL',2005),('P05-3031','Reformatting Web Documents Via Header Trees','ACL',2005),('P06-1001','Combination Of Arabic Preprocessing Schemes For Statistical Machine Translation','ACL',2006),('P06-1002','Going Beyond AER: An Extensive Analysis Of Word Alignments And Their Impact On MT','ACL',2006),('P06-1003','Unsupervised Topic Modelling For Multi-Party Spoken Discourse','ACL',2006),('P06-1004','Minimum Cut Model For Spoken Lecture Segmentation','ACL',2006),('P06-1005','Bootstrapping Path-Based Pronoun Resolution','ACL',2006),('P06-1006','Kernel-Based Pronoun Resolution With Structured Syntactic Knowledge','ACL',2006),('P06-1007','A Finite-State Model Of Human Sentence Processing','ACL',2006),('P06-1008','Acceptability Prediction By Means Of Grammaticality Quantification','ACL',2006),('P06-1009','Discriminative Word Alignment With Conditional Random Fields','ACL',2006),('P06-1010','Named Entity Transliteration With Comparable Corpora','ACL',2006),('P06-1011','Extracting Parallel Sub-Sentential Fragments From Non-Parallel Corpora','ACL',2006),('P06-1012','Estimating Class Priors In Domain Adaptation For Word Sense Disambiguation','ACL',2006),('P06-1013','Ensemble Methods For Unsupervised WSD','ACL',2006),('P06-1014','Meaningful Clustering Of Senses Helps Boost Word Sense Disambiguation Performance','ACL',2006),('P06-1015','Espresso: Leveraging Generic Patterns For Automatically Harvesting Semantic Relations','ACL',2006),('P06-1016','Modeling Commonality Among Related Classes In Relation Extraction','ACL',2006),('P06-1017','Relation Extraction Using Label Propagation Based Semi-Supervised Learning','ACL',2006),('P06-1018','Polarized Unification Grammars','ACL',2006),('P06-1019','Partially Specified Signatures: A Vehicle For Grammar Modularity','ACL',2006),('P06-1020','Morphology-Syntax Interface For Turkish LFG','ACL',2006),('P06-1021','PCFGs With Syntactic And Prosodic Indicators Of Speech Repairs','ACL',2006),('P06-1022','Dependency Parsing Of Japanese Spoken Monologue Based On Clause Boundaries','ACL',2006),('P06-1023','Trace Prediction And Recovery With Unlexicalized PCFGs And Slash Features','ACL',2006),('P06-1024','Learning More Effective Dialogue Strategies Using Limited Dialogue Move Features','ACL',2006),('P06-1025','Dependencies Between Student State And Speech Recognition Problems In Spoken Tutoring Dialogues','ACL',2006),('P06-1026','Learning The Structure Of Task-Driven Human-Human Dialogs','ACL',2006),('P06-1027','Semi-Supervised Conditional Random Fields For Improved Sequence Segmentation And Labeling','ACL',2006),('P06-1028','Training Conditional Random Fields With Multivariate Evaluation Measures','ACL',2006),('P06-1029','Approximation Lasso Methods For Language Modeling','ACL',2006),('P06-1030','Automated Japanese Essay Scoring System Based On Articles Written By Experts','ACL',2006),('P06-1031','A Feedback-Augmented Method For Detecting Errors In The Writing Of Learners Of English','ACL',2006),('P06-1032','Correcting ESL Errors Using Phrasal SMT Techniques','ACL',2006),('P06-1033','Graph Transformations In Data-Driven Dependency Parsing','ACL',2006),('P06-1034','Learning To Generate Naturalistic Utterances Using Reviews In Spoken Dialogue Systems','ACL',2006),('P06-1035','Measuring Language Divergence By Intra-Lexical Comparison','ACL',2006),('P06-1036','Enhancing Electronic Dictionaries With An Index Based On Associations','ACL',2006),('P06-1037','Guiding A Constraint Dependency Parser With Supertags','ACL',2006),('P06-1038','Efficient Unsupervised Discovery Of Word Categories Using Symmetric Patterns And High Frequency Words','ACL',2006),('P06-1039','Bayesian Query-Focused Summarization','ACL',2006),('P06-1040','Expressing Implicit Semantic Relations Without Supervision','ACL',2006),('P06-1041','Hybrid Parsing: Using Probabilistic Models As Predictors For A Symbolic Parser','ACL',2006),('P06-1042','Error Mining In Parsing Results','ACL',2006),('P06-1043','Reranking And Self-Training For Parser Adaptation','ACL',2006),('P06-1044','Automatic Classification Of Verbs In Biomedical Texts','ACL',2006),('P06-1045','Selection Of Effective Contextual Information For Automatic Synonym Acquisition','ACL',2006),('P06-1046','Scaling Distributional Similarity To Large Corpora','ACL',2006),('P06-1047','Extractive Summarization Using Inter- And Intra- Event Relevance','ACL',2006),('P06-1048','Models For Sentence Compression: A Comparison Across Domains Training Requirements And Evaluation Measures','ACL',2006),('P06-1049','A Bottom-Up Approach To Sentence Ordering For Multi-Document Summarization','ACL',2006),('P06-1050','Learning Event Durations From Event Descriptions','ACL',2006),('P06-1051','Automatic Learning Of Textual Entailments With Cross-Pair Similarities','ACL',2006),('P06-1052','An Improved Redundancy Elimination Algorithm For Underspecified Representations','ACL',2006),('P06-1053','Integrating Syntactic Priming Into An Incremental Probabilistic Parser With An Application To Psycholinguistic Modeling','ACL',2006),('P06-1054','A Fast Accurate Deterministic Parser For Chinese','ACL',2006),('P06-1055','Learning Accurate Compact And Interpretable Tree Annotation','ACL',2006),('P06-1056','Semi-Supervised Learning Of Partial Cognates Using Bilingual Bootstrapping','ACL',2006),('P06-1057','Direct Word Sense Matching For Lexical Substitution','ACL',2006),('P06-1058','An Equivalent Pseudoword Solution To Chinese Word Sense Disambiguation','ACL',2006),('P06-1059','Improving The Scalability Of Semi-Markov Conditional Random Fields For Named Entity Recognition','ACL',2006),('P06-1060','Factorizing Complex Models: A Case Study In Mention Detection','ACL',2006),('P06-1061','Segment-Based Hidden Markov Models For Information Extraction','ACL',2006),('P06-1062','A DOM Tree Alignment Model For Mining Parallel Data From The Web','ACL',2006),('P06-1063','QuestionBank: Creating A Corpus Of Parse-Annotated Questions','ACL',2006),('P06-1064','Creating A CCGbank And A Wide-Coverage CCG Lexicon For German','ACL',2006),('P06-1065','Improved Discriminative Bilingual Word Alignment','ACL',2006),('P06-1066','Maximum Entropy Based Phrase Reordering Model For Statistical Machine Translation','ACL',2006),('P06-1067','Distortion Models For Statistical Machine Translation','ACL',2006),('P06-1068','A Study On Automatically Extracted Keywords In Text Categorization','ACL',2006),('P06-1069','A Comparison And Semi-Quantitative Analysis Of Words And Character-Bigrams As Features In Chinese Text Categorization','ACL',2006),('P06-1070','Exploiting Comparable Corpora And Bilingual Dictionaries For Cross-Language Text Categorization','ACL',2006),('P06-1071','A Progressive Feature Selection Algorithm For Ultra Large Feature Spaces','ACL',2006),('P06-1072','Annealing Structural Bias In Multilingual Weighted Grammar Induction','ACL',2006),('P06-1073','Maximum Entropy Based Restoration Of Arabic Diacritics','ACL',2006),('P06-1074','An Iterative Implicit Feedback Approach To Personalized Search','ACL',2006),('P06-1075','The Effect Of Translation Quality In MT-Based Cross-Language Information Retrieval','ACL',2006),('P06-1076','A Comparison Of Document Sentence And Term Event Spaces','ACL',2006),('P06-1077','Tree-To-String Alignment Template For Statistical Machine Translation','ACL',2006),('P06-1078','Incorporating Speech Recognition Confidence Into Discriminative Named Entity Recognition Of Speech Data','ACL',2006),('P06-1079','Exploiting Syntactic Patterns As Clues In Zero-Anaphora Resolution','ACL',2006),('P06-1080','Self-Organizing N-Gram Model For Automatic Word Spacing','ACL',2006),('P06-1081','Concept Unification Of Terms In Different Languages For IR','ACL',2006),('P06-1082','Word Alignment In English-Hindi Parallel Corpus Using Recency-Vector Approach: Some Studies','ACL',2006),('P06-1083','Extracting Loanwords From Mongolian Corpora And Producing A Japanese-Mongolian Bilingual Dictionary','ACL',2006),('P06-1084','An Unsupervised Morpheme-Based HMM For Hebrew Morphological Disambiguation','ACL',2006),('P06-1085','Contextual Dependencies In Unsupervised Word Segmentation','ACL',2006),('P06-1086','MAGEAD: A Morphological Analyzer And Generator For The Arabic Dialects','ACL',2006),('P06-1087','Noun Phrase Chunking In Hebrew: Influence Of Lexical And Morphological Features','ACL',2006),('P06-1088','Multi-Tagging For Lexicalized-Grammar Parsing','ACL',2006),('P06-1089','Guessing Parts-Of-Speech Of Unknown Words Using Global Information','ACL',2006),('P06-1090','A Clustered Global Phrase Reordering Model For Statistical Machine Translation','ACL',2006),('P06-1091','A Discriminative Global Training Algorithm For Statistical MT','ACL',2006),('P06-1092','Phoneme-To-Text Transcription System With An Infinite Vocabulary','ACL',2006),('P06-1093','Automatic Generation Of Domain Models For Call-Centers From Noisy Transcriptions','ACL',2006),('P06-1094','Proximity In Context: An Empirically Grounded Computational Model Of Proximity For Processing Topological Spatial Expressions','ACL',2006),('P06-1095','Machine Learning Of Temporal Relations','ACL',2006),('P06-1096','An End-To-End Discriminative Approach To Machine Translation','ACL',2006),('P06-1097','Semi-Supervised Training For Statistical Word Alignment','ACL',2006),('P06-1098','Left-To-Right Target Generation For Hierarchical Phrase-Based Translation','ACL',2006),('P06-1099','You Can\\'t Beat Frequency (Unless You Use Linguistic Knowledge) - A Qualitative Evaluation Of Association Measures For Collocation And Term Extraction','ACL',2006),('P06-1100','Ontologizing Semantic Relations','ACL',2006),('P06-1101','Semantic Taxonomy Induction From Heterogenous Evidence','ACL',2006),('P06-1102','Names And Similarities On The Web: Fact Extraction In The Fast Lane','ACL',2006),('P06-1103','Weakly Supervised Named Entity Transliteration And Discovery From Multilingual Comparable Corpora','ACL',2006),('P06-1104','A Composite Kernel To Extract Relations Between Entities With Both Flat And Structured Features','ACL',2006),('P06-1105','Japanese Dependency Parsing Using Co-Occurrence Information And A Combination Of Case Elements','ACL',2006),('P06-1106','Answer Extraction Semantic Clustering And Extractive Summarization For Clinical Question Answering','ACL',2006),('P06-1107','Discovering Asymmetric Entailment Relations Between Verbs Using Selectional Preferences','ACL',2006),('P06-1108','Event Extraction In A Plot Advice Agent','ACL',2006),('P06-1109','An All-Subtrees Approach To Unsupervised Parsing','ACL',2006),('P06-1110','Advances In Discriminative Parsing','ACL',2006),('P06-1111','Prototype-Driven Grammar Induction','ACL',2006),('P06-1112','Exploring Correlation Of Dependency Relation Paths For Answer Extraction','ACL',2006),('P06-1113','Question Answering With Lexical Chains Propagating Verb Arguments','ACL',2006),('P06-1114','Methods For Using Textual Entailment In Open-Domain Question Answering','ACL',2006),('P06-1115','Using String-Kernels For Learning Semantic Parsers','ACL',2006),('P06-1116','A Bootstrapping Approach To Unsupervised Detection Of Cue Phrase Variants','ACL',2006),('P06-1117','Semantic Role Labeling Via FrameNet VerbNet And PropBank','ACL',2006),('P06-1118','Multilingual Legal Terminology On The Jibiki Platform: The LexALP Project','ACL',2006),('P06-1119','Leveraging Reusability: Cost-Effective Lexical Acquisition For Large-Scale Ontology Translation','ACL',2006),('P06-1120','Accurate Collocation Extraction Using A Multilingual Parser','ACL',2006),('P06-1121','Scalable Inference And Training Of Context-Rich Syntactic Translation Models','ACL',2006),('P06-1122','Modelling Lexical Redundancy For Machine Translation','ACL',2006),('P06-1123','Empirical Lower Bounds On The Complexity Of Translational Equivalence','ACL',2006),('P06-1124','A Hierarchical Bayesian Language Model Based On Pitman-Yor Processes','ACL',2006),('P06-1125','A Phonetic-Based Approach To Chinese Chat Text Normalization','ACL',2006),('P06-1126','Discriminative Pruning Of Language Models For Chinese Word Segmentation','ACL',2006),('P06-1127','Novel Association Measures Using Web Search With Double Checking','ACL',2006),('P06-1128','Semantic Retrieval For The Accurate Identification Of Relational Concepts In Massive Textbases','ACL',2006),('P06-1129','Exploring Distributional Similarity Based Models For Query Spelling Correction','ACL',2006),('P06-1130','Robust PCFG-Based Generation Using Automatically Acquired LFG Approximations','ACL',2006),('P06-1131','Incremental Generation Of Spatial Referring Expressions In Situated Dialog','ACL',2006),('P06-1132','Learning To Predict Case Markers In Japanese','ACL',2006),('P06-1133','Are These Documents Written From Different Perspectives? A Test Of Different Perspectives Based On Statistical Distribution Divergence','ACL',2006),('P06-1134','Word Sense And Subjectivity','ACL',2006),('P06-1135','Improving QA Accuracy By Question Inversion','ACL',2006),('P06-1136','Reranking Answers For Definitional QA Using Language Modeling','ACL',2006),('P06-1137','Highly Constrained Unification Grammars','ACL',2006),('P06-1138','A Polynomial Parsing Algorithm For The Topological Model: Synchronizing Constituent And Dependency Grammars Illustrated By German Word Order Phenomena','ACL',2006),('P06-1139','Stochastic Language Generation Using WIDL-Expressions And Its Application In Machine Translation And Summarization','ACL',2006),('P06-1140','Learning To Say It Well: Reranking Realizations By Predicted Synthesis Quality','ACL',2006),('P06-1141','An Effective Two-Stage Model For Exploiting Non-Local Dependencies In Named Entity Recognition','ACL',2006),('P06-1142','Learning Transliteration Lexicons From The Web','ACL',2006),('P06-1143','Punjabi Machine Transliteration','ACL',2006),('P06-1144','Multilingual Document Clustering: An Heuristic Approach Based On Cognate Named Entities','ACL',2006),('P06-1145','Time Period Identification Of Events In Text','ACL',2006),('P06-1146','Optimal Constituent Alignment With Edge Covers For Semantic Projection','ACL',2006),('P06-1147','Utilizing Co-Occurrence Of Answers In Question Answering','ACL',2006),('P06-2001','Using Machine Learning Techniques To Build A Comma Checker For Basque','ACL',2006),('P06-2002','A Rote Extractor With Edit Distance-Based Generalisation And Multi-Corpora Precision Calculation','ACL',2006),('P06-2003','MT Evaluation: Human-Like Vs. Human Acceptable','ACL',2006),('P06-2004','The Effect Of Corpus Size In Combining Supervised And Unsupervised Training For Disambiguation','ACL',2006),('P06-2005','A Phrase-Based Statistical Model For SMS Text Normalization','ACL',2006),('P06-2006','Evaluating The Accuracy Of An Unlexicalized Statistical Parser On The PARC DepBank','ACL',2006),('P06-2007','N Semantic Classes Are Harder Than Two','ACL',2006),('P06-2008','Towards Conversational QA: Automatic Identification Of Problematic Situations And User Intent','ACL',2006),('P06-2009','A Pipeline Framework For Dependency Parsing','ACL',2006),('P06-2010','A Hybrid Convolution Tree Kernel For Semantic Role Labeling','ACL',2006),('P06-2011','A High-Accurate Chinese-English NE Backward Translation System Combining Both Lexical Information And Web Statistics','ACL',2006),('P06-2012','Unsupervised Relation Disambiguation Using Spectral Clustering','ACL',2006),('P06-2013','An Empirical Study Of Chinese Chunking','ACL',2006),('P06-2014','Soft Syntactic Constraints For Word Alignment Through Discriminative Training','ACL',2006),('P06-2015','An Account For Compound Prepositions In Farsi','ACL',2006),('P06-2016','Techniques To Incorporate The Benefits Of A Hierarchy In A Modified Hidden Markov Model','ACL',2006),('P06-2017','Analysis And Synthesis Of The Distribution Of Consonants Over Languages: A Complex Network Approach','ACL',2006),('P06-2018','Using Machine-Learning To Assign Function Labels To Parser Output For Spanish','ACL',2006),('P06-2019','Constraint-Based Sentence Compression: An Integer Programming Approach','ACL',2006),('P06-2020','Topic-Focused Multi-Document Summarization Using An Approximate Oracle Score','ACL',2006),('P06-2021','Using WordNet To Automatically Deduce Relations Between Words In Noun-Noun Compounds','ACL',2006),('P06-2022','Automatically Extracting Nominal Mentions Of Events With A Bootstrapped Probabilistic Classifier','ACL',2006),('P06-2023','A Bio-Inspired Approach For Multi-Word Expression Extraction','ACL',2006),('P06-2024','Towards A Modular Data Model For Multi-Layer Annotated Corpora','ACL',2006),('P06-2025','A Modified Joint Source-Channel Model For Transliteration','ACL',2006),('P06-2026','Chinese-English Term Translation Mining Based On Semantic Prediction','ACL',2006),('P06-2027','Automatic Creation Of Domain Templates','ACL',2006),('P06-2028','Using Lexical Dependency And Ontological Knowledge To Improve A Detailed Syntactic And Semantic Tagger Of English','ACL',2006),('P06-2029','The Benefit Of Stochastic PP Attachment To A Rule-Based Parser','ACL',2006),('P06-2030','Using Bilingual Comparable Corpora And Semi-Supervised Clustering For Topic Tracking','ACL',2006),('P06-2031','Robust Word Sense Translation By EM Learning Of Frame Semantics','ACL',2006),('P06-2032','Coreference Handling In XMG','ACL',2006),('P06-2033','Conceptual Coherence In The Generation Of Referring Expressions','ACL',2006),('P06-2034','Discriminative Reranking For Semantic Parsing','ACL',2006),('P06-2035','Multilingual Lexical Database Generation From Parallel Texts In 20 European Languages With Endogenous Resources','ACL',2006),('P06-2036','Factoring Synchronous Grammars By Sorting','ACL',2006),('P06-2037','Low-Cost Enrichment Of Spanish WordNet With Automatically Translated Glosses: Combining General And Specialized Models','ACL',2006),('P06-2038','Speeding Up Full Syntactic Parsing By Leveraging Partial Parsing Decisions','ACL',2006),('P06-2039','Parsing Aligned Parallel Corpus By Projecting Syntactic Relations From Annotated Source Corpus','ACL',2006),('P06-2040','Reduced N-Gram Models For English And Chinese Corpora','ACL',2006),('P06-2041','Discriminative Classifiers For Deterministic Dependency Parsing','ACL',2006),('P06-2042','Detection Of Quotations And Inserted Clauses And Its Application To Dependency Structure Analysis In Spontaneous Japanese','ACL',2006),('P06-2043','Improving English Subcategorization Acquisition With Diathesis Alternations As Heuristic Information','ACL',2006),('P06-2044','Local Constraints On Sentence Markers And Focus In Somali','ACL',2006),('P06-2045','A Collaborative Framework For Collecting Thai Unknown Words From The Web','ACL',2006),('P06-2046','Japanese Idiom Recognition: Drawing A Line Between Literal And Idiomatic Meanings','ACL',2006),('P06-2047','Graph Branch Algorithm: An Optimum Tree Search Method For Scored Dependency Graph With Arc Co-Occurrence Constraints','ACL',2006),('P06-2048','Exploring The Potential Of Intractable Parsers','ACL',2006),('P06-2049','Transformation-Based Interpretation Of Implicit Parallel Structures: Reconstructing The Meaning Of vice Versa And Similar Linguistic Operators','ACL',2006),('P06-2050','When Conset Meets Synset: A Preliminary Survey Of An Ontological Lexical Resource Based On Chinese Characters','ACL',2006),('P06-2051','Spontaneous Speech Understanding For Robust Multi-Modal Human-Robot Communication','ACL',2006),('P06-2052','Efficient Sentence Retrieval Based On Syntactic Structure','ACL',2006),('P06-2053','Towards The Orwellian Nightmare: Separation Of Business And Personal Emails','ACL',2006),('P06-2054','Exploiting Non-Local Features For Spoken Language Understanding','ACL',2006),('P06-2055','Analysis And Repair Of Name Tagger Errors','ACL',2006),('P06-2056','Unsupervised Segmentation Of Chinese Text By Use Of Branching Entropy','ACL',2006),('P06-2057','A FrameNet-Based Semantic Role Labeler For Swedish','ACL',2006),('P06-2058','Obfuscating Document Stylometry To Preserve Author Anonymity','ACL',2006),('P06-2059','Automatic Construction Of Polarity-Tagged Corpus From HTML Documents','ACL',2006),('P06-2060','Minority Vote: At-Least-N Voting Improves Recall For Extracting Relations','ACL',2006),('P06-2061','Integration Of Speech To Computer-Assisted Translation Using Finite-State Automata','ACL',2006),('P06-2062','GF Parallel Resource Grammars And Russian','ACL',2006),('P06-2063','Automatic Identification Of Pro And Con Reasons In Online Reviews','ACL',2006),('P06-2064','Interpreting Semantic Relations In Noun Compounds Via Verb Semantics','ACL',2006),('P06-2065','Unsupervised Analysis For Decipherment Problems','ACL',2006),('P06-2066','Mildly Non-Projective Dependency Structures','ACL',2006),('P06-2067','Parsing And Subcategorization Data','ACL',2006),('P06-2068','The Role Of Information Retrieval In Answering Complex Questions','ACL',2006),('P06-2069','Examining The Content Load Of Part Of Speech Blocks For Information Retrieval','ACL',2006),('P06-2070','Stochastic Iterative Alignment For Machine Translation Evaluation','ACL',2006),('P06-2071','Discriminating Image Senses By Clustering With Multimodal Features','ACL',2006),('P06-2072','Modeling Adjectives In Computational Relational Lexica','ACL',2006),('P06-2073','Segmented And Unsegmented Dialogue-Act Annotation With Statistical Dialogue Models','ACL',2006),('P06-2074','ARE: Instance Splitting Strategies For Dependency Relation-Based Information Extraction','ACL',2006),('P06-2075','Integrating Pattern-Based And Distributional Similarity Methods For Lexical Entailment Acquisition','ACL',2006),('P06-2076','Machine-Learning-Based Transformation Of Passive Japanese Sentences Into Active By Separating Training Data Into Each Input Particle','ACL',2006),('P06-2077','Reinforcing English Countability Prediction With One Countability Per Discourse Property','ACL',2006),('P06-2078','An Automatic Method For Summary Evaluation Using Multiple Evaluation Results By A Manual Method','ACL',2006),('P06-2079','Examining The Role Of Linguistic Knowledge Sources In The Automatic Identification And Classification Of Reviews','ACL',2006),('P06-2080','Semantic Parsing With Structured SVM Ensemble Classification Models','ACL',2006),('P06-2081','Whose Thumb Is It Anyway? Classifying Author Personality From Weblog Text','ACL',2006),('P06-2082','Analysis Of Selective Strategies To Build A Dependency-Analyzed Corpus','ACL',2006),('P06-2083','A Term Recognition Approach To Acronym Recognition','ACL',2006),('P06-2084','Combining Association Measures For Collocation Extraction','ACL',2006),('P06-2085','Using Machine Learning To Explore Human Multimodal Clarification Strategies','ACL',2006),('P06-2086','URES : An Unsupervised Web Relation Extraction System','ACL',2006),('P06-2087','Argumentative Feedback: A Linguistically-Motivated Term Expansion For Information Retrieval','ACL',2006),('P06-2088','Simultaneous English-Japanese Spoken Language Translation Based On Incremental Dependency Parsing And Transfer','ACL',2006),('P06-2089','A Best-First Probabilistic Shift-Reduce Parser','ACL',2006),('P06-2090','Implementing A Characterization Of Genre For Automatic Genre Identification Of Web Pages','ACL',2006),('P06-2091','Translating HPSG-Style Outputs Of A Robust Parser Into Typed Dynamic Logic','ACL',2006),('P06-2092','ATLAS - A New Text Alignment Architecture','ACL',2006),('P06-2093','Continuous Space Language Models For Statistical Machine Translation','ACL',2006),('P06-2094','On-Demand Information Extraction','ACL',2006),('P06-2095','Using Comparable Corpora To Solve Problems Difficult For Human Translators','ACL',2006),('P06-2096','Adding Syntax To Dynamic Programming For Aligning Comparable Texts For The Generation Of Paraphrases','ACL',2006),('P06-2097','Unsupervised Topic Identification By Integrating Linguistic And Visual Information Based On Hidden Markov Models','ACL',2006),('P06-2098','Exact Decoding For Jointly Labeling And Chunking Sequences','ACL',2006),('P06-2099','Compiling A Lexicon Of Cooking Actions For Animation Generation','ACL',2006),('P06-2100','Morphological Richness Offsets Resource Demand - Experiences In Constructing A POS Tagger For Hindi','ACL',2006),('P06-2101','Minimum Risk Annealing For Training Log-Linear Models','ACL',2006),('P06-2102','Unsupervised Induction Of Modern Standard Arabic Verb Classes Using Syntactic Frames And LSA','ACL',2006),('P06-2103','Discourse Generation Using Utility-Trained Coherence Models','ACL',2006),('P06-2104','A Comparison Of Alternative Parse Tree Paths For Labeling Semantic Roles','ACL',2006),('P06-2105','A Logic-Based Semantic Approach To Recognizing Textual Entailment','ACL',2006),('P06-2106','Infrastructure For Standardization Of Asian Language Resources','ACL',2006),('P06-2107','Statistical Phrase-Based Models For Interactive Computer-Assisted Translation','ACL',2006),('P06-2108','Using Word Support Model To Improve Chinese Input System','ACL',2006),('P06-2109','Trimming CFG Parse Trees For Sentence Compression Using Machine Learning Approaches','ACL',2006),('P06-2110','Word Vectors And Two Kinds Of Similarity','ACL',2006),('P06-2111','Finding Synonyms Using Automatic Word Alignment And Measures Of Distributional Similarity','ACL',2006),('P06-2112','Word Alignment For Languages With Scarce Resources Using Bilingual Corpora Of Other Language Pairs','ACL',2006),('P06-2113','Combining Statistical And Knowledge-Based Spoken Language Understanding In Conditional Models','ACL',2006),('P06-2114','Sinhala Grapheme-To-Phoneme Conversion And Rules For Schwa Epenthesis','ACL',2006),('P06-2115','From Prosodic Trees To Syntactic Trees','ACL',2006),('P06-2116','A Grammatical Approach To Understanding Textual Tables Using Two-Dimensional SCFGs','ACL',2006),('P06-2117','Boosting Statistical Word Alignment Using Labeled And Unlabeled Data','ACL',2006),('P06-2118','Aligning Features With Sense Distinction Dimensions','ACL',2006),('P06-2119','Word Sense Disambiguation Using Lexical Cohesion In The Context','ACL',2006),('P06-2120','Stochastic Discourse Modeling In Spoken Dialogue Systems Using Semantic Dependency Graphs','ACL',2006),('P06-2121','HAL-Based Cascaded Model For Variable-Length Semantic Pattern Induction From Psychiatry Web Resources','ACL',2006),('P06-2122','Inducing Word Alignments With Bilexical Synchronous Trees','ACL',2006),('P06-2123','Subword-Based Tagging For Confidence-Dependent Chinese Word Segmentation','ACL',2006),('P06-2124','BiTAM: Bilingual Topic AdMixture Models For Word Alignment','ACL',2006),('P06-2125','An HMM-Based Approach To Automatic Phrasing For Mandarin Text-To-Speech Synthesis','ACL',2006),('P06-3001','A Flexible Approach To Natural Language Generation For Disabled Children','ACL',2006),('P06-3002','Unsupervised Part-Of-Speech Tagging Employing Efficient Graph Clustering','ACL',2006),('P06-3003','Sub-Sentential Alignment Using Substring Co-Occurrence Counts','ACL',2006),('P06-3004','Annotation Schemes And Their Influence On Parsing Results','ACL',2006),('P06-3005','Modeling Human Sentence Processing Data With A Statistical Parts-Of-Speech Tagger','ACL',2006),('P06-3006','Semantic Discourse Segmentation And Labeling For Route Instructions','ACL',2006),('P06-3007','Investigations On Event-Based Summarization','ACL',2006),('P06-3008','Discursive Usage Of Six Chinese Punctuation Marks','ACL',2006),('P06-3009','Integrated Morphological And Syntactic Disambiguation For Modern Hebrew','ACL',2006),('P06-3010','A Hybrid Relational Approach For WSD - First Results','ACL',2006),('P06-3011','On2L - A Framework For Incremental Ontology Learning In Spoken Dialog Systems','ACL',2006),('P06-3012','Focus To Emphasize Tone Structures For Prosodic Analysis In Spoken Language Generation','ACL',2006),('P06-3013','Extraction Of Tree Adjoining Grammars From A Treebank For Korean','ACL',2006),('P06-3014','Parsing And Subcategorization Data','ACL',2006),('P06-3015','Clavius: Bi-Directional Parsing For Generic Multimodal Interaction','ACL',2006),('P06-4001','FAST - An Automatic Generation System For Grammar Tests','ACL',2006),('P06-4002','Is It Correct? - Towards Web-Based Evaluation Of Automatic Natural Language Phrase Generation','ACL',2006),('P06-4003','LeXFlow: A System For Cross-Fertilization Of Computational Lexicons','ACL',2006),('P06-4004','Valido: A Visual Tool For Validating Sense Annotations','ACL',2006),('P06-4005','An Intelligent Search Engine And GUI-Based Efficient MEDLINE Search Tool Based On Deep Syntactic Parsing','ACL',2006),('P06-4006','MIMA Search: A Structuring Knowledge System Towards Innovation For Engineering Education','ACL',2006),('P06-4007','FERRET: Interactive Question-Answering For Real-World Environments','ACL',2006),('P06-4008','K-QARD: A Practical Korean Question Answering Framework For Restricted Domain','ACL',2006),('P06-4009','An Intermediate Representation For The Interpretation Of Temporal Expressions','ACL',2006),('P06-4010','Chinese Named Entity And Relation Identification System','ACL',2006),('P06-4011','Computational Analysis Of Move Structures In Academic Abstracts','ACL',2006),('P06-4012','LexNet: A Graphical Environment For Graph-Based NLP','ACL',2006),('P06-4013','Archivus: A Multimodal System For Multimedia Meeting Browsing And Retrieval','ACL',2006),('P06-4014','Re-Usable Tools For Precision Machine Translation','ACL',2006),('P06-4015','The SAMMIE System: Multimodal In-Car Dialogue','ACL',2006),('P06-4016','TwicPen: Hand-Held Scanner And Translation Software For Non-Native Readers','ACL',2006),('P06-4017','An Implemented Description Of Japanese: The Lexeed Dictionary And The Hinoki Treebank','ACL',2006),('P06-4018','NLTK: The Natural Language Toolkit','ACL',2006),('P06-4019','Outilex A Linguistic Platform For Text Processing','ACL',2006),('P06-4020','The Second Release Of The RASP System','ACL',2006),('P07-1001','Guiding Statistical Word Alignment Models With Prior Knowledge','ACL',2007),('P07-1002','A Discriminative Syntactic Word Order Model for Machine Translation','ACL',2007),('P07-1003','Tailoring Word Alignments to Syntactic Machine Translation','ACL',2007),('P07-1004','Transductive learning for statistical machine translation','ACL',2007),('P07-1005','Word Sense Disambiguation Improves Statistical Machine Translation','ACL',2007),('P07-1006','Learning Expressive Models for Word Sense Disambiguation','ACL',2007),('P07-1007','Domain Adaptation with Active Learning for Word Sense Disambiguation','ACL',2007),('P07-1008','Making Lexical Ontologies Functional and Context-Sensitive','ACL',2007),('P07-1009','A Bayesian Model for Discovering Typological Implications','ACL',2007),('P07-1010','A discriminative language model with pseudo-negative samples','ACL',2007),('P07-1011','Detecting Erroneous Sentences using Automatically Mined Sequential Patterns','ACL',2007),('P07-1012','Vocabulary Decomposition for Estonian Open Vocabulary Speech Recognition','ACL',2007),('P07-1013','Phonological Constraints and Morphological Preprocessing for Grapheme-to-Phoneme Conversion','ACL',2007),('P07-1014','Redundancy Ratio: An Invariant Property of the Consonant Inventories of the World\\'s Languages','ACL',2007),('P07-1015','Multilingual Transliteration Using Feature based Phonetic Method','ACL',2007),('P07-1016','Semantic Transliteration of Personal Names','ACL',2007),('P07-1017','Generating Complex Morphology for Machine Translation','ACL',2007),('P07-1018','Assisting Translators in Indirect Lexical Transfer','ACL',2007),('P07-1019','Forest Rescoring: Faster Decoding with Integrated Language Models','ACL',2007),('P07-1020','Statistical Machine Translation through Global Lexical Selection and Sentence Reconstruction','ACL',2007),('P07-1021','Mildly Context-Sensitive Dependency Languages','ACL',2007),('P07-1022','Transforming Projective Bilexical Dependency Grammars into efficiently-parsable CFGs with Unfold-Fold','ACL',2007),('P07-1023','Parsing and Generation as Datalog Queries','ACL',2007),('P07-1024','Optimizing Grammars for Minimum Dependency Length','ACL',2007),('P07-1025','Generalizing semantic role annotations across syntactically similar verbs','ACL',2007),('P07-1026','A Grammar-driven Convolution Tree Kernel for Semantic Role Classification','ACL',2007),('P07-1027','Learning Predictive Structures for Semantic Role Labeling of NomBank','ACL',2007),('P07-1028','A Simple Similarity-based Model for Selectional Preferences','ACL',2007),('P07-1029','SVM Model Tampering and Anchored Learning: A Case Study in Hebrew NP Chunking','ACL',2007),('P07-1030','Fully Unsupervised Discovery of Concept-Specific Relationships by Web Mining','ACL',2007),('P07-1031','Adding Noun Phrase Structure to the Penn Treebank','ACL',2007),('P07-1032','Formalism-Independent Parser Evaluation with CCG and DepBank','ACL',2007),('P07-1033','Frustratingly Easy Domain Adaptation','ACL',2007),('P07-1034','Instance Weighting for Domain Adaptation in NLP','ACL',2007),('P07-1035','The Infinite Tree','ACL',2007),('P07-1036','Guiding Semi-Supervision with Constraint-Driven Learning','ACL',2007),('P07-1037','Supertagged Phrase-Based Statistical Machine Translation','ACL',2007),('P07-1038','Regression for Sentence-Level MT Evaluation with Pseudo References','ACL',2007),('P07-1039','Bootstrapping Word Alignment via Word Packing','ACL',2007),('P07-1040','Improved Word-Level System Combination for Machine Translation','ACL',2007),('P07-1041','Generating Constituent Order in German Clauses','ACL',2007),('P07-1042','A Symbolic Approach to Near-Deterministic Surface Realisation using Tree Adjoining Grammar','ACL',2007),('P07-1043','Sentence generation as a planning problem','ACL',2007),('P07-1044','GLEU: Automatic Evaluation of Sentence-Level Fluency','ACL',2007),('P07-1045','Conditional Modality Fusion for Coreference Resolution','ACL',2007),('P07-1046','The Utility of a Graphical Representation of Discourse Structure in Spoken Dialogue Systems','ACL',2007),('P07-1047','Automated Vocabulary Acquisition and Interpretation in Multimodal Conversational Systems','ACL',2007),('P07-1048','A Multimodal Interface for Access to Content in the Home','ACL',2007),('P07-1049','Fast Unsupervised Incremental Parsing','ACL',2007),('P07-1050','K-best Spanning Tree Parsing','ACL',2007),('P07-1051','Is the End of Supervised Parsing in Sight?','ACL',2007),('P07-1052','An Ensemble Method for Selection of High Quality Parses','ACL',2007),('P07-1053','Opinion Mining using Econometrics: A Case Study on Reputation Systems','ACL',2007),('P07-1054','PageRanking WordNet Synsets: An Application to Opinion Mining','ACL',2007),('P07-1055','Structured Models for Fine-to-Coarse Sentiment Analysis','ACL',2007),('P07-1056','Biographies Bollywood Boom-boxes and Blenders: Domain Adaptation for Sentiment Classification','ACL',2007),('P07-1057','Clustering Clauses for High-Level Relation Detection: An Information-theoretic Approach','ACL',2007),('P07-1058','Instance-based Evaluation of Entailment Rule Acquisition','ACL',2007),('P07-1059','Statistical Machine Translation for Query Expansion in Answer Retrieval','ACL',2007),('P07-1060','A Computational Model of Text Reuse in Ancient Literary Texts','ACL',2007),('P07-1061','Finding document topics for improving topic segmentation','ACL',2007),('P07-1062','The utility of parse-derived features for automatic discourse segmentation','ACL',2007),('P07-1063','PERSONAGE: Personality Generation for Dialogue','ACL',2007),('P07-1064','Making Sense of Sound: Unsupervised Topic Segmentation over Acoustic Input','ACL',2007),('P07-1065','Randomised Language Modelling for Statistical Machine Translation','ACL',2007),('P07-1066','Bilingual-LSA Based LM Adaptation for Spoken Language Translation','ACL',2007),('P07-1067','Coreference Resolution Using Semantic Relatedness Information from Automatically Discovered Patterns','ACL',2007),('P07-1068','Semantic Class Induction and Coreference Resolution','ACL',2007),('P07-1069','Generating a Table-of-Contents','ACL',2007),('P07-1070','Towards an Iterative Reinforcement Approach for Simultaneous Document Summarization and Keyword Extraction','ACL',2007),('P07-1071','Fast Semantic Extraction Using a Novel Neural Network Architecture','ACL',2007),('P07-1072','Improving the Interpretation of Noun Phrases with Cross-linguistic Information','ACL',2007),('P07-1073','Learning to Extract Relations from the Web using Minimal Supervision','ACL',2007),('P07-1074','A Seed-driven Bottom-up Machine Learning Framework for Extracting Relations of Various Complexity','ACL',2007),('P07-1075','A Multi-resolution Framework for Information Extraction from Free Text','ACL',2007),('P07-1076','Using Corpus Statistics on Entities to Improve Semi-supervised Relation Extraction from the Web','ACL',2007),('P07-1077','Beyond Projectivity: Multilingual Evaluation of Constraints and Measures on Non-Projective Structures','ACL',2007),('P07-1078','Self-Training for Enhancement and Domain Adaptation of Statistical Parsers Trained on Small Datasets','ACL',2007),('P07-1079','HPSG Parsing with Shallow Dependency Constraints','ACL',2007),('P07-1080','Constituent Parsing with Incremental Sigmoid Belief Networks','ACL',2007),('P07-1081','Corpus Effects on the Evaluation of Automated Transliteration Systems','ACL',2007),('P07-1082','Collapsed Consonant and Vowel Models: New Approaches for English-Persian Transliteration and Back-Transliteration','ACL',2007),('P07-1083','Alignment-Based Discriminative String Similarity','ACL',2007),('P07-1084','Bilingual Terminology Mining - Using Brain not brawn comparable corpora','ACL',2007),('P07-1085','Unsupervised Language Model Adaptation Incorporating Named Entity Information','ACL',2007),('P07-1086','Coordinate Noun Phrase Disambiguation in a Generative Parsing Model','ACL',2007),('P07-1087','A Unified Tagging Approach to Text Normalization','ACL',2007),('P07-1088','Sparse Information Extraction: Unsupervised Language Models to the Rescue','ACL',2007),('P07-1089','Forest-to-String Statistical Translation Rules','ACL',2007),('P07-1090','Ordering Phrases with Function Words','ACL',2007),('P07-1091','A Probabilistic Approach to Syntax-based Reordering for Statistical Machine Translation','ACL',2007),('P07-1092','Machine Translation by Triangulation: Making Effective Use of Multi-Parallel Corpora','ACL',2007),('P07-1093','A Maximum Expected Utility Framework for Binary Sequence Labeling','ACL',2007),('P07-1094','A fully Bayesian approach to unsupervised part-of-speech tagging','ACL',2007),('P07-1095','Computationally Efficient M-Estimation of Log-Linear Structure Models','ACL',2007),('P07-1096','Guided Learning for Bidirectional Sequence Classification','ACL',2007),('P07-1097','Different Structures for Evaluating Answers to Complex Questions: Pyramids Won\\'t Topple and Neither Will Human Assessors','ACL',2007),('P07-1098','Exploiting Syntactic and Shallow Semantic Kernels for Question Answer Classification','ACL',2007),('P07-1099','Language-independent Probabilistic Answer Ranking for Question Answering','ACL',2007),('P07-1100','Learning to Compose Effective Strategies from a Library of Dialogue Components','ACL',2007),('P07-1101','On the role of context and prosody in the interpretation of \\'okay\\'','ACL',2007),('P07-1102','Predicting Success in Dialogue','ACL',2007),('P07-1103','Resolving It This and That in Unrestricted Multi-Party Dialog','ACL',2007),('P07-1104','A Comparative Study of Parameter Estimation Methods for Statistical Natural Language Processing','ACL',2007),('P07-1105','Grammar Approximation by Representative Sublanguage: A New Model for Language Learning','ACL',2007),('P07-1106','Chinese Segmentation with a Word-Based Perceptron Algorithm','ACL',2007),('P07-1107','Unsupervised Coreference Resolution in a Nonparametric Bayesian Model','ACL',2007),('P07-1108','Pivot Language Approach for Phrase-Based Statistical Machine Translation','ACL',2007),('P07-1109','Bootstrapping a Stochastic Transducer for Arabic-English Transliteration Extraction','ACL',2007),('P07-1110','Benefits of the `Massively Parallel Rosetta Stone\\': Cross-Language Information Retrieval with over 30 Languages','ACL',2007),('P07-1111','A Re-examination of Machine Learning Approaches for Sentence-Level MT Evaluation','ACL',2007),('P07-1112','Automatic Acquisition of Ranked Qualia Structures from the Web','ACL',2007),('P07-1113','A Sequencing Model for Situation Entity Classification','ACL',2007),('P07-1114','Words and Echoes: Assessing and Mitigating the Non-Randomness Problem in Word Frequency Distribution Modeling','ACL',2007),('P07-1115','A System for Large-Scale Acquisition of Verbal Nominal and Adjectival Subcategorization Frames from Corpora','ACL',2007),('P07-1116','A Language-Independent Unsupervised Model for Morphological Segmentation','ACL',2007),('P07-1117','Using Mazurkiewicz Trace Languages for Partition-Based Morphology','ACL',2007),('P07-1118','Much ado about nothing: A social network model of Russian paradigmatic gaps','ACL',2007),('P07-1119','Substring-Based Transliteration','ACL',2007),('P07-1120','Pipeline Iteration','ACL',2007),('P07-1121','Learning Synchronous Grammars for Semantic Parsing with Lambda Calculus','ACL',2007),('P07-1122','Generalizing Tree Transformations for Inductive Dependency Parsing','ACL',2007),('P07-1123','Learning Multilingual Subjective Language via Cross-Lingual Projections','ACL',2007),('P07-1124','Sentiment Polarity Identification in Financial News: A Cohesion-based Approach','ACL',2007),('P07-1125','Weakly Supervised Learning for Hedge Classification in Scientific Literature','ACL',2007),('P07-1126','Text Analysis for Automatic Image Annotation','ACL',2007),('P07-1127','User Requirements Analysis for Meeting Information Retrieval Based on Query Elicitation','ACL',2007),('P07-1128','Combining Multiple Knowledge Sources for Dialogue Segmentation in Multimedia Archives','ACL',2007),('P07-1129','Topic Analysis for Psychiatric Document Retrieval','ACL',2007),('P07-1130','What to be? - Electronic Career Guidance Based on Semantic Relatedness','ACL',2007),('P07-1131','Extracting Social Networks and Biographical Facts From Conversational Speech Transcripts','ACL',2007),('P07-2001','MIMUS: A Multimodal and Multilingual Dialogue System for the Home Domain','ACL',2007),('P07-2002','A Translation Aid System with a Stratified Lookup Interface','ACL',2007),('P07-2003','Multimedia Blog Creation System using Dialogue with Intelligent Robot','ACL',2007),('P07-2004','SemTAG: a platform for specifying Tree Adjoining Grammars and performing TAG-based Semantic Construction','ACL',2007),('P07-2005','System Demonstration of On-Demand Information Extraction','ACL',2007),('P07-2006','Multilingual Ontological Analysis of European Directives','ACL',2007),('P07-2007','NICT-ATR Speech-to-Speech Translation System','ACL',2007),('P07-2008','zipfR: Word Frequency Modeling in R','ACL',2007),('P07-2009','Linguistically Motivated Large-Scale NLP with C&C and Boxer','ACL',2007),('P07-2010','Don\\'t worry about metaphor: affect detection for conversational agents','ACL',2007),('P07-2011','An efficient algorithm for building a distributional thesaurus (and other Sketch Engine developments)','ACL',2007),('P07-2012','Semantic enrichment of journal articles using chemical named entity recognition','ACL',2007),('P07-2013','An API for Measuring the Relatedness of Words in Wikipedia','ACL',2007),('P07-2014','Deriving an Ambiguous Word\\'s Part-of-Speech Distribution from Unannotated Text','ACL',2007),('P07-2015','Support Vector Machines for Query-focused Summarization trained and evaluated on Pyramid data','ACL',2007),('P07-2016','A Joint Statistical Model for Simultaneous Word Spacing and Spelling Error Correction for Korean','ACL',2007),('P07-2017','An Approximate Approach for Training Polynomial Kernel SVMs in Linear Time','ACL',2007),('P07-2018','Rethinking Chinese Word Segmentation: Tokenization Character Classification or Wordbreak Identification','ACL',2007),('P07-2019','A Feature Based Approach to Leveraging Context for Classifying Newsgroup Style Discussion Segments','ACL',2007),('P07-2020','Ensemble document clustering using weighted hypergraph generated by NMF','ACL',2007),('P07-2021','Using Error-Correcting Output Codes with Model-Refinement to Boost Centroid Text Classifier','ACL',2007),('P07-2022','Poliqarp: An open source corpus indexer and search engine with syntactic extensions','ACL',2007),('P07-2023','Test Collection Selection and Gold Standard Generation for a Multiply-Annotated Opinion Corpus','ACL',2007),('P07-2024','Generating Usable Formats for Metadata and Annotations in a Large Meeting Corpus','ACL',2007),('P07-2025','Exploration of Term Dependence in Sentence Retrieval','ACL',2007),('P07-2026','Minimum Bayes Risk Decoding for BLEU','ACL',2007),('P07-2027','Disambiguating Between Generic and Referential You in Dialog','ACL',2007),('P07-2028','On the formalization of Invariant Mappings for Metaphor Interpretation','ACL',2007),('P07-2029','Real-Time Correction of Closed-Captions','ACL',2007),('P07-2030','Learning to Rank Definitions to Generate Quizzes for Interactive Information Presentation','ACL',2007),('P07-2031','Predicting Evidence of Understanding by Monitoring User\\'s Task Manipulation in Multimodal Conversations','ACL',2007),('P07-2032','Automatically Assessing the Post Quality in Online Discussions on Software','ACL',2007),('P07-2033','WordNet-based Semantic Relatedness Measures in Automatic Speech Recognition for Meetings','ACL',2007),('P07-2034','Building Emotion Lexicon from Weblog Corpora','ACL',2007),('P07-2035','Construction of Domain Dictionary for Fundamental Vocabulary','ACL',2007),('P07-2036','Extracting Word Sets with Non-Taxonomical Relation','ACL',2007),('P07-2037','A Linguistic Service Ontology for Language Infrastructures','ACL',2007),('P07-2038','Empirical Measurements of Lexical Similarity in Noun Phrase Conjuncts','ACL',2007),('P07-2039','Automatic Discovery of Named Entity Variants: Grammar-driven Approaches to Non-Alphabetical Transliterations','ACL',2007),('P07-2040','Detecting Semantic Relations between Named Entities in Text Using Contextual Features','ACL',2007),('P07-2041','Mapping Concrete Entities from PAROLE-SIMPLE-CLIPS to ItalWordNet: Methodology and Results','ACL',2007),('P07-2042','Extracting Hypernym Pairs from the Web','ACL',2007),('P07-2043','An OWL Ontology for HPSG','ACL',2007),('P07-2044','Classifying Temporal Relations Between Events','ACL',2007),('P07-2045','Moses: Open Source Toolkit for Statistical Machine Translation','ACL',2007),('P07-2046','Boosting Statistical Machine Translation by Lemmatization and Linear Interpolation','ACL',2007),('P07-2047','Extractive Summarization Based on Event Term Clustering','ACL',2007),('P07-2048','Machine Translation between Turkic Languages','ACL',2007),('P07-2049','Measuring Importance and Query Relevance in Topic-focused Multi-document Summarization','ACL',2007),('P07-2050','Expanding Indonesian-Japanese Small Translation Dictionary Using a Pivot Language','ACL',2007),('P07-2051','Shallow Dependency Labeling','ACL',2007),('P07-2052','Minimally Lexicalized Dependency Parsing','ACL',2007),('P07-2053','Poster paper: HunPos -- an open source trigram tagger','ACL',2007),('P07-2054','Extending MARIE: an N-gram-based SMT decoder','ACL',2007),('P07-2055','A Hybrid Approach to Word Segmentation and POS Tagging','ACL',2007),('P07-2056','Automatic Part-of-Speech Tagging for Bengali: An Approach for Morphologically Rich Languages in a Poor Resource Scenario','ACL',2007),('P07-2057','Japanese Dependency Parsing Using Sequential Labeling for Semi-spoken Language','ACL',2007),('P07-3001','Measuring Syntactic Difference in British English','ACL',2007),('P07-3002','Inducing Combinatory Categorial Grammars with Genetic Algorithms','ACL',2007),('P07-3003','An Implementation of Combined Partial Parser and Morphosyntactic Disambiguator','ACL',2007),('P07-3004','A Practical Classification of Multiword Expressions','ACL',2007),('P07-3005','Automatic Prediction of Cognate Orthography Using Support Vector Machines','ACL',2007),('P07-3006','Exploiting Structure for Event Discovery Using the MDI Algorithm','ACL',2007),('P07-3007','Kinds of Features for Chinese Opinionated Information Retrieval','ACL',2007),('P07-3008','Limitations of Current Grammar Induction Algorithms','ACL',2007),('P07-3009','Logistic Online Learning Methods and Their Application to Incremental Dependency Parsing','ACL',2007),('P07-3010','Adaptive String Distance Measures for Bilingual Dialect Lexicon Induction','ACL',2007),('P07-3011','Identifying Linguistic Structure in a Quantitative Analysis of Dialect Pronunciation','ACL',2007),('P07-3012','Towards a Computational Treatment of Superlatives','ACL',2007),('P07-3013','Annotating and Learning Compound Noun Semantics','ACL',2007),('P07-3014','Semantic Classification of Noun Phrases Using Web Counts and Learning Algorithms','ACL',2007),('P07-3015','Computing Lexical Chains with Graph Clustering','ACL',2007),('P07-3016','Clustering Hungarian Verbs on the Basis of Complementation Patterns','ACL',2007),('P08-1001','Mining Wiki Resources for Multilingual Named Entity Recognition','ACL',2008),('P08-1002','Distributional Identification of Non-Referential Pronouns','ACL',2008),('P08-1003','Weakly-Supervised Acquisition of Open-Domain Classes and Class Attributes from Web Documents and Query Logs','ACL',2008),('P08-1004','The Tradeoffs Between Open and Traditional Relation Extraction','ACL',2008),('P08-1005','PDT 2.0 Requirements on a Query Language','ACL',2008),('P08-1006','Task-oriented Evaluation of Syntactic Parsers and Their Representations','ACL',2008),('P08-1007','MAXSIM: A Maximum Similarity Metric for Machine Translation Evaluation','ACL',2008),('P08-1008','Contradictions and Justifications: Extensions to the Textual Entailment Task','ACL',2008),('P08-1009','Cohesive Phrase-Based Decoding for Statistical Machine Translation','ACL',2008),('P08-1010','Phrase Table Training for Precision and Recall: What Makes a Good Phrase and a Good Phrase Pair?','ACL',2008),('P08-1011','Measure Word Generation for English-Chinese SMT Systems','ACL',2008),('P08-1012','Bayesian Learning of Non-Compositional Phrases with Synchronous Parsing','ACL',2008),('P08-1013','Applying a Grammar-Based Language Model to a Simplified Broadcast-News Transcription Task','ACL',2008),('P08-1014','Automatic Editing in a Back-End Speech-to-Text System','ACL',2008),('P08-1015','Grounded Language Modeling for Automatic Speech Recognition of Sports Video','ACL',2008),('P08-1016','Lexicalized Phonotactic Word Segmentation','ACL',2008),('P08-1017','A Re-examination of Query Expansion Using Lexical Resources','ACL',2008),('P08-1018','Selecting Query Term Alternations for Web Search by Exploiting Query Contexts','ACL',2008),('P08-1019','Searching Questions by Identifying Question Topic and Question Focus','ACL',2008),('P08-1020','Trainable Generation of Big-Five Personality Styles through Data-Driven Parameter Estimation','ACL',2008),('P08-1021','Correcting Misuse of Verb Forms','ACL',2008),('P08-1022','Hypertagging: Supertagging for Surface Realization with CCG','ACL',2008),('P08-1023','Forest-Based Translation','ACL',2008),('P08-1024','A Discriminative Latent Variable Model for Statistical Machine Translation','ACL',2008),('P08-1025','Efficient Multi-Pass Decoding for Synchronous Context Free Grammars','ACL',2008),('P08-1026','Regular Tree Grammars as a Formalism for Scope Underspecification','ACL',2008),('P08-1027','Classification of Semantic Relationships between Nominals Using Pattern Clusters','ACL',2008),('P08-1028','Vector-based Models of Semantic Composition','ACL',2008),('P08-1029','Exploiting Feature Hierarchy for Transfer Learning in Named Entity Recognition','ACL',2008),('P08-1030','Refining Event Extraction through Cross-Document Inference','ACL',2008),('P08-1031','Learning Document-Level Semantic Properties from Free-Text Annotations','ACL',2008),('P08-1032','Automatic Image Annotation Using Auxiliary Text Information','ACL',2008),('P08-1033','Hedge Classification in Biomedical Texts with a Weakly Supervised Selection of Keywords','ACL',2008),('P08-1034','When Specialists and Generalists Work Together: Overcoming Domain Dependence in Sentiment Tagging','ACL',2008),('P08-1035','A Generic Sentence Trimmer with CRFs','ACL',2008),('P08-1036','A Joint Model of Text and Aspect Ratings for Sentiment Summarization','ACL',2008),('P08-1037','Improving Parsing and PP Attachment Performance with Sense Information','ACL',2008),('P08-1038','A Logical Basis for the D Combinator and Normal Form in CCG','ACL',2008),('P08-1039','Parsing Noun Phrase Structure with CCG','ACL',2008),('P08-1040','Sentence Simplification for Semantic Role Labeling','ACL',2008),('P08-1041','Summarizing Emails with Conversational Cohesion and Subjectivity','ACL',2008),('P08-1042','Ad Hoc Treebank Structures','ACL',2008),('P08-1043','A Single Generative Model for Joint Morphological Segmentation and Syntactic Parsing','ACL',2008),('P08-1044','Which Words Are Hard to Recognize? Prosodic Lexical and Disfluency Factors that Increase ASR Error Rates','ACL',2008),('P08-1045','Name Translation in Statistical Machine Translation - Learning When to Transliterate','ACL',2008),('P08-1046','Using Adaptor Grammars to Identify Synergies in the Unsupervised Acquisition of Linguistic Structure','ACL',2008),('P08-1047','Inducing Gazetteers for Named Entity Recognition by Large-Scale Clustering of Dependency Relations','ACL',2008),('P08-1048','Evaluating Roget%s Thesauri','ACL',2008),('P08-1049','Unsupervised Translation Induction for Chinese Abbreviations using Monolingual Corpora','ACL',2008),('P08-1050','Which Are the Best Features for Automatic Verb Classification','ACL',2008),('P08-1051','Collecting a Why-Question Corpus for Development and Evaluation of an Automatic QA-System','ACL',2008),('P08-1052','Solving Relational Similarity Problems Using the Web as a Corpus','ACL',2008),('P08-1053','Combining Speech Retrieval Results with Generalized Additive Models','ACL',2008),('P08-1054','A Critical Reassessment of Evaluation Baselines for Speech Summarization','ACL',2008),('P08-1055','Intensional Summaries as Cooperative Responses in Dialogue: Automation and Evaluation','ACL',2008),('P08-1056','Word Clustering and Word Selection Based Feature Reduction for MaxEnt Based Hindi NER','ACL',2008),('P08-1057','Combining EM Training and the MDL Principle for an Automatic Verb Classification Incorporating Selectional Preferences','ACL',2008),('P08-1058','Randomized Language Models via Perfect Hash Functions','ACL',2008),('P08-1059','Applying Morphology Generation Models to Machine Translation','ACL',2008),('P08-1060','Multilingual Harvesting of Cross-Cultural Stereotypes','ACL',2008),('P08-1061','Semi-Supervised Convex Training for Dependency Parsing','ACL',2008),('P08-1062','Chinese-English Backward Transliteration Assisted with Mining Monolingual Web Pages','ACL',2008),('P08-1063','Robustness and Generalization of Role Sets: PropBank vs. VerbNet','ACL',2008),('P08-1064','A Tree Sequence Alignment-based Tree-to-Tree Translation Model','ACL',2008),('P08-1065','Automatic Syllabification with Structured SVMs for Letter-to-Phoneme Conversion','ACL',2008),('P08-1066','A New String-to-Dependency Machine Translation Algorithm with a Target Dependency Language Model','ACL',2008),('P08-1067','Forest Reranking: Discriminative Parsing with Non-Local Features','ACL',2008),('P08-1068','Simple Semi-supervised Dependency Parsing','ACL',2008),('P08-1069','Optimal $k$-arization of Synchronous Tree-Adjoining Grammar','ACL',2008),('P08-1070','Enhancing Performance of Lexicalised Grammars','ACL',2008),('P08-1071','Assessing Dialog System User Simulation Evaluation Measures Using Human Judges','ACL',2008),('P08-1072','Robust Dialog Management with N-Best Hypotheses Using Dialog Examples and Agenda','ACL',2008),('P08-1073','Learning Effective Multimodal Dialogue Strategies from Wizard-of-Oz Data: Bootstrapping and Evaluation','ACL',2008),('P08-1074','Phrase Chunking Using Entropy Guided Transformation Learning','ACL',2008),('P08-1075','Learning Bigrams from Unigrams','ACL',2008),('P08-1076','Semi-Supervised Sequential Labeling and Segmentation Using Giga-Word Scale Unlabeled Data','ACL',2008),('P08-1077','Large Scale Acquisition of Paraphrases for Learning Surface Patterns','ACL',2008),('P08-1078','Contextual Preferences','ACL',2008),('P08-1079','Unsupervised Discovery of Generic Relationships Using Pattern Clusters and its Evaluation by Automatically Generated SAT Analogy Questions','ACL',2008),('P08-1080','Improving Search Results Quality by Customizing Summary Lengths','ACL',2008),('P08-1081','Using Conditional Random Fields to Extract Contexts and Answers of Questions from Online Forums','ACL',2008),('P08-1082','Learning to Rank Answers on Large Online QA Collections','ACL',2008),('P08-1083','Unsupervised Lexicon-Based Resolution of Unknown Words for Full Morphological Analysis','ACL',2008),('P08-1084','Unsupervised Multilingual Learning for Morphological Segmentation','ACL',2008),('P08-1085','EM Can Find Pretty Good HMM POS-Taggers (When Given a Good Start)','ACL',2008),('P08-1086','Distributed Word Clustering for Large Scale Class-Based Language Modeling in Machine Translation','ACL',2008),('P08-1087','Enriching Morphologically Poor Languages for Statistical Machine Translation','ACL',2008),('P08-1088','Learning Bilingual Lexicons from Monolingual Corpora','ACL',2008),('P08-1089','Pivot Approach for Extracting Paraphrase Patterns from Bilingual Corpora','ACL',2008),('P08-1090','Unsupervised Learning of Narrative Event Chains','ACL',2008),('P08-1091','Semantic Role Labeling Systems for Arabic using Kernel Methods','ACL',2008),('P08-1092','An Unsupervised Approach to Biography Production Using Wikipedia','ACL',2008),('P08-1093','Generating Impact-Based Summaries for Scientific Literature','ACL',2008),('P08-1094','Can You Summarize This? Identifying Correlates of Input Difficulty for Multi-Document Summarization','ACL',2008),('P08-1095','You Talking to Me? A Corpus and Algorithm for Conversation Disentanglement','ACL',2008),('P08-1096','An Entity-Mention Model for Coreference Resolution with Inductive Logic Programming','ACL',2008),('P08-1097','Gestural Cohesion for Topic Segmentation','ACL',2008),('P08-1098','Multi-Task Active Learning for Linguistic Annotations','ACL',2008),('P08-1099','Generalized Expectation Criteria for Semi-Supervised Learning of Conditional Random Fields','ACL',2008),('P08-1100','Analyzing the Errors of Unsupervised Learning','SIGDIAL',2008),('P08-1101','Joint Word Segmentation and POS Tagging Using a Single Perceptron','SIGDIAL',2008),('P08-1102','A Cascaded Linear Model for Joint Chinese Word Segmentation and Part-of-Speech Tagging','SIGDIAL',2008),('P08-1103','Joint Processing and Discriminative Training for Letter-to-Phoneme Conversion','SIGDIAL',2008),('P08-1104','A Probabilistic Model for Fine-Grained Expert Search','SIGDIAL',2008),('P08-1105','Credibility Improves Topical Blog Post Retrieval','SIGDIAL',2008),('P08-1106','Linguistically Motivated Features for Enhanced Back-of-the-Book Indexing','SIGDIAL',2008),('P08-1107','Resolving Personal Names in Email Using Context Expansion','SIGDIAL',2008),('P08-1108','Integrating Graph-Based and Transition-Based Dependency Parsers','SIGDIAL',2008),('P08-1109','Efficient Feature-based Conditional Random Field Parsing','SIGDIAL',2008),('P08-1110','A Deductive Approach to Dependency Parsing','SIGDIAL',2008),('P08-1111','Evaluating a Crosslinguistic Grammar Resource: A Case Study of Wambaya','SIGDIAL',2008),('P08-1112','Better Alignment','SIGDIAL',2008),('P08-1113','Mining Parenthetical Translations from the Web by Word Alignment','SIGDIAL',2008),('P08-1114','Soft Syntactic Constraints for Hierarchical Phrased-Based Translation','SIGDIAL',2008),('P08-1115','Generalizing Word Lattice Translation','SIGDIAL',2008),('P08-1116','Combining Multiple Resources to Improve SMT-based Paraphrasing Model','SIGDIAL',2008),('P08-1117','Extraction of Entailed Semantic Relations Through Syntax-Based Comma Resolution','SIGDIAL',2008),('P08-1118','Finding Contradictions in Text','SIGDIAL',2008),('P08-1119','Semantic Class Learning from the Web with Hyponym Pattern Linkage Graphs','SIGDIAL',2008),('P08-2001','Language Dynamics and Capitalization using Maximum Entropy','ACL',2008),('P08-2002','Surprising Parser Actions and Reading Difficulty','ACL',2008),('P08-2003','Improving the Performance of the Random Walk Model for Answering Complex Questions','ACL',2008),('P08-2004','Dimensions of Subjectivity in Natural Language','ACL',2008),('P08-2005','Extractive Summaries for Educational Science Content','ACL',2008),('P08-2006','Dialect Classification for Online Podcasts Fusing Acoustic and Language Based Structural and Semantic Information','ACL',2008),('P08-2007','The Complexity of Phrase Alignment Problems','ACL',2008),('P08-2008','Novel Semantic Features for Verb Sense Disambiguation','ACL',2008),('P08-2009','Icelandic Data Driven Part of Speech Tagging','ACL',2008),('P08-2010','Beyond Log-Linear Models: Boosted Minimum Error Rate Training for N-best Re-ranking','ACL',2008),('P08-2011','Coreference-inspired Coherence Modeling','ACL',2008),('P08-2012','Enforcing Transitivity in Coreference Resolution','ACL',2008),('P08-2013','Simulating the Behaviour of Older versus Younger Users when Interacting with Spoken Dialogue Systems','ACL',2008),('P08-2014','Active Sample Selection for Named Entity Transliteration','ACL',2008),('P08-2015','Four Techniques for Online Handling of Out-of-Vocabulary Words in Arabic-English Statistical Machine Translation','ACL',2008),('P08-2016','Combined One Sense Disambiguation of Abbreviations','ACL',2008),('P08-2017','Assessing the Costs of Sampling Methods in Active Learning for Annotation','ACL',2008),('P08-2018','Blog Categorization Exploiting Domain Dictionary and Dynamically Estimated Domains of Unknown Words','ACL',2008),('P08-2019','Mixture Model POMDPs for Efficient Handling of Uncertainty in Dialogue Management','ACL',2008),('P08-2020','Recent Improvements in the CMU Large Scale Chinese-English SMT System','ACL',2008),('P08-2021','Machine Translation System Combination using ITG-based Alignments','ACL',2008),('P08-2022','Dictionary Definitions based Homograph Identification using a Generative Hierarchical Model','ACL',2008),('P08-2023','A Novel Feature-based Approach to Chinese Entity Relation Extraction','ACL',2008),('P08-2024','Using Structural Information for Identifying Similar Chinese Characters','ACL',2008),('P08-2025','You%ve Got Answers: Towards Personalized Models for Predicting Success in Community Question Answering','ACL',2008),('P08-2026','Self-Training for Biomedical Parsing','ACL',2008),('P08-2027','A Unified Syntactic Model for Parsing Fluent and Disfluent Speech','ACL',2008),('P08-2028','The Good the Bad and the Unknown: Morphosyllabic Sentiment Tagging of Unseen Words','ACL',2008),('P08-2029','Kernels on Linguistic Structures for Answer Extraction','ACL',2008),('P08-2030','Arabic Morphological Tagging Diacritization and Lemmatization Using Lexeme Models and Feature Ranking','ACL',2008),('P08-2031','Using Automatically Transcribed Dialogs to Learn User Models in a Spoken Dialog System','ACL',2008),('P08-2032','Robust Extraction of Named Entity Including Unfamiliar Word','ACL',2008),('P08-2033','In-Browser Summarisation: Generating Elaborative Summaries Biased Towards the Reading Context','ACL',2008),('P08-2034','Lyric-based Song Sentiment Classification with Sentiment Vector Space Model','ACL',2008),('P08-2035','Mining Wikipedia Revision Histories for Improving Sentence Compression','ACL',2008),('P08-2036','Smoothing a Tera-word Language Model','ACL',2008),('P08-2037','Event Matching Using the Transitive Closure of Dependency Relations','ACL',2008),('P08-2038','A Linguistically Annotated Reordering Model for BTG-based Statistical Machine Translation','ACL',2008),('P08-2039','Segmentation for English-to-Arabic Statistical Machine Translation','ACL',2008),('P08-2040','Exploiting N-best Hypotheses for SMT Self-Enhancement','ACL',2008),('P08-2041','Partial Matching Strategy for Phrase-based Statistical Machine Translation','ACL',2008),('P08-2042','Unsupervised Learning of Acoustic Sub-word Units','ACL',2008),('P08-2043','High Frequency Word Entrainment in Spoken Dialogue','ACL',2008),('P08-2044','Distributed Listening: A Parallel Processing Approach to Automatic Speech Recognition','ACL',2008),('P08-2045','Learning Semantic Links from a Corpus of Parallel Temporal and Causal Relations','ACL',2008),('P08-2046','Evolving New Lexical Association Measures Using Genetic Programming','ACL',2008),('P08-2047','Semantic Types of Some Generic Relation Arguments: Detection and Evaluation','ACL',2008),('P08-2048','Mapping between Compositional Semantic Representations and Lexical Semantic Resources: Towards Accurate Deep Semantic Parsing','ACL',2008),('P08-2049','Query-based Sentence Fusion is Better Defined and Leads to More Preferred Results than Generic Sentence Fusion','ACL',2008),('P08-2050','Intrinsic vs. Extrinsic Evaluation Measures for Referring Expression Generation','ACL',2008),('P08-2051','Correlation between ROUGE and Human Evaluation of Extractive Meeting Summaries','ACL',2008),('P08-2052','FastSum: Fast and Accurate Query-based Multi-document Summarization','ACL',2008),('P08-2053','Construct State Modification in the Arabic Treebank','ACL',2008),('P08-2054','Unlexicalised Hidden Variable Models of Split Dependency Grammars','ACL',2008),('P08-2055','Computing Confidence Scores for All Sub Parse Trees','ACL',2008),('P08-2056','Adapting a WSJ-Trained Parser to Grammatically Noisy Text','ACL',2008),('P08-2057','Enriching Spoken Language Translation with Dialog Acts','ACL',2008),('P08-2058','Speakers% Intention Prediction Using Statistics of Multi-level Features in a Schedule Management Domain','ACL',2008),('P08-2059','Active Learning with Confidence','ACL',2008),('P08-2060','splitSVM: Fast Space-Efficient non-Heuristic Polynomial Kernel Computation for NLP Applications','ACL',2008),('P08-2061','Extracting a Representation from Text for Semantic Analysis','ACL',2008),('P08-2062','Efficient Processing of Underspecified Discourse Representations','ACL',2008),('P08-2063','Choosing Sense Distinctions for WSD: Psycholinguistic Evidence','ACL',2008),('P08-2064','Decompounding query keywords from compounding languages','ACL',2008),('P08-2065','Multi-domain Sentiment Classification','ACL',2008),('P08-2066','Evaluating Word Prediction: Framing Keystroke Savings','ACL',2008),('P08-2067','Pairwise Document Similarity in Large Collections with MapReduce','ACL',2008),('P08-2068','Text Segmentation with LDA-Based Fisher Kernel','ACL',2008),('P08-3001','A Supervised Learning Approach to Automatic Synonym Identification Based on Distributional Features','ACL',2008),('P08-3002','An Integraged Architecture for Generating Parenthetical Constructions','ACL',2008),('P08-3003','Inferring Activity Time in News through Event Modeling','ACL',2008),('P08-3004','Combining Source and Target Language Information for Name Tagging of Machine Translation Output','ACL',2008),('P08-3005','A Re-examination on Features in Regression Based Approach to Automatic MT Evaluation','ACL',2008),('P08-3006','The Role of Positive Feedback in Intelligent Tutoring Systems','ACL',2008),('P08-3007','Arabic Language Modeling with Finite State Transducers','ACL',2008),('P08-3008','Impact of Initiative on Collaborative Problem Solving','ACL',2008),('P08-3009','An Unsupervised Vector Approach to Biomedical Term Disambiguation: Integrating UMLS and Medline','ACL',2008),('P08-3010','A Subcategorization Acquisition System for French Verbs','ACL',2008),('P08-3011','Adaptive Language Modeling for Word Prediction','ACL',2008),('P08-3012','A Hierarchical Approach to Encoding Medical Concepts for Clinical Notes','ACL',2008),('P08-4001','Demonstration of a POMDP Voice Dialer','ACL',2008),('P08-4002','Generating Research Websites Using Summarisation Techniques','ACL',2008),('P08-4003','BART: A Modular Toolkit for Coreference Resolution','ACL',2008),('P08-4004','Demonstration of the UAM CorpusTool for Text and Image Annotation','ACL',2008),('P08-4005','Interactive ASR Error Correction for Touchscreen Devices','ACL',2008),('P08-4006','Yawat: Yet Another Word Alignment Tool','ACL',2008),('P08-4007','SIDE: The Summarization Integrated Development Environment','ACL',2008),('P08-4008','ModelTalker Voice Recorderâ€”An Interface System for Recording a Corpus of Speech for Synthesis','ACL',2008),('P08-4009','The QuALiM Question Answering Demo: Supplementing Answers with Paragraphs drawn from Wikipedia','ACL',2008),('P08-5001','Introduction to Computational Advertising','ACL',2008),('P08-5002','Building Practical Spoken Dialog Systems','ACL',2008),('P08-5003','Semi-Supervised Learning for Natural Language Processing','ACL',2008),('P08-5004','Advanced Online Learning for Natural Language Processing','ACL',2008),('P08-5005','Speech Technology: From Research to the Industry of Human-Machine Communication','ACL',2008),('P08-5006','Interactive Visualization for Computational Linguistics','ACL',2008),('P09-1001','Heterogeneous Transfer Learning for Image Clustering via the SocialWeb','ACL',2009),('P09-1002','Investigations on Word Senses and Word Usages','ACL',2009),('P09-1003','A Comparative Study on Generalization of Semantic Roles in FrameNet','ACL',2009),('P09-1004','Unsupervised Argument Identification for Semantic Role Labeling','ACL',2009),('P09-1005','Brutus: A Semantic Role Labeling System Incorporating CCG CFG and Dependency Features','ACL',2009),('P09-1006','Exploiting Heterogeneous Treebanks for Parsing','ACL',2009),('P09-1007','Cross Language Dependency Parsing using a Bilingual Lexicon','ACL',2009),('P09-1008','Topological Field Parsing of German','ACL',2009),('P09-1009','Unsupervised Multilingual Grammar Induction','ACL',2009),('P09-1010','Reinforcement Learning for Mapping Instructions to Actions','ACL',2009),('P09-1011','Learning Semantic Correspondences with Less Supervision','ACL',2009),('P09-1012','Bayesian Unsupervised Word Segmentation with Nested Pitman-Yor Language Modeling','ACL',2009),('P09-1013','Knowing the Unseen: Estimating Vocabulary Size over Unseen Samples','ACL',2009),('P09-1014','A Ranking Approach to Stress Prediction for Letter-to-Phoneme Conversion','ACL',2009),('P09-1015','Reducing the Annotation Effort for Letter-to-Phoneme Conversion','ACL',2009),('P09-1016','Transliteration Alignment','ACL',2009),('P09-1017','Automatic training of lemmatization rules that handle morphological changes in pre- in- and suffixes alike','ACL',2009),('P09-1018','Revisiting Pivot Language Approach for Machine Translation','ACL',2009),('P09-1019','Efficient Minimum Error Rate Training and Minimum Bayes-Risk Decoding for Translation Hypergraphs and Lattices','ACL',2009),('P09-1020','Forest-based Tree Sequence to String Translation Model','ACL',2009),('P09-1021','Active Learning for Multilingual Statistical Machine Translation','ACL',2009),('P09-1022','DEPEVAL(summ): Dependency-based Evaluation for Automatic Summaries','ACL',2009),('P09-1023','Summarizing Definition from Wikipedia','ACL',2009),('P09-1024','Automatically Generating Wikipedia Articles: A Structure-Aware Approach','ACL',2009),('P09-1025','Learning to Tell Tales: A Data-driven Approach to Story Generation','ACL',2009),('P09-1026','Recognizing Stances in Online Debates','ACL',2009),('P09-1027','Co-Training for Cross-Lingual Sentiment Classification','ACL',2009),('P09-1028','A Non-negative Matrix Tri-factorization Approach to Sentiment Classification with Lexical Prior Knowledge','ACL',2009),('P09-1029','Discovering the Discriminative Views: Measuring Term Weights for Sentiment Analysis','ACL',2009),('P09-1030','Compiling a Massive Multilingual Dictionary via Probabilistic Inference','ACL',2009),('P09-1031','A Metric-based Framework for Automatic Taxonomy Induction','ACL',2009),('P09-1032','Learning with Annotation Noise','ACL',2009),('P09-1033','Abstraction and Generalisation in Semantic Role Labels: PropBank VerbNet or both?','ACL',2009),('P09-1034','Robust Machine Translation Evaluation with Entailment Features','ACL',2009),('P09-1035','The Contribution of Linguistic Features to Automatic Machine Translation Evaluation','ACL',2009),('P09-1036','A Syntax-Driven Bracketing Model for Phrase-Based Translation','ACL',2009),('P09-1037','Topological Ordering of Function Words in Hierarchical Phrase-based Translation','ACL',2009),('P09-1038','Phrase-Based Statistical Machine Translation as a Traveling Salesman Problem','ACL',2009),('P09-1039','Concise Integer Linear Programming Formulations for Dependency Parsing','ACL',2009),('P09-1040','Non-Projective Dependency Parsing in Expected Linear Time','ACL',2009),('P09-1041','Semi-supervised Learning of Dependency Parsers using Generalized Expectation Criteria','ACL',2009),('P09-1042','Dependency Grammar Induction via Bitext Projection Constraints','ACL',2009),('P09-1043','Cross-Domain Dependency Parsing Using a Deep Linguistic Grammar','ACL',2009),('P09-1044','A Chinese-English Organization Name Translation System Using Heuristic Web Mining and Asymmetric Alignment','ACL',2009),('P09-1045','Reducing Semantic Drift with Bagging and Distributional Similarity','ACL',2009),('P09-1046','Jointly Identifying Temporal Relations with Markov Logic','ACL',2009),('P09-1047','Profile Based Cross-Document Coreference Using Kernelized Fuzzy Relational Clustering','ACL',2009),('P09-1048','Who What When Where Why? Comparing Multiple Approaches to the Cross-Lingual 5W Task','ACL',2009),('P09-1049','Bilingual Co-Training for Monolingual Hyponymy-Relation Acquisition','ACL',2009),('P09-1050','Automatic Set Instance Extraction using the Web','ACL',2009),('P09-1051','Extracting Lexical Reference Rules from Wikipedia','ACL',2009),('P09-1052','Employing Topic Models for Pattern-based Semantic Class Discovery','ACL',2009),('P09-1053','Paraphrase Identification as Probabilistic Quasi-Synchronous Recognition','ACL',2009),('P09-1054','Stochastic Gradient Descent Training for L1-regularized Log-linear Models with Cumulative Penalty','ACL',2009),('P09-1055','A global model for joint lemmatization and part-of-speech prediction','ACL',2009),('P09-1056','Distributional Representations for Handling Sparsity in Supervised Sequence-Labeling','ACL',2009),('P09-1057','Minimized Models for Unsupervised Part-of-Speech Tagging','ACL',2009),('P09-1058','An Error-Driven Word-Character Hybrid Model for Joint Chinese Word Segmentation and POS Tagging','ACL',2009),('P09-1059','Automatic Adaptation of Annotation Standards: Chinese Word Segmentation and POS Tagging &#x2013;", "Create and Reuse Words in Open-Vocabulary Neural Language Modeling','ACL',2017),('P17-1138','Bandit Structured Prediction for Neural Sequence-to-Sequence Learning','ACL',2017),('P17-1139','Prior Knowledge Integration for Neural Machine Translation using Posterior Regularization','ACL',2017),('P17-1140','Incorporating Word Reordering Knowledge into Attention-based Neural Machine Translation','ACL',2017),('P17-1141','Lexically Constrained Decoding for Sequence Generation Using Grid Beam Search','ACL',2017),('P17-1142','Combating Human Trafficking with Multimodal Deep Models','ACL',2017),('P17-1143','MalwareTextDB: A Database for Annotated Malware Articles','ACL',2017),('P17-1144','A Corpus of Annotated Revisions for Studying Argumentative Writing','ACL',2017),('P17-1145','Watset: Automatic Induction of Synsets from a Graph of Synonyms','ACL',2017),('P17-1146','Neural Modeling of Multi-Predicate Interactions for Japanese Predicate Argument Structure Analysis','ACL',2017),('P17-1147','TriviaQA: A Large Scale Distantly Supervised Challenge Dataset for Reading Comprehension','ACL',2017),('P17-1148','Learning Semantic Correspondences in Technical Documentation','ACL',2017),('P17-1149','Bridge Text and Knowledge by Learning Multi-Prototype Entity Mention Embedding','ACL',2017),('P17-1150','Interactive Learning of Grounded Verb Semantics towards Human-Robot Communication','ACL',2017),('P17-1151','Multimodal Word Distributions','ACL',2017),('P17-1152','Enhanced LSTM for Natural Language Inference','ACL',2017),('P17-1153','Linguistic analysis of differences in portrayal of movie characters','ACL',2017),('P17-1154','Linguistically Regularized LSTM for Sentiment Classification','ACL',2017),('P17-1155','Sarcasm SIGN: Interpreting Sarcasm with Sentiment Based Monolingual Machine Translation','ACL',2017),('P17-1156','Active Sentiment Domain Adaptation','ACL',2017),('P17-1157','Volatility Prediction using Financial Disclosures Sentiments with Word Embedding-based IR Models','ACL',2017),('P17-1158','CANE: Context-Aware Network Embedding for Relation Modeling','ACL',2017),('P17-1159','Universal Dependencies Parsing for Colloquial Singaporean English','ACL',2017),('P17-1160','Generic Axiomatization of Families of Noncrossing Graphs in Dependency Parsing','ACL',2017),('P17-1161','Semi-supervised sequence tagging with bidirectional language models','ACL',2017),('P17-1162','Learning Symmetric Collaborative Dialogue Agents with Dynamic Knowledge Graph Embeddings','ACL',2017),('P17-1163','Neural Belief Tracker: Data-Driven Dialogue State Tracking','ACL',2017),('P17-1164','Exploiting Argument Information to Improve Event Detection via Supervised Attention Mechanisms','ACL',2017),('P17-1165','Topical Coherence in LDA-based Models through Induced Segmentation','ACL',2017),('P17-1166','Jointly Extracting Relations with Class Ties via Effective Deep Ranking','ACL',2017),('P17-1167','Search-based Neural Structured Learning for Sequential Question Answering','ACL',2017),('P17-1168','Gated-Attention Readers for Text Comprehension','ACL',2017),('P17-1169','Determining Gains Acquired from Word Embedding Quantitatively Using Discrete Distribution Clustering','ACL',2017),('P17-1170','Towards a Seamless Integration of Word Senses into Downstream NLP Applications','ACL',2017),('P17-1171','Reading Wikipedia to Answer Open-Domain Questions','ACL',2017),('P17-1172','Learning to Skim Text','ACL',2017),('P17-1173','An Algebra for Feature Extraction','ACL',2017),('P17-1174','Chunk-based Decoder for Neural Machine Translation','ACL',2017),('P17-1175','Doubly-Attentive Decoder for Multi-modal Neural Machine Translation','ACL',2017),('P17-1176','A Teacher-Student Framework for Zero-Resource Neural Machine Translation','ACL',2017),('P17-1177','Improved Neural Machine Translation with a Syntax-Aware Encoder and Decoder','ACL',2017),('P17-1178','Cross-lingual Name Tagging and Linking for 282 Languages','ACL',2017),('P17-1179','Adversarial Training for Unsupervised Bilingual Lexicon Induction','ACL',2017),('P17-1180','Estimating Code-Switching on Twitter with a Novel Generalized Word-Level Language Detection Technique','ACL',2017),('P17-1181','Using Global Constraints and Reranking to Improve Cognates Detection','ACL',2017),('P17-1182','One-Shot Neural Cross-Lingual Transfer for Paradigm Completion','ACL',2017),('P17-1183','Morphological Inflection Generation with Hard Monotonic Attention','ACL',2017),('P17-1184','From Characters to Words to in Between: Do We Capture Morphology?','ACL',2017),('P17-1185','Riemannian Optimization for Skip-Gram Negative Sampling','ACL',2017),('P17-1186','Deep Multitask Learning for Semantic Dependency Parsing','ACL',2017),('P17-1187','Improved Word Representation Learning with Sememes','ACL',2017),('P17-1188','Learning Character-level Compositionality with Visual Features','ACL',2017),('P17-1189','A Progressive Learning Approach to Chinese SRL Using Heterogeneous Data','ACL',2017),('P17-1190','Revisiting Recurrent Networks for Paraphrastic Sentence Embeddings','ACL',2017),('P17-1191','Ontology-Aware Token Embeddings for Prepositional Phrase Attachment','ACL',2017),('P17-1192','Identifying 1950s American Jazz Musicians: Fine-Grained IsA Extraction via Modifier Composition','ACL',2017),('P17-1193','Parsing to 1-Endpoint-Crossing, Pagenumber-2 Graphs','ACL',2017),('P17-1194','Semi-supervised Multitask Learning for Sequence Labeling','ACL',2017),('P17-1195','Semantic Parsing of Pre-university Math Problems','ACL',2017),('P17-2001','Classifying Temporal Relations by Bidirectional LSTM over Dependency Paths','ACL',2017),('P17-2002','AMR-to-text Generation with Synchronous Node Replacement Grammar','ACL',2017),('P17-2003','Lexical Features in Coreference Resolution: To be Used With Caution','ACL',2017),('P17-2004','Alternative Objective Functions for Training MT Evaluation Metrics','ACL',2017),('P17-2005','A Principled Framework for Evaluating Summarizers: Comparing Models of Summary Quality against Human Judgments','ACL',2017),('P17-2006','Vector space models for evaluating semantic fluency in autism','ACL',2017),('P17-2007','Neural Architectures for Multilingual Semantic Parsing','ACL',2017),('P17-2008','Incorporating Uncertainty into Deep Learning for Spoken Language Assessment','ACL',2017),('P17-2009','Incorporating Dialectal Variability for Socially Equitable Language Identification','ACL',2017),('P17-2010','Evaluating Compound Splitters Extrinsically with Textual Entailment','ACL',2017),('P17-2011','An Analysis of Action Recognition Datasets for Language and Vision Tasks','ACL',2017),('P17-2012','Learning to Parse and Translate Improves Neural Machine Translation','ACL',2017),('P17-2013','On the Distribution of Lexical Features at Multiple Levels of Analysis','ACL',2017),('P17-2014','Exploring Neural Text Simplification Models','ACL',2017),('P17-2015','On the Challenges of Translating NLP Research into Commercial Products','ACL',2017),('P17-2016','Sentence Alignment Methods for Improving Text Simplification Systems','ACL',2017),('P17-2017','Understanding Task Design Trade-offs in Crowdsourced Paraphrase Collection','ACL',2017),('P17-2018','Arc-swift: A Novel Transition System for Dependency Parsing','ACL',2017),('P17-2019','A Generative Parser with a Discriminative Recognition Algorithm','ACL',2017),('P17-2020','Hybrid Neural Network Alignment and Lexicon Model in Direct HMM for Statistical Machine Translation','ACL',2017),('P17-2021','Towards String-To-Tree Neural Machine Translation','ACL',2017),('P17-2022','Learning Lexico-Functional Patterns for First-Person Affect','ACL',2017),('P17-2023','Lifelong Learning CRF for Supervised Aspect Extraction','ACL',2017),('P17-2024','Exploiting Domain Knowledge via Grouped Weight Sharing with Application to Text Categorization','ACL',2017),('P17-2025','Improving Neural Parsing by Disentangling Model Combination and Reranking Effects','ACL',2017),('P17-2026','Information-Theory Interpretation of the Skip-Gram Negative-Sampling Objective Function','ACL',2017),('P17-2027','Implicitly-Defined Neural Networks for Sequence Labeling','ACL',2017),('P17-2028','The Role of Prosody and Speech Register in Word Segmentation: A Computational Modelling Perspective','ACL',2017),('P17-2029','A Two-Stage Parsing Method for Text-Level Discourse Analysis','ACL',2017),('P17-2030','Error-repair Dependency Parsing for Ungrammatical Texts','ACL',2017),('P17-2031','Attention Strategies for Multi-Source Sequence-to-Sequence Learning','ACL',2017),('P17-2032','Understanding and Detecting Supporting Arguments of Diverse Types','ACL',2017),('P17-2033','A Neural Model for User Geolocation and Lexical Dialectology','ACL',2017),('P17-2034','A Corpus of Natural Language for Visual Reasoning','ACL',2017),('P17-2035','Neural Architecture for Temporal Relation Extraction: A Bi-LSTM Approach for Detecting Narrative Containers','ACL',2017),('P17-2036','How to Make Context More Useful? An Empirical Study on Context-Aware Neural Conversational Models','ACL',2017),('P17-2037','Cross-lingual and cross-domain discourse segmentation of entire documents','ACL',2017),('P17-2038','Detecting Good Arguments in a Non-Topic-Specific Way: An Oxymoron?','ACL',2017),('P17-2039','Argumentation Quality Assessment: Theory vs. Practice','ACL',2017),('P17-2040','A Recurrent Neural Model with Attention for the Recognition of Chinese Implicit Discourse Relations','ACL',2017),('P17-2041','Discourse Annotation of Non-native Spontaneous Spoken Responses Using the Rhetorical Structure Theory Framework','ACL',2017),('P17-2042','Improving Implicit Discourse Relation Recognition with Discourse-specific Word Embeddings','ACL',2017),('P17-2043','Oracle Summaries of Compressive Summarization','ACL',2017),('P17-2044','Japanese Sentence Compression with a Large Training Dataset','ACL',2017),('P17-2045','A Neural Architecture for Generating Natural Language Descriptions from Source Code Changes','ACL',2017),('P17-2046','English Event Detection With Translated Language Features','ACL',2017),('P17-2047','EviNets: Neural Networks for Combining Evidence Signals for Factoid Question Answering','ACL',2017),('P17-2048','Pocket Knowledge Base Population','ACL',2017),('P17-2049','Answering Complex Questions Using Open Information Extraction','ACL',2017),('P17-2050','Bootstrapping for Numerical Open IE','ACL',2017),('P17-2051','Feature-Rich Networks for Knowledge Base Completion','ACL',2017),('P17-2052','Fine-Grained Entity Typing with High-Multiplicity Assignments','ACL',2017),('P17-2053','Group Sparse CNNs for Question Classification with Answer Sets','ACL',2017),('P17-2054','Multi-Task Learning of Keyphrase Boundary Classification','ACL',2017),('P17-2055','Cardinal Virtues: Extracting Relation Cardinalities from Text','ACL',2017),('P17-2056','Integrating Deep Linguistic Features in Factuality Prediction over Unified Datasets','ACL',2017),('P17-2057','Question Answering on Knowledge Bases and Text using Universal Schema and Memory Networks','ACL',2017),('P17-2058','Differentiable Scheduled Sampling for Credit Assignment','ACL',2017),('P17-2059','A Deep Network with Visual Text Composition Behavior','ACL',2017),('P17-2060','Neural System Combination for Machine Translation','ACL',2017),('P17-2061','An Empirical Comparison of Domain Adaptation Methods for Neural Machine Translation','ACL',2017),('P17-2062','Efficient Extraction of Pseudo-Parallel Sentences from Raw Monolingual Data Using Word Embeddings','ACL',2017),('P17-2063','Feature Hashing for Language and Dialect Identification','ACL',2017),('P17-2064','Detection of Chinese Word Usage Errors for Non-Native Chinese Learners with Bidirectional LSTM','ACL',2017),('P17-2065','Automatic Compositor Attribution in the First Folio of Shakespeare','ACL',2017),('P17-2066','STAIR Captions: Constructing a Large-Scale Japanese Image Caption Dataset','ACL',2017),('P17-2067','Liar, Liar Pants on Fire: A New Benchmark Dataset for Fake News Detection','ACL',2017),('P17-2068','English Multiword Expression-aware Dependency Parsing Including Named Entities','ACL',2017),('P17-2069','Improving Semantic Composition with Offset Inference','ACL',2017),('P17-2070','Learning Topic-Sensitive Word Representations','ACL',2017),('P17-2071','Temporal Word Analogies: Identifying Lexical Replacement with Diachronic Word Embeddings','ACL',2017),('P17-2072','Methodical Evaluation of Arabic Word Embeddings','ACL',2017),('P17-2073','Multilingual Connotation Frames: A Case Study on Social Media for Targeted Sentiment Analysis and Forecast','ACL',2017),('P17-2074','Best-Worst Scaling More Reliable than Rating Scales: A Case Study on Sentiment Intensity Annotation','ACL',2017),('P17-2075','Demographic Inference on Twitter using Recursive Neural Networks','ACL',2017),('P17-2076','Twitter Demographic Classification Using Deep Multi-modal Multi-task Learning','ACL',2017),('P17-2077','A Network Framework for Noisy Label Aggregation in Social Media','ACL',2017),('P17-2078','Parser Adaptation for Social Media by Integrating Normalization','ACL',2017),('P17-2079','AliMe Chat: A Sequence to Sequence and Rerank based Chatbot Engine','ACL',2017),('P17-2080','A Conditional Variational Framework for Dialog Generation','ACL',2017),('P17-2081','Question Answering through Transfer Learning from Large Fine-grained Supervision Data','ACL',2017),('P17-2082','Self-Crowdsourcing Training for Relation Extraction','ACL',2017),('P17-2083','A Generative Attentional Neural Network Model for Dialogue Act Classification','ACL',2017),('P17-2084','Salience Rank: Efficient Keyphrase Extraction with Topic Modeling','ACL',2017),('P17-2085','List-only Entity Linking','ACL',2017),('P17-2086','Improving Native Language Identification by Using Spelling Errors','ACL',2017),('P17-2087','Disfluency Detection using a Noisy Channel Model and a Deep Neural Language Model','ACL',2017),('P17-2088','On the Equivalence of Holographic and Complex Embeddings for Link Prediction','ACL',2017),('P17-2089','Sentence Embedding for Neural Machine Translation Domain Adaptation','ACL',2017),('P17-2090','Data Augmentation for Low-Resource Neural Machine Translation','ACL',2017),('P17-2091','Speeding Up Neural Machine Translation Decoding by Shrinking Run-time Vocabulary','ACL',2017),('P17-2092','Chunk-Based Bi-Scale Decoder for Neural Machine Translation','ACL',2017),('P17-2093','Model Transfer for Tagging Low-resource Languages using a Bilingual Dictionary','ACL',2017),('P17-2094','EuroSense: Automatic Harvesting of Multilingual Sense Annotations from Parallel Text','ACL',2017),('P17-2095','Challenging Language-Dependent Segmentation for Arabic: An Application to Machine Translation and Part-of-Speech Tagging','ACL',2017),('P17-2096','Fast and Accurate Neural Word Segmentation for Chinese','ACL',2017),('P17-2097','Pay Attention to the Ending:Strong Neural Baselines for the ROC Story Cloze Task','ACL',2017),('P17-2098','Neural Semantic Parsing over Multiple Knowledge-bases','ACL',2017),('P17-2099','Representing Sentences as Low-Rank Subspaces','ACL',2017),('P17-2100','Improving Semantic Relevance for Sequence-to-Sequence Learning of Chinese Social Media Text Summarization','ACL',2017),('P17-2101','Determining Whether and When People Participate in the Events They Tweet About','ACL',2017),('P17-2102','Separating Facts from Fiction: Linguistic Models to Classify Suspicious and Trusted News Posts on Twitter','ACL',2017),('P17-2103','Recognizing Counterfactual Thinking in Social Media Texts','ACL',2017),('P17-2104','Temporal Orientation of Tweets for Predicting Income of Users','ACL',2017),('P17-2105','Character-Aware Neural Morphological Disambiguation','ACL',2017),('P17-2106','Character Composition Model with Convolutional Neural Networks for Dependency Parsing on Morphologically Rich Languages','ACL',2017),('P17-2107','How (not) to train a dependency parser: The curious case of jackknifing part-of-speech taggers','ACL',2017),('P17-3001','Computational Characterization of Mental States: A Natural Language Processing Approach','ACL',2017),('P17-3002','Improving Distributed Representations of Tweets - Present and Future','ACL',2017),('P17-3003','Bilingual Word Embeddings with Bucketed CNN for Parallel Sentence Extraction','ACL',2017),('P17-3004','nQuery - A Natural Language Statement to SQL Query Generator','ACL',2017),('P17-3005','V for Vocab: An Intelligent Flashcard Application','ACL',2017),('P17-3006','Are You Asking the Right Questions? Teaching Machines to Ask Clarification Questions','ACL',2017),('P17-3007','Building a Non-Trivial Paraphrase Corpus Using Multiple Machine Translation Systems','ACL',2017),('P17-3008','Segmentation Guided Attention Networks for Visual Question Answering','ACL',2017),('P17-3009','Text-based Speaker Identification on Multiparty Dialogues Using Multi-document Convolutional Neural Networks','ACL',2017),('P17-3010','Variation Autoencoder Based Network Representation Learning for Classification','ACL',2017),('P17-3011','Blind Phoneme Segmentation With Temporal Prediction Errors','ACL',2017),('P17-3012','Automatic Generation of Jokes in Hindi','ACL',2017),('P17-3013','Word Embedding for Response-To-Text Assessment of Evidence','ACL',2017),('P17-3014','Domain Specific Automatic Question Generation from Text','ACL',2017),('P17-3015','SoccEval: An Annotation Schema for Rating Soccer Players','ACL',2017),('P17-3016','Accent Adaptation for the Air Traffic Control Domain','ACL',2017),('P17-3017','Generating Steganographic Text with LSTMs','ACL',2017),('P17-3018','Predicting Depression for Japanese Blog Text','ACL',2017),('P17-3019','Fast Forward Through Opportunistic Incremental Meaning Representation Construction','ACL',2017),('P17-3020','Modeling Situations in Neural Chat Bots','ACL',2017),('P17-3021','An Empirical Study on End-to-End Sentence Modelling','ACL',2017),('P17-3022','Varying Linguistic Purposes of Emoji in (Twitter) Context','ACL',2017),('P17-3023','Negotiation of Antibiotic Treatment in Medical Consultations: A Corpus Based Study','ACL',2017),('P17-4001','Annotating tense, mood and voice for English, French and German','ACL',2017),('P17-4002','Automating Biomedical Evidence Synthesis: RobotReviewer','ACL',2017),('P17-4003','Benben: A Chinese Intelligent Conversational Robot','ACL',2017),('P17-4004','End-to-End Non-Factoid Question Answering with an Interactive Visualization of Neural Attention Weights','ACL',2017),('P17-4005','ESTEEM: A Novel Framework for Qualitatively Evaluating and Visualizing Spatiotemporal Embeddings in Social Media','ACL',2017),('P17-4006','Exploring Diachronic Lexical Semantics with JeSemE','ACL',2017),('P17-4007','Extended Named Entity Recognition API and Its Applications in Language Education','ACL',2017),('P17-4008','Hafez: an Interactive Poetry Generation System','ACL',2017),('P17-4009','Interactive Visual Analysis of Transcribed Multi-Party Discourse','ACL',2017),('P17-4010','Life-iNet: A Structured Network-Based Knowledge Exploration and Analytics System for Life Sciences','ACL',2017),('P17-4011','Olelo: A Question Answering Application for Biomedicine','ACL',2017),('P17-4012','OpenNMT: Open-Source Toolkit for Neural Machine Translation','ACL',2017),('P17-4013','PyDial: A Multi-domain Statistical Dialogue System Toolkit','ACL',2017),('P17-4014','RelTextRank: An Open Source Framework for Building Relational Syntactic-Semantic Text Pair Representations','ACL',2017),('P17-4015','Scattertext: a Browser-Based Tool for Visualizing how Corpora Differ','ACL',2017),('P17-4016','Semedico: A Comprehensive Semantic Search Engine for the Life Sciences','ACL',2017),('P17-4017','SuperAgent: A Customer Service Chatbot for E-commerce Websites','ACL',2017),('P17-4018','Swanson linking revisited: Accelerating literature-based discovery across domains using a conceptual influence graph','ACL',2017),('P17-4019','UCCAApp: Web-application for Syntactic and Semantic Phrase-based Annotation','ACL',2017),('P17-4020','WebChild 2.0 : Fine-Grained Commonsense Knowledge Distillation','ACL',2017),('P17-4021','Zara Returns: Improved Personality Induction and Adaptation by an Empathetic Virtual Agent','ACL',2017),('P17-5001','NLP for Precision Medicine','ACL',2017),('P17-5002','Multimodal Machine Learning: Integrating Language, Vision and Speech','ACL',2017),('P17-5003','Deep Learning for Semantic Composition','ACL',2017),('P17-5004','Deep Learning for Dialogue Systems','ACL',2017),('P17-5005','Beyond Words: Deep Learning for Multiword Expressions and Collocations','ACL',2017),('P17-5006','Tutorial: Making Better Use of the Crowd','ACL',2017),('P79-1001','Syntactic Process','ACL',1979),('P79-1002','Towards A Self-Extending Parser','ACL',1979),('P79-1003','Word Expert Parsing','ACL',1979),('P79-1004','Schank/Riesbeck Vs. Norman/Rumelhart: What\\'s The Difference?','ACL',1979),('P79-1005','Toward A Computational Theory Of Speech Perception','ACL',1979),('P79-1006','Ungrammaticality And Extra-Grammaticality In Natural Language Understanding Systems','ACL',1979),('P79-1007','Genaralized Augmented Transition Network Grammars For Generation From Semantic Networks','ACL',1979),('P79-1008','Knowledge Organization And Application: Brief Comments On Papers In The Session','ACL',1979),('P79-1009','Taxonomy Descriptions And Individuals In Natural Language Understanding','ACL',1979),('P79-1010','Semantics Of Conceptual Graphs','ACL',1979),('P79-1011','On The Automatic Transformation Of Class Membership Criteria','ACL',1979),('P79-1012','A Snapshot Of KDS A Knowledge Delivery System','ACL',1979),('P79-1013','The Use Of Object-Speclflc Knowledte In Natural Language Processing','ACL',1979),('P79-1014','Heading With A Purpose','ACL',1979),('P79-1015','Discourse: Codes And Clues In Contexts','ACL',1979),('P79-1016','Paraphrasing Using Given And New Information In A Question-Answer System','ACL',1979),('P79-1017','Where Questions','ACL',1979),('P79-1018','The Role Of Focussing In Interpretation Of Pronouns','ACL',1979),('P79-1019','The Structure And Process Of Talking About Doing','ACL',1979),('P79-1020','Design For Dialogue Comprehension','ACL',1979),('P79-1021','Plans Inference And Indirect Speech Acts','ACL',1979),('P79-1022','Applications','ACL',1979),('P79-1023','EUFID: A Friendly And Flexible Front-End For Data Management Systems','ACL',1979),('P79-1024','An Application Of Automated Language Understanding Techniques To The Generation Of Data Base Elements','ACL',1979),('P79-1025','Response Generation In Question - Answering Systems','ACL',1979),('P79-1026','Natural Language Input To A Computer-Based Glaucoma Consultation System','ACL',1979),('P79-1027','Prospects For Computer-Assisted Dialect Adaption','ACL',1979),('P79-1028','Powerful Ideas In Computational Linquistics - Implications For Problem Solving And Education','ACL',1979),('P80-1001','On The Spatial Uses Of Prepositions','ACL',1980),('P80-1002','Understanding Scene Descriptions As Event Simulations','ACL',1980),('P80-1003','On The Existence Of Primitive Meaning Units','ACL',1980),('P80-1004','Metaphor - A Key To Extensible Semantic Analysis','ACL',1980),('P80-1005','Metaphor Comprehension - A Special Mode Of Language Processing? (Extended Abstract)','ACL',1980),('P80-1006','Interactive Discourse: Influence Of Problem Context Panel Chair\\'s Introduction','ACL',1980),('P80-1007','Should Computers Write Spoken Language?','ACL',1980),('P80-1008','Signalling The Interpretation Of Indirect Speech Acts','ACL',1980),('P80-1009','Parasession On Topics In Interactive Discourse Influence Of The Problem Context','ACL',1980),('P80-1010','On The Independence Of Discourse Structure And Semantic Domain','ACL',1980),('P80-1011','The Parameters Of Conversational Style','ACL',1980),('P80-1012','Phrase Structure Trees Bear More Fruit Than You Would Have Thought','ACL',1980),('P80-1013','Capturing Linguistic Generalizations With Metarules In An Annotated Phrase-Structure Grammar','ACL',1980),('P80-1014','Computational Analogues Of Constraints On Grammars: A Model Of Syntactic Acquisition MIT Artificial Intelligence','ACL',1980),('P80-1015','A Linear-Time Model Of Language Production: Some Psychological Implications (Extended Abstract)','ACL',1980),('P80-1016','Problem Solving Applied To Language Generation','ACL',1980),('P80-1017','Interactive Discourse: Influence Of The Social Context Panel Chair\\'s Introduction','ACL',1980),('P80-1018','Paralanguage In Computer Mediated Communication','ACL',1980),('P80-1019','Expanding The Horizons Of Natural Language Interfaces','ACL',1980),('P80-1020','The Process Of Communication In Face To Face Vs. Computerized Conferences;", "Create A Gold Standard','SIGDIAL',2004),('W04-2324','Discourse Dependency Structures As Constrained DAGs','SIGDIAL',2004),('W04-2325','Causes And Strategies For Requesting Clarification In Dialogue','SIGDIAL',2004),('W04-2326','Annotating Student Emotional States In Spoken Tutoring Dialogues','SIGDIAL',2004),('W04-2327','The MATE/GNOME Proposals For Anaphoric Annotation Revisited','SIGDIAL',2004),('W04-2328','Multi-Level Dialogue Act Tags','SIGDIAL',2004),('W04-2401','A Linear Programming Formulation For Global Inference In Natural Language Tasks','CoNLL',2004),('W04-2402','Semantic Lexicon Construction: Learning From Unlabeled Data Via Spectral Analysis','CoNLL',2004),('W04-2403','A Semantic Kernel For Predicate Argument Classification','CoNLL',2004),('W04-2404','Combining Lexical And Syntactic Features For Supervised Word Sense Disambiguation','CoNLL',2004),('W04-2405','Co-Training And Self-Training For Word Sense Disambiguation','CoNLL',2004),('W04-2406','Word Sense Discrimination By Clustering Contexts In Vector And Similarity Spaces','CoNLL',2004),('W04-2407','Memory-Based Dependency Parsing','CoNLL',2004),('W04-2408','Modeling Category Structures With A Kernel Function','CoNLL',2004),('W04-2409','A Comparison Of Manual And Automatic Constructions Of Category Hierarchy For Classifying Large Corpora','CoNLL',2004),('W04-2410','Thesauruses For Prepositional Phrase Attachment','CoNLL',2004),('W04-2411','Calculating Semantic Distance Between Word Sense Probability Distributions','CoNLL',2004),('W04-2412','Introduction To The CoNLL-2004 Shared Task: Semantic Role Labeling','CoNLL',2004),('W04-2413','Semantic Role Labelling With Chunk Sequences','CoNLL',2004),('W04-2414','Memory-Based Semantic Role Labeling: Optimizing Features Algorithm And Output','CoNLL',2004),('W04-2415','Hierarchical Recognition Of Propositional Arguments With Perceptrons','CoNLL',2004),('W04-2416','Semantic Role Labeling By Tagging Syntactic Chunks','CoNLL',2004),('W04-2417','A Transformation-Based Approach To Argument Labeling','CoNLL',2004),('W04-2418','A Memory-Based Approach For Semantic Role Labeling','CoNLL',2004),('W04-2419','Semantic Role Labeling Using Maximum Entropy Model','CoNLL',2004),('W04-2420','Two-Phase Semantic Role Labeling Based On Support Vector Machines','CoNLL',2004),('W04-2421','Semantic Role Labeling Via Generalized Inference Over Classifiers','CoNLL',2004),('W04-2422','Learning Transformation Rules For Semantic Role Labeling','CoNLL',2004),('W04-2423','Language Learning: Beyond Thunderdome','CoNLL',2004),('W04-2424','Putting Meaning Into Your Trees','CoNLL',2004),('W04-2501','Strategies For Advanced Question Answering','Workshop On Pragmatics Of Question Answering',2004),('W04-2502','Answering Questions Using Advanced Semantics And Probabilistic Inference','Workshop On Pragmatics Of Question Answering',2004),('W04-2503','Using Answer Set Programming To Answer Complex Queries','Workshop On Pragmatics Of Question Answering',2004),('W04-2504','Discourse Structure For Context Question Answering','Workshop On Pragmatics Of Question Answering',2004),('W04-2505','Intentions Implicatures And Processing Of Complex Questions','Workshop On Pragmatics Of Question Answering',2004),('W04-2506','A Novel Approach To Focus Identification In Question/Answering Systems','Workshop On Pragmatics Of Question Answering',2004),('W04-2507','HITIQA: Scenario Based Question Answering','Workshop On Pragmatics Of Question Answering',2004),('W04-2508','Experiments With Interactive Question Answering In Complex Scenarios','Workshop On Pragmatics Of Question Answering',2004),('W04-2509','Handling Information Access Dialogue Through QA Technologies - A Novel Challenge For Open-Domain Question Answering','Workshop On Pragmatics Of Question Answering',2004),('W04-2510','Ontological Resources And Question Answering','Workshop On Pragmatics Of Question Answering',2004),('W04-2601','OntoSem Methods For Processing Semantic Ellipsis','Computational Lexical Semantics Workshop',2004),('W04-2602','Towards Full Automation Of Lexicon Construction','Computational Lexical Semantics Workshop',2004),('W04-2603','A Powerful And General Approach To Context Exploitation In Natural Language Processing','Computational Lexical Semantics Workshop',2004),('W04-2604','Using Prepositions To Extend A Verb Lexicon','Computational Lexical Semantics Workshop',2004),('W04-2605','Using Selectional Profile Distance To Detect Verb Alternations','Computational Lexical Semantics Workshop',2004),('W04-2606','Extended Lexical-Semantic Classification Of English Verbs','Computational Lexical Semantics Workshop',2004),('W04-2607','Non-Classical Lexical Semantic Relations','Computational Lexical Semantics Workshop',2004),('W04-2608','Decision Trees For Sense Disambiguation Of Prepositions: Case Of \\'Over\\'','Computational Lexical Semantics Workshop',2004),('W04-2609','Models For The Semantic Classification Of Noun Phrases','Computational Lexical Semantics Workshop',2004),('W04-2610','Support Vector Machines Applied To The Classification Of Semantic Relations In Nominalized Noun Phrases','Computational Lexical Semantics Workshop',2004),('W04-2611','Abstraction Summarization For Managing The Biomedical Research Literature','Computational Lexical Semantics Workshop',2004),('W04-2612','Comparing Integrating Lexical Definitional Knowledge From Multiple Sources','Computational Lexical Semantics Workshop',2004),('W04-2613','Generating Linear Orders Of Text-Based Events','Computational Lexical Semantics Workshop',2004),('W04-2614','Fine-Grained Lexical Semantic Representations And Compositionally-Derived Events In Mandarin Chinese','Computational Lexical Semantics Workshop',2004),('W04-2701','Introduction To Frontiers In Corpus Annotation','Workshop On Frontiers In Corpus Annotation',2004),('W04-2702','Syntax To Semantics Transformation: Application To Treebanking','Workshop On Frontiers In Corpus Annotation',2004),('W04-2703','Annotating Discourse Connectives And Their Arguments','Workshop On Frontiers In Corpus Annotation',2004),('W04-2704','Proposition Bank II: Delving Deeper','Workshop On Frontiers In Corpus Annotation',2004),('W04-2705','The NomBank Project: An Interim Report','Workshop On Frontiers In Corpus Annotation',2004),('W04-2706','Deep Syntactic Annotation: Tectogrammatical Representation And Beyond','Workshop On Frontiers In Corpus Annotation',2004),('W04-2707','Multi-Dimensional Annotation Of Linguistic Corpora For Investigating Information Structure','Workshop On Frontiers In Corpus Annotation',2004),('W04-2708','Prague Czech-English Dependency Treebank: Any Hopes For A Common Annotation Scheme?','Workshop On Frontiers In Corpus Annotation',2004),('W04-2709','Interlingual Annotation Of Multilingual Text Corpora','Workshop On Frontiers In Corpus Annotation',2004),('W04-2710','Annotating WordNet','Workshop On Frontiers In Corpus Annotation',2004),('W04-2711','Valency Frames Of Czech Verbs In VALLEX 1.0','Workshop On Frontiers In Corpus Annotation',2004),('W04-2801','Robustness Versus Fidelity In Natural Language Understanding','Workshop On Scalable Natural Language Understanding (ScaNaLU)',2004),('W04-2802','Towards Measuring Scalability In Natural Language Understanding Tasks','Workshop On Scalable Natural Language Understanding (ScaNaLU)',2004),('W04-2803','A Little Goes A Long Way: Quick Authoring Of Semantic Knowledge Sources For Interpretation','Workshop On Scalable Natural Language Understanding (ScaNaLU)',2004),('W04-2804','Ends-Based Dialogue Processing','Workshop On Scalable Natural Language Understanding (ScaNaLU)',2004),('W04-2805','Scalable Construction-Based Parsing And Semantic Analysis','Workshop On Scalable Natural Language Understanding (ScaNaLU)',2004),('W04-2806','Scaling Understanding Up To Mental Spaces','Workshop On Scalable Natural Language Understanding (ScaNaLU)',2004),('W04-2807','Different Sense Granularities For Different Applications','Workshop On Scalable Natural Language Understanding (ScaNaLU)',2004),('W04-2808','Making Relative Sense: From Word-Graphs To Semantic Frames','Workshop On Scalable Natural Language Understanding (ScaNaLU)',2004),('W04-2809','HYPERBUG: A Scalable Natural Language Generation Approach','Workshop On Scalable Natural Language Understanding (ScaNaLU)',2004),('W04-2901','A System For Searching And Browsing Spoken Communications','Workshop On Interdisciplinary Approaches To Speech Indexing And Retrieval',2004),('W04-2902','Analysis And Processing Of Lecture Audio Data: Preliminary Investigations','Workshop On Interdisciplinary Approaches To Speech Indexing And Retrieval',2004),('W04-2903','Audio Hot Spotting And Retrieval Using Multiple Features','Workshop On Interdisciplinary Approaches To Speech Indexing And Retrieval',2004),('W04-2904','Scoring Algorithms For Wordspotting Systems','Workshop On Interdisciplinary Approaches To Speech Indexing And Retrieval',2004),('W04-2905','Using Soundex Codes For Indexing Names In ASR Documents','Workshop On Interdisciplinary Approaches To Speech Indexing And Retrieval',2004),('W04-2906','Assessing Prosodic And Text Features For Segmentation Of Mandarin Broadcast News','Workshop On Interdisciplinary Approaches To Speech Indexing And Retrieval',2004),('W04-2907','General Indexation Of Weighted Automata - Application To Spoken Utterance Retrieval','Workshop On Interdisciplinary Approaches To Speech Indexing And Retrieval',2004),('W04-3001','Invited Talk: Sentence Interpretation Using Stochastic Finite State Transducers','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3002','Hybrid Statistical And Structural Semantic Modeling For Thai Multi-Stage Spoken Language Understanding','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3003','Interactive Machine Learning Techniques For Improving SLU Models','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3004','Virtual Modality: A Framework For Testing And Building Multimodal Applications','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3005','Automatic Call Routing With Multiple Language Models','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3006','Error Detection And Recovery In Spoken Dialogue Systems','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3007','Robustness Issues In A Data-Driven Spoken Language Understanding System','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3008','Invited Talk: Spoken Language Understanding: The Research/Industry Chasm','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3009','Using Higher-Level Linguistic Knowledge For Speech Recognition Error Correction In A Spoken Q/a Dialog','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3010','Speech Recognition Models Of The Interdependence Among Syntax Prosody And Segmental Acoustics','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3011','Assigning Domains To Speech Recognition Hypotheses','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3012','Context Sensing Using Speech And Common Sense','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3013','Context Sensing Using Speech And Common Sense','Workshop On Spoken Language Understanding For Conversational Systems And Higher Level Linguistic Information For Speech Processing',2004),('W04-3101','A Resource For Constructing Customized Test Suites For Molecular Biology Entity Identification Systems','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3102','Gene/Protein/Family Name Recognition In Biomedical Literature','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3103','The Language Of Bioscience: Facts Speculations And Statements In Between','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3104','A Study Of Text Categorization For Model Organism Databases','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3105','Mining MEDLINE: Postulating A Beneficial Role For Curcumin Longa In Retinal Diseases','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3106','Clustering MeSH Representations Of Biomedical Literature','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3107','Text Mining - Next Steps For Drug Discovery','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3108','Text-Mining Needs And Solutions For The Biomolecular Interaction Network Database (BIND)','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3109','Publisher Perspective On Broad Full-Text Literature Access For Text Mining In Academic And Corporate Endeavors','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3110','A Large Scale Terminology Resource For Biomedical Text Processing','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3111','Integrated Annotation For Biomedical Information Extraction','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3112','Using Natural Language Processing LocusLink And The Gene Ontology To Compare OMIM To MEDLINE','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3113','A Design Methodology For A Biomedical Literature Indexing Tool Using The Rhetoric Of Science','Workshop On Linking Biological Literature Ontologies And Databases',2004),('W04-3201','Max-Margin Parsing','EACL',2004),('W04-3202','Active Learning And The Total Cost Of Annotation','EMNLP',2004),('W04-3203','Induction Of Greedy Controllers For Deterministic Treebank Parsers','EMNLP',2004),('W04-3204','Unsupervised WSD Based On Automatically Retrieved Examples: The Importance Of Bias','EMNLP',2004),('W04-3205','VerbOcean: Mining The Web For Fine-Grained Semantic Verb Relations','EMNLP',2004),('W04-3206','Scaling Web-Based Acquisition Of Entailment Relations','EMNLP',2004),('W04-3207','Bilingual Parsing With Factored Estimation: Using English To Parse Korean','EMNLP',2004),('W04-3208','Mining Very-Non-Parallel Corpora: Parallel Sentence And Lexicon Extraction Via Bootstrapping And EM','EMNLP',2004),('W04-3209','Comparing And Combining Generative And Posterior Probability Models: Some Advances In Sentence Boundary Detection In Speech','EMNLP',2004),('W04-3210','Automatic Paragraph Identification: A Study Across Languages And Domains','EMNLP',2004),('W04-3211','Mixing Weak Learners In Semantic Parsing','EMNLP',2004),('W04-3212','Calibrating Features For Semantic Role Labeling','EMNLP',2004),('W04-3213','Unsupervised Semantic Role Labeling','EMNLP',2004),('W04-3214','The Influence Of Argument Structure On Semantic Role Assignment','EMNLP',2004),('W04-3215','Object-Extraction And Question-Parsing Using CCG','EMNLP',2004),('W04-3216','A Phrase-Based HMM Approach To Document/Abstract Alignment','EMNLP',2004),('W04-3217','Automatic Analysis Of Plot For Story Rewriting','EMNLP',2004),('W04-3218','Mining Spoken Dialogue Corpora For System Evaluation And Modeling','EMNLP',2004),('W04-3219','Monolingual Machine Translation For Paraphrase Generation','EMNLP',2004),('W04-3220','Verb Sense And Subcategorization: Using Joint Inference To Improve Performance On Complementary Tasks','EMNLP',2004),('W04-3221','Attribute-Based And Value-Based Clustering: An Evaluation','EMNLP',2004),('W04-3222','The Leaf Path Projection View Of Parse Trees: Exploring String Kernels For HPSG Parse Selection','EMNLP',2004),('W04-3223','Incremental Feature Selection And L1 Regularization For Relaxed Maximum-Entropy Modeling','EMNLP',2004),('W04-3224','A Distributional Analysis Of A Lexicalized Statistical Parsing Model','EMNLP',2004),('W04-3225','Adaptive Language And Translation Models For Interactive Machine Translation','EMNLP',2004),('W04-3226','Improving Word Alignment Models Using Structured Monolingual Corpora','EMNLP',2004),('W04-3227','Phrase Pair Rescoring With Term Weighting For Statistical Machine Translation','EMNLP',2004),('W04-3228','Dependencies Vs. Constituents For Tree-Based Alignment','EMNLP',2004),('W04-3229','A Resource-Light Approach To Russian Morphology: Tagging Russian Using Czech Resources','EMNLP',2004),('W04-3230','Applying Conditional Random Fields To Japanese Morphological Analysis','EMNLP',2004),('W04-3231','A Hybrid Model For Morpho-Syntactic Annotation Of German With A Large Tagset','EMNLP',2004),('W04-3232','Identifying Broken Plurals In Unvowelised Arabic Text','EMNLP',2004),('W04-3233','NP Bracketing By Maximum Entropy Tagging And SVM Reranking','EMNLP',2004),('W04-3234','Trained Named Entity Recognition Using Distributional Clusters','EMNLP',2004),('W04-3235','Error Measures And Bayes Decision Rules Revisited With Applications To POS Tagging','EMNLP',2004),('W04-3236','Chinese Part-Of-Speech Tagging: One-At-A-Time Or All-At-Once? Word-Based Or Character-Based?','EMNLP',2004),('W04-3237','Adaptation Of Maximum Entropy Capitalizer: Little Data Can Help A Lot','EMNLP',2004),('W04-3238','Spelling Correction As An Iterative Process That Exploits The Collective Knowledge Of Web Users','EMNLP',2004),('W04-3239','A Boosting Algorithm For Classification Of Semi-Structured Text','EMNLP',2004),('W04-3240','Learning To Classify Email Into Speech Acts','EMNLP',2004),('W04-3241','The Entropy Rate Principle As A Predictor Of Processing Effort: An Evaluation Against Eye-Tracking Data','EMNLP',2004),('W04-3242','Random Forests In Language Modeling','EMNLP',2004),('W04-3243','On Log-Likelihood-Ratios And The Significance Of Rare Events','EMNLP',2004),('W04-3244','Learning Nonstructural Distance Metric By Minimum Cluster Distortions','EMNLP',2004),('W04-3245','From Machine Translation To Computer Assisted Translation Using Finite-State Models','EMNLP',2004),('W04-3246','Learning Hebrew Roots: Machine Learning With Linguistic Constraints','EMNLP',2004),('W04-3247','LexPageRank: Prestige In Multi-Document Text Summarization','EMNLP',2004),('W04-3248','A New Approach For English-Chinese Named Entity Alignment','EMNLP',2004),('W04-3249','Unsupervised Domain Relevance Estimation For Word Sense Disambiguation','EMNLP',2004),('W04-3250','Statistical Significance Tests For Machine Translation Evaluation','EMNLP',2004),('W04-3251','Instance-Based Question Answering: A Data-Driven Approach','EMNLP',2004),('W04-3252','TextRank: Bringing Order Into Texts','EMNLP',2004),('W04-3253','Sentiment Analysis Using Support Vector Machines With Diverse Information Sources','EMNLP',2004),('W04-3254','Evaluating Information Content By Factoid Analysis: Human Annotation And Stability','EMNLP',2004),('W04-3255','Efficient Decoding For Statistical Machine Translation With A Fully Expanded WFST Model','EMNLP',2004),('W04-3256','Multi-Document Biography Summarization','EMNLP',2004),('W05-0101','Teaching Applied Natural Language Processing: Triumphs And Tribulations','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0102','Teaching Dialogue To Interdisciplinary Teams Through Toolkits','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0103','Language And Computers: Creating An Introduction For A General Undergraduate Audience','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0104','A Core-Tools Statistical NLP Course','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0105','Web-Based Interfaces For Natural Language Processing Tools','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0106','Making Hidden Markov Models More Transparent','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0107','Concrete Assignments For Teaching NLP In An M.S. Program','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0108','Language Technology From A European Perspective','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0109','Natural Language Processing At The School Of Information Studies For Africa','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0110','Teaching Language Technology At The North-West University','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0111','Hands-On NLP For An Interdisciplinary Audience','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2005),('W05-0201','Applications Of Lexical Information For Algorithmically Composing Multiple-Choice Cloze Items','Workshop On Building Educational Applications Using NLP',2005),('W05-0202','Automatic Short Answer Marking','Workshop On Building Educational Applications Using NLP',2005),('W05-0203','A Real-Time Multiple-Choice Question Generation For Language Testing: A Preliminary Study','Workshop On Building Educational Applications Using NLP',2005),('W05-0204','Predicting Learning In Tutoring With The Landscape Model Of Memory','Workshop On Building Educational Applications Using NLP',2005),('W05-0205','Towards Intelligent Search Assistance For Inquiry-Based Learning','Workshop On Building Educational Applications Using NLP',2005),('W05-0206','Automatic Essay Grading With Probabilistic Latent Semantic Analysis','Workshop On Building Educational Applications Using NLP',2005),('W05-0207','Using Syntactic Information To Identify Plagiarism','Workshop On Building Educational Applications Using NLP',2005),('W05-0208','Towards A Prototyping Tool For Behavior Oriented Authoring Of Conversational Agents For Educational Applications','Workshop On Building Educational Applications Using NLP',2005),('W05-0209','Direkt Profil: A System For Evaluating Texts Of Second Language Learners Of French Based On Developmental Sequences','Workshop On Building Educational Applications Using NLP',2005),('W05-0210','Measuring Non-Native Speakers\\' Proficiency Of English By Using A Test With Automatically-Generated Fill-In-The-Blank Questions','Workshop On Building Educational Applications Using NLP',2005),('W05-0211','Evaluating State-Of-The-Art Treebank-Style Parsers For Coh-Metrix And Other Learning Technology Environments','Workshop On Building Educational Applications Using NLP',2005),('W05-0212','A Software Tool For Teaching Reading Based On Text-To-Speech Letter-To-Phoneme Rules','Workshop On Building Educational Applications Using NLP',2005),('W05-0213','Situational Language Training For Hotel Receptionists','Workshop On Building Educational Applications Using NLP',2005),('W05-0301','Introduction To Frontiers In Corpus Annotation II: Pie In The Sky','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0302','Merging PropBank NomBank TimeBank Penn Discourse Treebank And Coreference','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0303','A Unified Representation For Morphological Syntactic Semantic And Referential Annotations','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0304','Parallel Entity And Treebank Annotation','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0305','Attribution And The (Non-)Alignment Of Syntactic And Discourse Arguments Of Connectives','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0306','Investigating The Characteristics Of Causal Relations In Japanese Text','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0307','A Framework For Annotating Information Structure In Discourse','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0308','Annotating Attributions And Private States','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0309','A Parallel Proposition Bank II For Chinese And English','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0310','Semantically Rich Human-Aided Machine Annotation','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0311','The Reliability Of Anaphoric Annotation Reconsidered: Taking Ambiguity Into Account','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0312','Annotating Discourse Connectives In The Chinese Treebank','Workshop On Frontiers In Corpus Annotations II: Pie In The Sky',2005),('W05-0401','A Novel Machine Learning Approach For The Identification Of Named Entity Relations','Workshop On Feature Engineering For Machine Learning In Natural Language Processing',2005),('W05-0402','Feature Engineering And Post-Processing For Temporal Expression Recognition Using Conditional Random Fields','Workshop On Feature Engineering For Machine Learning In Natural Language Processing',2005),('W05-0403','Temporal Feature Modification For Retrospective Categorization','Workshop On Feature Engineering For Machine Learning In Natural Language Processing',2005),('W05-0404','Using Semantic And Syntactic Graphs For Call Classification','Workshop On Feature Engineering For Machine Learning In Natural Language Processing',2005),('W05-0405','Feature-Based Segmentation Of Narrative Documents','Workshop On Feature Engineering For Machine Learning In Natural Language Processing',2005),('W05-0406','Identifying Non-Referential It: A Machine Learning Approach Incorporating Linguistically Motivated Patterns','Workshop On Feature Engineering For Machine Learning In Natural Language Processing',2005),('W05-0407','Engineering Of Syntactic Features For Shallow Semantic Parsing','Workshop On Feature Engineering For Machine Learning In Natural Language Processing',2005),('W05-0408','Automatic Identification Of Sentiment Vocabulary: Exploiting Low Association With Known Sentiment Terms','Workshop On Feature Engineering For Machine Learning In Natural Language Processing',2005),('W05-0409','Studying Feature Generation From Various Data Representations For Answer Extraction','Workshop On Feature Engineering For Machine Learning In Natural Language Processing',2005),('W05-0501','The Input For Syntactic Acquisition: Solutions From Language Change Modeling','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0502','Simulating Language Change In The Presence Of Non-Idealized Syntax','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0503','Using Morphology And Syntax Together In Unsupervised Learning','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0504','Refining The SED Heuristic For Morpheme Discovery: Another Look At Swahili','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0505','A Connectionist Model Of Language-Scene Interaction','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0506','A Second Language Acquisition Model Using Example Generalization And Concept Categories','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0507','Item Based Constructions And The Logical Problem','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0508','Statistics Vs. UG In Language Acquisition: Does A Bigram Analysis Predict Auxiliary Inversion?','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0509','Climbing The Path To Grammar: A Maximum Entropy Model Of Subject/Object Learning','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0510','The Acquisition And Use Of Argument Structure Constructions: A Bayesian Model','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0511','Steps Toward Deep Lexical Acquisition','Workshop On Psychocomputational Models Of Human Language Acquisition',2005),('W05-0601','Effective Use Of WordNet Semantics Via Kernel-Based Learning','CoNLL',2005),('W05-0602','A Statistical Semantic Parser That Integrates Syntax And Semantics','CoNLL',2005),('W05-0603','Search Engine Statistics Beyond The N-Gram: Application To Noun Compound Bracketing','CoNLL',2005),('W05-0604','New Experiments In Distributional Representations Of Synonymy','CoNLL',2005),('W05-0605','Word Independent Context Pair Classification Model For Word Sense Disambiguation','CoNLL',2005),('W05-0606','Computing Word Similarity And Identifying Cognates With Pair Hidden Markov Models','CoNLL',2005),('W05-0607','A Bayesian Mixture Model For Term Re-Occurrence And Burstiness','CoNLL',2005),('W05-0608','Domain Kernels For Text Categorization','CoNLL',2005),('W05-0609','Discriminative Training Of Clustering Functions: Theory And Experiments With Entity Identification','CoNLL',2005),('W05-0610','Using Uneven Margins SVM And Perceptron For Information Extraction','CoNLL',2005),('W05-0611','Improving Sequence Segmentation Learning By Predicting Trigrams','CoNLL',2005),('W05-0612','An Expectation Maximization Approach To Pronoun Resolution','CoNLL',2005),('W05-0613','Probabilistic Head-Driven Parsing For Discourse Structure','CoNLL',2005),('W05-0614','Intentional Context In Situated Natural Language Learning','CoNLL',2005),('W05-0615','Representational Bias In Unsupervised Learning Of Syllable Structure','CoNLL',2005),('W05-0616','An Analogical Learner For Morphological Analysis','CoNLL',2005),('W05-0617','Morphology Induction From Term Clusters','CoNLL',2005),('W05-0618','Beyond The Pipeline: Discrete Optimization In NLP','CoNLL',2005),('W05-0619','Investigating The Effects Of Selective Sampling On The Annotation Task','CoNLL',2005),('W05-0620','Introduction To The CoNLL-2005 Shared Task: Semantic Role Labeling','CoNLL',2005),('W05-0621','Inferring Semantic Roles Using Sub-Categorization Frames And Maximum Entropy Model','CoNLL',2005),('W05-0622','Semantic Role Labelling With Tree Conditional Random Fields','CoNLL',2005),('W05-0623','A Joint Model For Semantic Role Labeling','CoNLL',2005),('W05-0624','Sparse Bayesian Classification Of Predicate Arguments','CoNLL',2005),('W05-0625','Generalized Inference With Multiple Semantic Role Labeling Systems','CoNLL',2005),('W05-0626','Semantic Role Labeling Via Consensus In Pattern-Matching','CoNLL',2005),('W05-0627','Semantic Role Labeling System Using Maximum Entropy Classifier','CoNLL',2005),('W05-0628','Semantic Role Labeling As Sequential Tagging','CoNLL',2005),('W05-0629','Semantic Role Labeling Using Support Vector Machines','CoNLL',2005),('W05-0630','Hierarchical Semantic Role Labeling','CoNLL',2005),('W05-0631','Semantic Role Labeling Using LibSVM','CoNLL',2005),('W05-0632','Maximum Entropy Based Semantic Role Labeling','CoNLL',2005),('W05-0633','Semantic Role Labeling Using Lexical Statistical Information','CoNLL',2005),('W05-0634','Semantic Role Chunking Combining Complementary Syntactic Views','CoNLL',2005),('W05-0635','Semantic Role Labeling Using Complete Syntactic Analysis','CoNLL',2005),('W05-0636','Joint Parsing And Semantic Role Labeling','CoNLL',2005),('W05-0637','Applying Spelling Error Correction Techniques For Improving Semantic Role Labelling','CoNLL',2005),('W05-0638','Exploiting Full Parsing Information To Label Semantic Roles Using An Ensemble Of ME And SVM Via Integer Linear Programming','CoNLL',2005),('W05-0639','The Integration Of Syntactic Parsing And Semantic Role Labeling','CoNLL',2005),('W05-0701','Memory-Based Morphological Analysis Generation And Part-Of-Speech Tagging Of Arabic','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0702','A Finite-State Morphological Grammar Of Hebrew','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0703','Morphological Analysis And Generation For Arabic Dialects','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0704','Examining The Effect Of Improved Context Sensitive Morphology On Arabic Information Retrieval','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0705','Modifying A Natural Language Processing System For European Languages To Treat Arabic In Information Processing And Information Retrieval Applications','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0706','Choosing An Optimal Architecture For Segmentation And POS-Tagging Of Modern Hebrew','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0707','Part Of Speech Tagging For Amharic Using Conditional Random Fields','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0708','POS Tagging Of Dialectal Arabic: A Minimally Supervised Approach','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0709','The Impact Of Morphological Stemming On Arabic Mention Detection And Coreference Resolution','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0710','Classifying Amharic News Text Using Self-Organizing Maps','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0711','Arabic Diacritization Using Weighted Finite-State Transducers','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0712','An Integrated Approach For Arabic-English Named Entity Translation','Workshop On Computational Approaches To Semitic Languages',2005),('W05-0801','Association-Based Bilingual Word Alignment','Workshop On Building And Using Parallel Texts',2005),('W05-0802','Cross Language Text Categorization By Acquiring Multilingual Domain Models From Comparable Corpora','Workshop On Building And Using Parallel Texts',2005),('W05-0803','Parsing Word-Aligned Parallel Corpora In A Grammar Induction Context','Workshop On Building And Using Parallel Texts',2005),('W05-0804','Bilingual Word Spectral Clustering For Statistical Machine Translation','Workshop On Building And Using Parallel Texts',2005),('W05-0805','Revealing Phonological Similarities Between Related Languages From Automatically Generated Parallel Corpora','Workshop On Building And Using Parallel Texts',2005),('W05-0806','Augmenting A Small Parallel Text With Morpho-Syntactic Language','Workshop On Building And Using Parallel Texts',2005),('W05-0807','Induction Of Fine-Grained Part-Of-Speech Taggers Via Classifier Combination And Crosslingual Projection','Workshop On Building And Using Parallel Texts',2005),('W05-0808','A Hybrid Approach To Align Sentences And Words In English-Hindi Parallel Corpora','Workshop On Building And Using Parallel Texts',2005),('W05-0809','Word Alignment For Languages With Scarce Resources','Workshop On Building And Using Parallel Texts',2005),('W05-0810','NUKTI: English-Inuktitut Word Alignment System Description','Workshop On Building And Using Parallel Texts',2005),('W05-0811','Models For Inuktitut-English Word Alignment','Workshop On Building And Using Parallel Texts',2005),('W05-0812','Improved HMM Alignment Models For Languages With Scarce Resources','Workshop On Building And Using Parallel Texts',2005),('W05-0813','Symmetric Probabilistic Alignment','Workshop On Building And Using Parallel Texts',2005),('W05-0814','ISI\\'s Participation In The Romanian-English Alignment Task','Workshop On Building And Using Parallel Texts',2005),('W05-0815','Experiments Using MAR For Aligning Corpora','Workshop On Building And Using Parallel Texts',2005),('W05-0816','Comparison Selection And Use Of Sentence Alignment Algorithms For New Language Pairs','Workshop On Building And Using Parallel Texts',2005),('W05-0817','Combined Word Alignments','Workshop On Building And Using Parallel Texts',2005),('W05-0818','LIHLA: Shared Task System Description','Workshop On Building And Using Parallel Texts',2005),('W05-0819','Aligning Words In English-Hindi Parallel Corpora','Workshop On Building And Using Parallel Texts',2005),('W05-0820','Shared Task: Statistical Machine Translation Between European Languages','Workshop On Building And Using Parallel Texts',2005),('W05-0821','Improved Language Modeling For Statistical Machine Translation','Workshop On Building And Using Parallel Texts',2005),('W05-0822','PORTAGE: A Phrase-Based Machine Translation System','Workshop On Building And Using Parallel Texts',2005),('W05-0823','Statistical Machine Translation Of Euparl Data By Using Bilingual N-Grams','Workshop On Building And Using Parallel Texts',2005),('W05-0824','RALI: SMT Shared Task System Description','Workshop On Building And Using Parallel Texts',2005),('W05-0825','A Generalized Alignment-Free Phrase Extraction','Workshop On Building And Using Parallel Texts',2005),('W05-0826','Combining Linguistic Data Views For Phrase-Based SMT','Workshop On Building And Using Parallel Texts',2005),('W05-0827','Improving Phrase-Based Statistical Translation By Modifying Phrase Extraction And Including Several Features','Workshop On Building And Using Parallel Texts',2005),('W05-0828','First Steps Towards Multi-Engine Machine Translation','Workshop On Building And Using Parallel Texts',2005),('W05-0829','Competitive Grouping In Integrated Phrase Segmentation And Alignment Model','Workshop On Building And Using Parallel Texts',2005),('W05-0830','Deploying Part-Of-Speech Patterns To Enhance Statistical Phrase-Based Machine Translation Resources','Workshop On Building And Using Parallel Texts',2005),('W05-0831','Novel Reordering Approaches In Phrase-Based Statistical Machine Translation','Workshop On Building And Using Parallel Texts',2005),('W05-0832','Gaming Fluency: Evaluating The Bounds And Expectations Of Segment-Based Translation Memory','Workshop On Building And Using Parallel Texts',2005),('W05-0833','Hybrid Example-Based SMT: The Best Of Both Worlds?','Workshop On Building And Using Parallel Texts',2005),('W05-0834','Word Graphs For Statistical Machine Translation','Workshop On Building And Using Parallel Texts',2005),('W05-0835','A Recursive Statistical Translation Model','Workshop On Building And Using Parallel Texts',2005),('W05-0836','Training And Evaluating Error Minimization Decision Rules For Statistical Machine Translation','Workshop On Building And Using Parallel Texts',2005),('W05-0901','A Methodology For Extrinsic Evaluation Of Text Summarization: Does ROUGE Correlate?','Workshop On Intrinsic And Extrinsic Evaluation Measures For Machine Translation And/or Summarization',2005),('W05-0902','On The Subjectivity Of Human Authored Summaries','Workshop On Intrinsic And Extrinsic Evaluation Measures For Machine Translation And/or Summarization',2005),('W05-0903','Preprocessing And Normalization For Automatic Evaluation Of Machine Translation','Workshop On Intrinsic And Extrinsic Evaluation Measures For Machine Translation And/or Summarization',2005),('W05-0904','Syntactic Features For Evaluation Of Machine Translation','Workshop On Intrinsic And Extrinsic Evaluation Measures For Machine Translation And/or Summarization',2005),('W05-0905','Evaluating Automatic Summaries Of Meeting Recordings','Workshop On Intrinsic And Extrinsic Evaluation Measures For Machine Translation And/or Summarization',2005),('W05-0906','Evaluating Summaries And Answers: Two Sides Of The Same Coin?','Workshop On Intrinsic And Extrinsic Evaluation Measures For Machine Translation And/or Summarization',2005),('W05-0907','Evaluating DUC 2004 Tasks With The QARLA Framework','Workshop On Intrinsic And Extrinsic Evaluation Measures For Machine Translation And/or Summarization',2005),('W05-0908','On Some Pitfalls In Automatic Evaluation And Significance Testing For MT','Workshop On Intrinsic And Extrinsic Evaluation Measures For Machine Translation And/or Summarization',2005),('W05-0909','METEOR: An Automatic Metric For MT Evaluation With Improved Correlation With Human Judgments','Workshop On Intrinsic And Extrinsic Evaluation Measures For Machine Translation And/or Summarization',2005),('W05-1001','Data Homogeneity And Semantic Role Tagging In Chinese','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1002','Verb Subcategorization Kernels For Automatic Semantic Labeling','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1003','Identifying Concept Attributes Using A Classifier','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1004','Automatically Learning Qualia Structures From The Web','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1005','Automatically Distinguishing Literal And Figurative Usages Of Highly Polysemous Verbs','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1006','Automatic Extraction Of Idioms Using Graph Analysis And Asymmetric Lexicosyntactic Patterns','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1007','Frame Semantic Enhancement Of Lexical-Semantic Resources','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1008','Bootstrapping Deep Lexical Resources: Resources For Courses','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1009','Morphology Vs. Syntax In Adjective Class Acquisition','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1010','Automatic Acquisition Of Bilingual Rules For Extraction Of Bilingual Word Pairs From Parallel Corpora','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1011','Approximate Searching For Distributional Similarity','SIGLEX Workshop On Deep Lexical Acquisition',2005),('W05-1101','TextTree Construction for Parser and Treebank Development','Proceedings of ACL SIGLEX Workshop on Software',2005),('W05-1102','Evaluating and Integrating Treebank Parsers on a Biomedical Corpus','Proceedings of ACL SIGLEX Workshop on Software',2005),('W05-1103','Interleaved Preparation and Output in the COMIC Fission Module','Proceedings of ACL SIGLEX Workshop on Software',2005),('W05-1104','Designing an Extensible API for Integrating Language Modeling and Realization','Proceedings of ACL SIGLEX Workshop on Software',2005),('W05-1105','The Evolution of Dominance Constraint Solvers','Proceedings of ACL SIGLEX Workshop on Software',2005),('W05-1106','Hunmorph: Open Source Word Analysis','Proceedings of ACL SIGLEX Workshop on Software',2005),('W05-1107','Scaling High-Order Character Language Models to Gigabytes','Proceedings of ACL SIGLEX Workshop on Software',2005),('W05-1108','XFST2FSA: Comparing Two Finite-State Toolboxes','Proceedings of ACL SIGLEX Workshop on Software',2005),('W05-1201','Classification Of Semantic Relations By Humans And Machines','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1202','The Distributional Similarity Of Sub-Parses','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1203','Measuring The Semantic Similarity Of Texts','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1204','Training Data Modification For SMT Considering Groups Of Synonymous Sentences','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1205','Recognizing Paraphrases And Textual Entailment Using Inversion Transduction Grammars','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1206','Local Textual Inference: Can It Be Defined Or Circumscribed?','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1207','Discovering Entailment Relations Using Textual Entailment Patterns','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1208','A Probabilistic Setting And Lexical Coocurrence Model For Textual Entailment','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1209','Generating An Entailment Corpus From News Headlines','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1210','Definition And Analysis Of Intermediate Entailment Levels','Workshop On Empirical Modeling Of Semantic Equivalence And Entailment',2005),('W05-1301','Weakly Supervised Learning Methods For Improving The Quality Of Gene Name Normalization Data','Workshop On Linking Biological Literature Ontologies And Databases: Mining Biological Semantics',2005),('W05-1302','Adaptive String Similarity Metrics For Biomedical Reference Resolution','Workshop On Linking Biological Literature Ontologies And Databases: Mining Biological Semantics',2005),('W05-1303','Unsupervised Gene/Protein Named Entity Normalization Using Automatically Extracted Dictionaries','Workshop On Linking Biological Literature Ontologies And Databases: Mining Biological Semantics',2005),('W05-1304','A Machine Learning Approach To Acronym Generation','Workshop On Linking Biological Literature Ontologies And Databases: Mining Biological Semantics',2005),('W05-1305','MedTag: A Collection Of Biomedical Annotations','Workshop On Linking Biological Literature Ontologies And Databases: Mining Biological Semantics',2005),('W05-1306','Corpus Design For Biomedical Natural Language Processing','Workshop On Linking Biological Literature Ontologies And Databases: Mining Biological Semantics',2005),('W05-1307','Using Biomedical Literature Mining To Consolidate The Set Of Known Human Protein-Protein Interactions','Workshop On Linking Biological Literature Ontologies And Databases: Mining Biological Semantics',2005),('W05-1308','INTEX: A Syntactic Role Driven Protein-Protein Interaction Extractor For Bio-Medical Text','Workshop On Linking Biological Literature Ontologies And Databases: Mining Biological Semantics',2005),('W05-1501','Efficient And Robust LFG Parsing: SxLFG','Workshop On Parsing Technology',2005),('W05-1502','Parsing Linear Context-Free Rewriting Systems','Workshop On Parsing Technology',2005),('W05-1503','Switch Graphs For Parsing Type Logical Grammars','Workshop On Parsing Technology',2005),('W05-1504','Parsing With Soft And Hard Constraints On Dependency Length','Workshop On Parsing Technology',2005),('W05-1505','Corrective Modeling For Non-Projective Dependency Parsing','Workshop On Parsing Technology',2005),('W05-1506','Better K-Best Parsing','Workshop On Parsing Technology',2005),('W05-1507','Machine Translation As Lexicalized Parsing With Hooks','Workshop On Parsing Technology',2005),('W05-1508','Treebank Transfer','Workshop On Parsing Technology',2005),('W05-1509','Lexical And Structural Biases For Function Parsing','Workshop On Parsing Technology',2005),('W05-1510','Probabilistic Models For Disambiguation Of An HPSG-Based Chart Generator','Workshop On Parsing Technology',2005),('W05-1511','Efficacy Of Beam Thresholding Unification Filtering And Hybrid Parsing In Probabilistic HPSG Parsing','Workshop On Parsing Technology',2005),('W05-1512','Head-Driven PCFGs With Latent-Head Statistics','Workshop On Parsing Technology',2005),('W05-1513','A Classifier-Based Parser With Linear Run-Time Complexity','Workshop On Parsing Technology',2005),('W05-1514','Chunk Parsing Revisited','Workshop On Parsing Technology',2005),('W05-1515','Constituent Parsing By Classification','Workshop On Parsing Technology',2005),('W05-1516','Strictly Lexical Dependency Parsing','Workshop On Parsing Technology',2005),('W05-1517','Efficient Extraction Of Grammatical Relations','Workshop On Parsing Technology',2005),('W05-1518','Improving Parsing Accuracy By Combining Diverse Dependency Parsers','Workshop On Parsing Technology',2005),('W05-1519','Exploring Features For Identifying Edited Regions In Disfluent Sentences','Workshop On Parsing Technology',2005),('W05-1520','Statistical Shallow Semantic Parsing Despite Little Training Data','Workshop On Parsing Technology',2005),('W05-1521','The Quick Check Pre-Unification Filter For Typed Grammars: Extensions','Workshop On Parsing Technology',2005),('W05-1522','From Metagrammars To Factorized TAG/TIG Parsers','Workshop On Parsing Technology',2005),('W05-1523','Parsing Generalized ID/LP Grammars','Workshop On Parsing Technology',2005),('W05-1524','TFLEX: Speeding Up Deep Parsing With Strategic Pruning','Workshop On Parsing Technology',2005),('W05-1525','Generic Parsing For Multi-Domain Semantic Interpretation','Workshop On Parsing Technology',2005),('W05-1526','Online Statistics For A Unification-Based Dialogue Parser','Workshop On Parsing Technology',2005),('W05-1527','SUPPLE: A Practical Parser For Natural Language Engineering Applications','Workshop On Parsing Technology',2005),('W05-1528','k-NN For Local Probability Estimation In Generative Parsing Models','Workshop On Parsing Technology',2005),('W05-1529','Robust Extraction Of Subcategorization Data From Spoken Language','Workshop On Parsing Technology',2005),('W05-1601','Statistical Generation: Three Methods Compared And Evaluated','ENLG',2005),('W05-1602','Interactive Authoring Of Logical Forms For Multilingual Generation','ENLG',2005),('W05-1603','Ten Years After: An Update On TG/2 (And Friends)','ENLG',2005),('W05-1604','Real-Time Stochastic Language Generation For Dialogue Systems','ENLG',2005),('W05-1605','Generating And Selecting Grammatical Paraphrases','ENLG',2005),('W05-1606','Generating Referential Descriptions Under Conditions Of Uncertainty','ENLG',2005),('W05-1607','A Context-Dependent Algorithm For Generating Locative Expressions In Physically Situated Environments','ENLG',2005),('W05-1608','Incremental Generation Of Multimodal Deixis Referring To Objects','ENLG',2005),('W05-1609','Context-Sensitive Utterance Planning For CCG','ENLG',2005),('W05-1610','Narratological Knowledge For Natural Language Generation','ENLG',2005),('W05-1611','Discrete Optimization As An Alternative To Sequential Processing In NLG','ENLG',2005),('W05-1612','Explorations In Sentence Fusion','ENLG',2005),('W05-1613','Natural Language Directed Inference In The Presentation Of Ontologies','ENLG',2005),('W05-1614','Computational Mechanisms For Pun Generation','ENLG',2005),('W05-1615','Evaluation Of An NLG System Using Post-Edit Data: Lessons Learnt','ENLG',2005),('W05-1616','Generating Readable Texts For Readers With Low Basic Skills','ENLG',2005),('W05-1617','Exploiting OWL Ontologies In The Multilingual Generation Of Object Descriptions','ENLG',2005),('W05-1618','Towards Generating Procedural Texts: An Exploration Of Their Rhetorical And Argumentative Structure','ENLG',2005),('W05-1619','The Types And Distributions Of Errors In A Wide Coverage Surface Realizer Evaluation','ENLG',2005),('W05-1620','An Evolutionary Approach To Referring Expression Generation And Aggregation','ENLG',2005),('W05-1621','Using A Corpus Of Sentence Orderings Defined By Many Experts To Evaluate Metrics Of Coherence For Text Structuring','ENLG',2005),('W05-1622','When Must Should Be Chosen','ENLG',2005),('W05-1623','Reversibility And Re-Usability Of Resources In NLG And Natural Language Dialog Systems','ENLG',2005),('W05-1624','An Experiment Setup For Collecting Data For Adaptive Output Planning In A Multimodal Dialogue System','ENLG',2005),('W05-1625','Answer Generation With Temporal Data Integration','ENLG',2005),('W05-1626','Chart Generation Using Production Systems','ENLG',2005),('W05-1627','Spatial Descriptions As Referring Expressions In The MapTask Domain','ENLG',2005),('W05-1628','Searching For Grammaticality: Propagating Dependencies In The Viterbi Algorithm','ENLG',2005),('W06-0101','Improving Context Vector Models By Feature Clustering For Automatic Thesaurus Construction','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0102','Regional Variation Of Domain-Specific Lexical Items: Toward A Pan-Chinese Lexical Resource','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0103','Mining Atomic Chinese Abbreviation Pairs: A Probabilistic Model For Single Character Word Recovery','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0104','Features Bagging And System Combination For The Chinese POS Tagging Task','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0105','Semantic Analysis Of Chinese Garden-Path Sentences','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0106','A Clustering Approach For Unsupervised Chinese Coreference Resolution','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0107','Latent Features In Automatic Tense Translation Between Chinese And English','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0108','Cluster-Based Language Model For Sentence Retrieval In Chinese Question Answering','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0109','The Role Of Lexical Resources In CJK Natural Language Processing','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0110','Hybrid Models For Chinese Named Entity Recognition','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0111','Realization Of The Chinese BA-Construction In An English-Chinese Machine Translation System','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0112','A Hybrid Approach To Chinese Base Noun Phrase Chunking','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0113','A SVM-Based Model For Chinese Functional Chunk Parsing','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0114','Broadcast Audio And Video Bimodal Corpus Exploitation And Application','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0115','The Third International Chinese Language Processing Bakeoff: Word Segmentation And Named Entity Recognition','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0116','Chinese Named Entity Recognition With Conditional Random Fields','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0117','France Telecom R&D Beijing Word Segmenter For Sighan Bakeoff 2006','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0118','Voting Between Dictionary-Based And Subword Tagging Models For Chinese Word Segmentation','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0119','BMM-Based Chinese Word Segmentor With Word Support Model For The SIGHAN Bakeoff 2006','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0120','On Closed Task Of Chinese Word Segmentation: An Improved CRF Model Coupled With Character Clustering And Automatically Generated Template Matching','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0121','Chinese Word Segmentation With Maximum Entropy And N-Gram Language Model','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0122','On Using Ensemble Methods For Chinese Named Entity Recognition','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0123','Chinese Word Segmentation And Named Entity Recognition By Character Tagging','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0124','Boosting For Chinese Named Entity Recognition','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0125','Chinese Word Segmentation And Named Entity Recognition Based On A Context-Dependent Mutual Information Independence Model','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0126','Word Segmentation And Named Entity Recognition For SIGHAN Bakeoff3','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0127','An Improved Chinese Word Segmentation System With Conditional Random Field','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0128','Chinese Word Segmentation Using Various Dictionaries','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0129','Character Language Models For Chinese Word Segmentation And Named Entity Recognition','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0130','Chinese Named Entity Recognition With Conditional Probabilistic Models','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0131','POC-NLW Template For Chinese Word Segmentation','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0132','Chinese Word Segmentation And Named Entity Recognition Based On Conditional Random Fields Models','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0133','Maximum Entropy Word Segmentation Of Chinese Text','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0134','A Pragmatic Chinese Word Segmentation System','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0135','NetEase Automatic Chinese Word Segmentation','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0136','N-Gram Based Two-Step Algorithm For Word Segmentation','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0137','Chinese Word Segmentation Based On An Approach Of Maximum Entropy Modeling','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0138','Using Part-Of-Speech Reranking To Improve Chinese Word Segmentation','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0139','Description Of The NCU Chinese Word Segmentation And Named Entity Recognition System For SIGHAN Bakeoff 2006','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0140','Chinese Named Entity Recognition With A Multi-Phase Model','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0141','Designing Special Post-Processing Rules For SVM-Based Chinese Word Segmentation','SIGHAN Workshop On Chinese Language Processing',2006),('W06-0201','Development Of An Automatic Trend Exploration System Using The MuST Data Collection','Workshop On Information Extraction Beyond The Document',2006),('W06-0202','Comparing Information Extraction Pattern Models','Workshop On Information Extraction Beyond The Document',2006),('W06-0203','Automatic Extraction Of Definitions From German Court Decisions','Workshop On Information Extraction Beyond The Document',2006),('W06-0204','Improving Semi-Supervised Acquisition Of Relation Extraction Patterns','Workshop On Information Extraction Beyond The Document',2006),('W06-0205','Automatic Knowledge Representation Using A Graph-Based Algorithm For Language-Independent Lexical Chaining','Workshop On Information Extraction Beyond The Document',2006),('W06-0206','Data Selection In Semi-Supervised Learning For Name Tagging','Workshop On Information Extraction Beyond The Document',2006),('W06-0207','LoLo: A System Based On Terminology For Multilingual Extraction','Workshop On Information Extraction Beyond The Document',2006),('W06-0208','Learning Domain-Specific Information Extraction Patterns From The Web','Workshop On Information Extraction Beyond The Document',2006),('W06-0301','Extracting Opinions Opinion Holders And Topics Expressed In Online News Media Text','Workshop On Sentiment And Subjectivity In Text',2006),('W06-0302','Toward Opinion Summarization: Linking The Sources','Workshop On Sentiment And Subjectivity In Text',2006),('W06-0303','A System For Summarizing And Visualizing Arguments In Subjective Documents: Toward Supporting Decision Making','Workshop On Sentiment And Subjectivity In Text',2006),('W06-0304','User-Directed Sentiment Analysis: Visualizing The Affective Content Of Documents','Workshop On Sentiment And Subjectivity In Text',2006),('W06-0305','Annotating Attribution In The Penn Discourse TreeBank','Workshop On Sentiment And Subjectivity In Text',2006),('W06-0306','Searching For Sentences Expressing Opinions By Using Declaratively Subjective Clues','Workshop On Sentiment And Subjectivity In Text',2006),('W06-0307','Exploitation In Affect Detection In Open-Ended Improvisational Text','Workshop On Sentiment And Subjectivity In Text',2006),('W06-0308','Towards A Validated Model For Affective Classification Of Texts','Workshop On Sentiment And Subjectivity In Text',2006),('W06-0401','Constraints In Language Processing: Do Grammars Count?','Workshop On Constraints And Language Processing',2006),('W06-0402','Control Strategies For Parsing With Freer Word-Order Languages','Workshop On Constraints And Language Processing',2006),('W06-0403','Numbat: Abolishing Privileges When Licensing New Constituents In Constraint-Oriented Parsing','Workshop On Constraints And Language Processing',2006),('W06-0404','Pragmatic Constraints On Semantic Presupposition','Workshop On Constraints And Language Processing',2006),('W06-0405','Coupling A Linguistic Formalism And A Script Language','Workshop On Constraints And Language Processing',2006),('W06-0406','Capturing Disjunction In Lexicalization With Extensible Dependency Grammar','Workshop On Constraints And Language Processing',2006),('W06-0501','Enriching A Formal Ontology With A Thesaurus: An Application In The Cultural Heritage Domain','Workshop On Ontology Learning And Population: Bridging The Gap Between Text And Knowledge',2006),('W06-0502','Multilingual Ontology Acquisition From Multiple MRDs','Workshop On Ontology Learning And Population: Bridging The Gap Between Text And Knowledge',2006),('W06-0503','LEILA: Learning To Extract Information By Linguistic Analysis','Workshop On Ontology Learning And Population: Bridging The Gap Between Text And Knowledge',2006),('W06-0504','Ontology Population From Textual Mentions: Task Definition And Benchmark','Workshop On Ontology Learning And Population: Bridging The Gap Between Text And Knowledge',2006),('W06-0505','Efficient Hierarchical Entity Classifier Using Conditional Random Fields','Workshop On Ontology Learning And Population: Bridging The Gap Between Text And Knowledge',2006),('W06-0506','Taxonomy Learning Using Term Specificity And Similarity','Workshop On Ontology Learning And Population: Bridging The Gap Between Text And Knowledge',2006),('W06-0507','Towards Large-Scale Non-Taxonomic Relation Extraction: Estimating The Precision Of Rote Extractors','Workshop On Ontology Learning And Population: Bridging The Gap Between Text And Knowledge',2006),('W06-0508','A Hybrid Approach For Extracting Semantic Relations From Texts','Workshop On Ontology Learning And Population: Bridging The Gap Between Text And Knowledge',2006),('W06-0601','Challenges For Annotating Images For Sense Disambiguation','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0602','A Semi-Automatic Method For Annotating A Biomedical Proposition Bank','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0603','How And Where Do People Fail With Time: Temporal Reference Mapping Annotation By Chinese And English Bilinguals','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0604','Probing The Space Of Grammatical Variation: Induction Of Cross-Lingual Grammatical Constraints From Treebanks','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0605','Frontiers In Linguistic Annotation For Lower-Density Languages','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0606','Annotation Compatibility Working Group Report','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0607','Manual Annotation Of Opinion Categories In Meetings','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0608','The Hinoki Sensebank - A Large-Scale Word Sense Tagged Corpus Of Japanese','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0609','Issues In Synchronizing The English Treebank And PropBank','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0610','On Distance Between Deep Syntax And Semantic Representation','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0611','Corpus Annotation By Generation','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0612','Constructing An English Valency Lexicon','Workshop On Frontiers In Linguistically Annotated Corpora',2006),('W06-0701','Dimensionality Reduction Aids Term Co-Occurrence Based Multi-Document Summarization','Workshop On Task-Focused Summarization And Question Answering',2006),('W06-0702','Challenges In Evaluating Summaries Of Short Stories','Workshop On Task-Focused Summarization And Question Answering',2006),('W06-0703','Question Pre-Processing In A QA System On Internet Discussion Groups','Workshop On Task-Focused Summarization And Question Answering',2006),('W06-0704','Situated Question Answering In The Clinical Domain: Selecting The Best Drug Treatment For Diseases','Workshop On Task-Focused Summarization And Question Answering',2006),('W06-0705','Using Scenario Knowledge In Automatic Question Answering','Workshop On Task-Focused Summarization And Question Answering',2006),('W06-0706','Automating Help-Desk Responses: A Comparative Study Of Information-Gathering Approaches','Workshop On Task-Focused Summarization And Question Answering',2006),('W06-0707','DUC 2005: Evaluation Of Question-Focused Summarization Systems','Workshop On Task-Focused Summarization And Question Answering',2006),('W06-0801','Indonesian-Japanese CLIR Using Only Limited Resource','Workshop On How Can Computational Linguistics Improve Information Retrieval?',2006),('W06-0802','Hybrid Systems For Information Extraction And Question Answering','Workshop On How Can Computational Linguistics Improve Information Retrieval?',2006),('W06-0803','Extracting Key Phrases To Disambiguate Personal Name Queries In Web Search','Workshop On How Can Computational Linguistics Improve Information Retrieval?',2006),('W06-0804','How To Find Better Index Terms Through Citations','Workshop On How Can Computational Linguistics Improve Information Retrieval?',2006),('W06-0805','Exploring Semantic Constraints For Document Retrieval','Workshop On How Can Computational Linguistics Improve Information Retrieval?',2006),('W06-0901','The Stages Of Event Extraction','Workshop On Annotating And Reasoning About Time And Events',2006),('W06-0902','Local Semantics In The Interpretation Of Temporal Expressions','Workshop On Annotating And Reasoning About Time And Events',2006),('W06-0903','Automatic Dating Of Documents And Temporal Text Classification','Workshop On Annotating And Reasoning About Time And Events',2006),('W06-0904','A Pilot Study On Acquiring Metric Temporal Constraints For Events','Workshop On Annotating And Reasoning About Time And Events',2006),('W06-0905','Evaluating Knowledge-Based Approaches To The Multilingual Extension Of A Temporal Expression Normalizer','Workshop On Annotating And Reasoning About Time And Events',2006),('W06-0906','Extending TimeML With Typical Durations Of Events','Workshop On Annotating And Reasoning About Time And Events',2006),('W06-0907','Marking Time In Developmental Biology: Annotating Developmental Events And Their Links With Molecular Events','Workshop On Annotating And Reasoning About Time And Events',2006),('W06-1001','Lexical Markup Framework (LMF) For NLP Multilingual Resources','Workshop On Multilingual Language Resources And Interoperability',2006),('W06-1002','The Role Of Lexical Resources In CJK Natural Language Processing','Workshop On Multilingual Language Resources And Interoperability',2006),('W06-1003','Towards Agent-Based Cross-Lingual Interoperability Of Distributed Lexical Resources','Workshop On Multilingual Language Resources And Interoperability',2006),('W06-1004','The LexALP Information System: Term Bank And Corpus For Multilingual Legal Terminology Consolidated','Workshop On Multilingual Language Resources And Interoperability',2006),('W06-1005','The Development Of A Multilingual Collocation Dictionary','Workshop On Multilingual Language Resources And Interoperability',2006),('W06-1006','Multilingual Collocation Extraction: Issues And Solutions','Workshop On Multilingual Language Resources And Interoperability',2006),('W06-1007','Structural Properties Of Lexical Systems: Monolingual And Multilingual Perspectives','Workshop On Multilingual Language Resources And Interoperability',2006),('W06-1008','A Fast And Accurate Method For Detecting English-Japanese Parallel Texts','Workshop On Multilingual Language Resources And Interoperability',2006),('W06-1009','Evaluation Of The Bible As A Resource For Cross-Language Information Retrieval','Workshop On Multilingual Language Resources And Interoperability',2006),('W06-1101','Linguistic Distances','Workshop On Linguistic Distances',2006),('W06-1102','Semantic Similarity: What For?','Workshop On Linguistic Distances',2006),('W06-1103','Similarity Judgments: Philosophical Psychological And Mathematical Investigations','Workshop On Linguistic Distances',2006),('W06-1104','Automatically Creating Datasets For Measures Of Semantic Relatedness','Workshop On Linguistic Distances',2006),('W06-1105','Comparison Of Similarity Models For The Relation Discovery Task','Workshop On Linguistic Distances',2006),('W06-1106','Sentence Comparison Using Robust Minimal Recursion Semantics And An Ontology','Workshop On Linguistic Distances',2006),('W06-1107','Evaluation Of Several Phonetic Similarity Algorithms On The Task Of Cognate Identification','Workshop On Linguistic Distances',2006),('W06-1108','Evaluation Of String Distance Algorithms For Dialectology','Workshop On Linguistic Distances',2006),('W06-1109','Study Of Some Distance Measures For Language And Encoding Identification','Workshop On Linguistic Distances',2006),('W06-1110','Towards Case-Based Parsing: Are Chunks Reliable Indicators For Syntax Trees?','Workshop On Linguistic Distances',2006),('W06-1111','A Measure Of Aggregate Syntactic Distance','Workshop On Linguistic Distances',2006),('W06-1112','A Structural Similarity Measure','Workshop On Linguistic Distances',2006),('W06-1113','Variants Of Tree Similarity In A Question Answering Task','Workshop On Linguistic Distances',2006),('W06-1114','Total Rank Distance And Scaled Total Rank Distance: Two Alternative Metrics In Computational Linguistics','Workshop On Linguistic Distances',2006),('W06-1201','Compositionality And Multiword Expressions: Six Of One Half A Dozen Of The Other?','MWE',2006),('W06-1202','Measuring MWE Compositionality Using Semantic Annotation','MWE',2006),('W06-1203','Automatic Identification Of Non-Compositional Multi-Word Expressions Using Latent Semantic Analysis','MWE',2006),('W06-1204','Using Information About Multi-Word Expressions For The Word-Alignment Task','MWE',2006),('W06-1205','Detecting Complex Predicates In Hindi Using POS Projection Across Parallel Corpora','MWE',2006),('W06-1206','Automated Multiword Expression Prediction For Grammar Engineering','MWE',2006),('W06-1207','Classifying Particle Semantics In English Verb-Particle Constructions','MWE',2006),('W06-1208','Interpretation Of Compound Nominalisations Using Corpus And Web Statistics','MWE',2006),('W06-1301','Adaptive Help For Speech Dialogue Systems Based On Learning And Forgetting Of Speech Commands','SIGDIAL',2006),('W06-1302','Multi-Domain Spoken Dialogue System With Extensibility And Robustness Against Speech Recognition Errors','SIGDIAL',2006),('W06-1303','Building Effective Question Answering Characters','SIGDIAL',2006),('W06-1304','Interactive Question Answering And Constraint Relaxation In Spoken Dialogue Systems','SIGDIAL',2006),('W06-1305','Content Recognition In Dialogue','SIGDIAL',2006),('W06-1306','Multidimensional Dialogue Management','SIGDIAL',2006),('W06-1307','DRT Representation Of Degrees Of Belief','SIGDIAL',2006),('W06-1308','Resolution Of Referents Groupings In Practical Dialogues','SIGDIAL',2006),('W06-1309','Tracing Actions Helps In Understanding Interactions','SIGDIAL',2006),('W06-1310','Semantic And Pragmatic Presupposition In Discourse Representation Theory','SIGDIAL',2006),('W06-1311','Semantic Tagging For Resolution Of Indirect Anaphora','SIGDIAL',2006),('W06-1312','An Annotation Scheme For Citation Function','SIGDIAL',2006),('W06-1313','An Information State-Based Dialogue Manager For Call For Fire Dialogues','SIGDIAL',2006),('W06-1314','Automatically Detecting Action Items In Audio Meeting Recordings','SIGDIAL',2006),('W06-1315','Empirical Verification Of Adjacency Pairs Using Dialogue Segmentation','SIGDIAL',2006),('W06-1316','Multimodal Dialog Description Language For Rapid System Development','SIGDIAL',2006),('W06-1317','Classification Of Discourse Coherence Relations: An Exploratory Study Using Multiple Knowledge Sources','SIGDIAL',2006),('W06-1318','Measuring Annotator Agreement In A Complex Hierarchical Dialogue Act Annotation Scheme','SIGDIAL',2006),('W06-1319','Balancing Conflicting Factors In Argument Interpretation','SIGDIAL',2006),('W06-1320','An Analysis Of Quantitative Aspects In The Evaluation Of Thematic Segmentation Algorithms','SIGDIAL',2006),('W06-1321','Discourse And Dialogue Processing In Spoken Intelligent Tutoring Systems','SIGDIAL',2006),('W06-1322','A Computational Model Of Multi-Modal Grounding For Human Robot Interaction','SIGDIAL',2006),('W06-1323','Relationship Between Utterances And Enthusiasm In Non-Task-Oriented Conversational Dialogue','SIGDIAL',2006),('W06-1401','Lessons Learned From Large Scale Evaluation Of Systems That Produce Text: Nightmares And Pleasant Surprises','INLG',2006),('W06-1402','A Generation-Oriented Workbench For Performance Grammar: Capturing Linear Order Variability In German And Dutch','INLG',2006),('W06-1403','CCG Chart Realization From Disjunctive Inputs','INLG',2006),('W06-1404','Overgeneration And Ranking For Spoken Dialogue Systems','INLG',2006),('W06-1405','Individuality And Alignment In Generated Dialogues','INLG',2006),('W06-1406','Using Distributional Similarity To Identify Individual Verb Choice','INLG',2006),('W06-1407','Adjective-To-Verb Paraphrasing In Japanese Based On Lexical Constraints Of Verbs','INLG',2006),('W06-1408','Generating References To Parts Of Recursively Structured Objects','INLG',2006),('W06-1409','Overspecified Reference In Hierarchical Domains: Measuring The Benefits For Readers','INLG',2006),('W06-1410','Algorithms For Generating Referring Expressions: Do They Do What People Do?','INLG',2006),('W06-1411','Group-Based Generation Of Referring Expressions','INLG',2006),('W06-1412','Noun Phrase Generation For Situated Dialogs','INLG',2006),('W06-1413','The Clarity-Brevity Trade-Off In Generating Referring Expressions','INLG',2006),('W06-1414','Generic Querying Of Relational Databases Using Natural Language Generation Techniques','INLG',2006),('W06-1415','Generating Intelligent Numerical Answers In A Question-Answering System','INLG',2006),('W06-1416','Generating Multiple-Choice Test Items From Medical Text: A Pilot Study','INLG',2006),('W06-1417','Generation Of Biomedical Arguments For Lay Readers','INLG',2006),('W06-1418','Introduction To The INLG\\'06 Special Session On Sharing Data And Comparative Evaluation','INLG',2006),('W06-1419','Evaluations Of NLG Systems: Common Corpus And Tasks Or Common Dimensions And Metrics?','INLG',2006),('W06-1420','Building A Semantically Transparent Corpus For The Generation Of Referring Expressions','INLG',2006),('W06-1421','Shared-Task Evaluations In HLT: Lessons For NLG','INLG',2006),('W06-1422','GENEVAL: A Proposal For Shared-Task Evaluation In NLG','INLG',2006),('W06-1501','The Hidden TAG Model: Synchronous Grammars For Parsing Resource-Poor Languages','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1502','A Constraint Driven Metagrammar','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1503','The Metagrammar Goes Multilingual: A Cross-Linguistic Look At The V2-Phenomenon','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1504','The Weak Generative Capacity Of Linear Tree-Adjoining Grammars','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1505','A Tree Adjoining Grammar Analysis Of The Syntax And Semantics Of It-Clefts','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1506','Pied-Piping In Relative Clauses: Syntax And Compositional Semantics Based On Synchronous Tree Adjoining Grammar','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1507','Negative Concord And Restructuring In Palestinian Arabic: A Comparison Of TAG And CCG Analyses','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1508','Stochastic Multiple Context-Free Grammar For RNA Pseudoknot Modeling','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1509','Binding Of Anaphors In LTAG','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1510','Quantifier Scope In German: An MCTAG Analysis','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1511','Licensing German Negative Polarity Items In LTAG','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1512','Semantic Interpretation Of Unrealized Syntactic Material In LTAG','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1513','Three Reasons To Adopt TAG-Based Surface Realisation','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1514','Generating XTAG Parsers From Algebraic Specifications','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1515','Constraint-Based Computational Semantics: A Comparison Between LTAG And LRS','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1516','SemTAG The LORIA Toolbox For TAG-Based Parsing And Generation','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1517','Extended Cross-Serial Dependencies In Tree Adjoining Grammars','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1518','Using LTAG-Based Features For Semantic Role Labeling','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1519','Extracting Syntactic Features From A Korean Treebank','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1520','Handling Unlike Coordinated Phrases In TAG By Mixing Syntactic Category And Grammatical Function','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1521','Parsing TAG With Abstract Categorial Grammar','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1522','Modeling And Analysis Of Elliptic Coordination By Dynamic Exploitation Of Derivation Forests In LTAG Parsing','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1523','\\'Single Cycle\\' Languages: Empirical Evidence For TAG-Adjoining','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1524','Reconsidering Raising And Experiencers In English','Workshop On Tree Adjoining Grammar And Related Formalisms',2006),('W06-1601','Unsupervised Discovery Of A Statistical Verb Lexicon','EMNLP',2006),('W06-1602','An Empirical Approach To The Interpretation Of Superlatives','EMNLP',2006),('W06-1603','Paraphrase Recognition Via Dissimilarity Significance Classification','EMNLP',2006),('W06-1604','Detecting Parser Errors Using Web-Based Semantic Filters','EMNLP',2006),('W06-1605','Distributional Measures Of Concept-Distance: A Task-Oriented Evaluation','EMNLP',2006),('W06-1606','SPMT: Statistical Machine Translation With Syntactified Target Language Phrases','EMNLP',2006),('W06-1607','Phrasetable Smoothing For Statistical Machine Translation','EMNLP',2006),('W06-1608','The Impact Of Parse Quality On Syntactically-Informed Statistical Machine Translation','EMNLP',2006),('W06-1609','Statistical Machine Reordering','EMNLP',2006),('W06-1610','Re-Evaluating Machine Translation Results With Paraphrase Support','EMNLP',2006),('W06-1611','Exploiting Discourse Structure For Spoken Dialogue Performance Analysis','EMNLP',2006),('W06-1612','Learning Information Status Of Discourse Entities','EMNLP',2006),('W06-1613','Automatic Classification Of Citation Function','EMNLP',2006),('W06-1614','Is It Really That Difficult To Parse German?','EMNLP',2006),('W06-1615','Domain Adaptation With Structural Correspondence Learning','EMNLP',2006),('W06-1616','Incremental Integer Linear Programming For Non-Projective Dependency Parsing','EMNLP',2006),('W06-1617','Semantic Role Labeling Of NomBank: A Maximum Entropy Approach','EMNLP',2006),('W06-1618','Identification Of Event Mentions And Their Semantic Class','EMNLP',2006),('W06-1619','Extremely Lexicalized Models For Accurate And Fast HPSG Parsing','EMNLP',2006),('W06-1620','Multilingual Deep Lexical Acquisition For HPSGs Via Supertagging','EMNLP',2006),('W06-1621','Lexical Reference: A Semantic Matching Subtask','EMNLP',2006),('W06-1622','Semantic Role Labeling Via Instance-Based Learning','EMNLP',2006),('W06-1623','Inducing Temporal Graphs','EMNLP',2006),('W06-1624','A Weakly Supervised Learning Approach For Spoken Language Understanding','EMNLP',2006),('W06-1625','Humor: Prosody Analysis And Automatic Recognition For F*R*I*E*N*D*S*','EMNLP',2006),('W06-1626','Distributed Language Modeling For $N$-Best List Re-Ranking','EMNLP',2006),('W06-1627','Efficient Search For Inversion Transduction Grammar','EMNLP',2006),('W06-1628','A Discriminative Model For Tree-To-Tree Translation','EMNLP',2006),('W06-1629','Modeling Impression In Probabilistic Transliteration Into Chinese','EMNLP',2006),('W06-1630','Unsupervised Named Entity Transliteration Using Temporal And Phonetic Correlation','EMNLP',2006),('W06-1631','Capturing Out-Of-Vocabulary Words In Arabic Text','EMNLP',2006),('W06-1632','Using Linguistically Motivated Features For Paragraph Boundary Identification','EMNLP',2006),('W06-1633','BESTCUT: A Graph Algorithm For Coreference Resolution','EMNLP',2006),('W06-1634','Automatic Construction Of Predicate-Argument Structure Patterns For Biomedical Information Extraction','EMNLP',2006),('W06-1635','Protein Folding And Chart Parsing','EMNLP',2006),('W06-1636','Learning Phrasal Categories','EMNLP',2006),('W06-1637','Priming Effects In Combinatory Categorial Grammar','EMNLP',2006),('W06-1638','Better Informed Training Of Latent Syntactic Features','EMNLP',2006),('W06-1639','Get Out The Vote: Determining Support Or Opposition From Congressional Floor-Debate Transcripts','EMNLP',2006),('W06-1640','Partially Supervised Coreference Resolution For Opinion Summarization Through Structured Rule Learning','EMNLP',2006),('W06-1641','Sentiment Retrieval Using Generative Models','EMNLP',2006),('W06-1642','Fully Automatic Lexicon Expansion For Domain-Oriented Sentiment Analysis','EMNLP',2006),('W06-1643','A Skip-Chain Conditional Random Field For Ranking Meeting Utterances By Importance','EMNLP',2006),('W06-1644','Style And Topic Language Model Adaptation Using HMM-LDA','EMNLP',2006),('W06-1645','Text Data Acquisition For Domain-Specific Language Models','EMNLP',2006),('W06-1646','Corrective Models For Speech Recognition Of Inflected Languages','EMNLP',2006),('W06-1647','Lexicon Acquisition For Dialectal Arabic Using Transductive Learning','EMNLP',2006),('W06-1648','Arabic OCR Error Correction Using Character Segment Correction Language Modeling And Shallow Morphology','EMNLP',2006),('W06-1649','Partially Supervised Sense Disambiguation By Learning Sense Number From Tagged And Untagged Corpora','EMNLP',2006),('W06-1650','Automatically Assessing Review Helpfulness','EMNLP',2006),('W06-1651','Joint Extraction Of Entities And Relations For Opinion Recognition','EMNLP',2006),('W06-1652','Feature Subsumption For Opinion Analysis','EMNLP',2006),('W06-1653','Relevance Feedback Models For Recommendation','EMNLP',2006),('W06-1654','Random Indexing Using Statistical Weight Functions','EMNLP',2006),('W06-1655','A Hybrid Markov/Semi-Markov Conditional Random Field For Sequence Segmentation','EMNLP',2006),('W06-1656','Boosting Unsupervised Relation Extraction By Using NER','EMNLP',2006),('W06-1657','Short Text Authorship Attribution Via Sequence Kernels Markov Chains And Author Unmasking: An Investigation','EMNLP',2006),('W06-1658','Entity Annotation Based On Inverse Index Operations','EMNLP',2006),('W06-1659','Unsupervised Information Extraction Approach Using Graph Mutual Reinforcement','EMNLP',2006),('W06-1660','Empirical Study On The Performance Stability Of Named Entity Recognition Model Across Domains','EMNLP',2006),('W06-1661','Statistical Ranking In Tactical Generation','EMNLP',2006),('W06-1662','Sentence Ordering With Manifold-Based Classification In Multi-Document Summarization','EMNLP',2006),('W06-1663','Quality Assessment Of Large Scale Knowledge Resources','EMNLP',2006),('W06-1664','Graph-Based Word Clustering Using A Web Search Engine','EMNLP',2006),('W06-1665','Context-Dependent Term Relations For Information Retrieval','EMNLP',2006),('W06-1666','Loss Minimization In Parse Reranking','EMNLP',2006),('W06-1667','Unsupervised Relation Disambiguation With Order Identification Capabilities','EMNLP',2006),('W06-1668','Competitive Generative Models With Structure Learning For NLP Classification Tasks','EMNLP',2006),('W06-1669','Two Graph-Based Algorithms For State-Of-The-Art WSD','EMNLP',2006),('W06-1670','Broad-Coverage Sense Disambiguation And Information Extraction With A Supersense Sequence Tagger','EMNLP',2006),('W06-1671','Learning Field Compatibilities To Extract Database Records From Unstructured Text','EMNLP',2006),('W06-1672','Discriminative Methods For Transliteration','EMNLP',2006),('W06-1673','Solving The Problem Of Cascading Errors: Approximate Bayesian Inference For Linguistic Annotation Pipelines','EMNLP',2006),('W06-1700','Preface To Workshop On The Web As A Corpus','Workshop On Web As Corpus',2006),('W06-1701','Web-Based Frequency Dictionaries For Medium Density Languages','Workshop On Web As Corpus',2006),('W06-1702','BE: A Search Engine For NLP Research','Workshop On Web As Corpus',2006),('W06-1703','A Comparative Study On Compositional Translation Estimation Using A Domain/topic-Specific Corpus Collected From The Web','Workshop On Web As Corpus',2006),('W06-1704','CUCWeb: A Catalan Corpus Built From The Web','Workshop On Web As Corpus',2006),('W06-1705','Annotated Web As Corpus','Workshop On Web As Corpus',2006),('W06-1706','Web Coverage Of The 2004 US Presidential Election','Workshop On Web As Corpus',2006),('W06-1707','Corporator: A Tool For Creating RSS-Based Specialized Corpora','Workshop On Web As Corpus',2006),('W06-1708','The Problem Of Ontology Alignment On The Web: A First Report','Workshop On Web As Corpus',2006),('W06-1709','Using The Web As A Phonological Corpus: A Case Study From Tagalog','Workshop On Web As Corpus',2006),('W06-1710','Web Corpus Mining By Instance Of Wikipedia','Workshop On Web As Corpus',2006),('W06-1801','Language And Reasoning For Question Answering: State Of The Artand Future Directions','Workshop On KRAQ Knowledge And Reasoning For Language Processing',2006),('W06-1802','Linguistic Knowledge And Question Answering','Workshop On KRAQ Knowledge And Reasoning For Language Processing',2006),('W06-1803','Interpretation And Generation In A Knowledge-Based TutorialSystem','Workshop On KRAQ Knowledge And Reasoning For Language Processing',2006),('W06-1804','Using Application-Specific Ontologies To Improve Performancein A Bottom-Up Parser','Workshop On KRAQ Knowledge And Reasoning For Language Processing',2006),('W06-1805','Adjective Based Inference','Workshop On KRAQ Knowledge And Reasoning For Language Processing',2006),('W06-1806','Natural Language Understanding Using Temporal Action Logic','Workshop On KRAQ Knowledge And Reasoning For Language Processing',2006),('W06-1807','Merging Stories With Shallow Semantics','Workshop On KRAQ Knowledge And Reasoning For Language Processing',2006),('W06-1808','Numerical Data Integration For Cooperative Question-Answering','Workshop On KRAQ Knowledge And Reasoning For Language Processing',2006),('W06-1809','Incorporating User Models In Question Answering To ImproveReadability','Workshop On KRAQ Knowledge And Reasoning For Language Processing',2006),('W06-1901','QA Better Than IR ?','Workshop On Multilingual Question Answering MLQA',2006),('W06-1902','The Effect Of Machine Translation On The Performance Of Arabic-EnglishQA System','Workshop On Multilingual Question Answering MLQA',2006),('W06-1903','Cross-Cutting Aspects Of Cross-Language Question Answering Systems','Workshop On Multilingual Question Answering MLQA',2006),('W06-1904','Evaluation And Improvement Of Cross-Lingual Question AnsweringStrategies','Workshop On Multilingual Question Answering MLQA',2006),('W06-1905','Keyword Translation Accuracy And Cross-Lingual Question Answering InChinese And Japanese','Workshop On Multilingual Question Answering MLQA',2006),('W06-1906','BRUJA: Question Classification For Spanish. Using Machine Translationand An English Classifier','Workshop On Multilingual Question Answering MLQA',2006),('W06-1907','Monolingual Web-Based Factoid Question Answering In ChineseSwedish English And Japanese','Workshop On Multilingual Question Answering MLQA',2006),('W06-1908','Dialogue Based Question Answering System In Telugu','Workshop On Multilingual Question Answering MLQA',2006),('W06-1909','Adapting A Semantic Question Answering System To The Web','Workshop On Multilingual Question Answering MLQA',2006),('W06-1910','Experiments Adapting An Open-Domain Question Answering System Tothe Geographical Domain Using Scope-Based Resources','Workshop On Multilingual Question Answering MLQA',2006),('W06-2001','Multilingual Extension Of A Temporal Expression Normalizer Using Annotated Corpora','Workshop On Cross-Language Knowledge Induction Workshop',2006),('W06-2002','A Framework For Incorporating Alignment Information In Parsing','Workshop On Cross-Language Knowledge Induction Workshop',2006),('W06-2003','Induction Of Cross-Language Affix And Letter Sequence Correspondence','Workshop On Cross-Language Knowledge Induction Workshop',2006),('W06-2004','Improving Name Discrimination: A Language Salad Approach','Workshop On Cross-Language Knowledge Induction Workshop',2006),('W06-2005','Tagging Portuguese With A Spanish Tagger','Workshop On Cross-Language Knowledge Induction Workshop',2006),('W06-2006','Automatic Generation Of Translation Dictionaries Using Intermediary Languages','Workshop On Cross-Language Knowledge Induction Workshop',2006),('W06-2007','Word Sense Disambiguation Using Automatically Translated Sense Examples','Workshop On Cross-Language Knowledge Induction Workshop',2006),('W06-2008','Projecting POS Tags And Syntactic Dependencies From English And French To Polish In Aligned Corpora','Workshop On Cross-Language Knowledge Induction Workshop',2006),('W06-2101','Spatial Prepositions In Context: The Semantics Of \\'near\\' In The Presence Of Distractor Objects','SIGSEM Workshop On Prepositions',2006),('W06-2102','Polish Equivalents Of Spatial \\'at\\'','SIGSEM Workshop On Prepositions',2006),('W06-2103','A Quantitative Approach To Preposition-Pronoun Contraction In Polish','SIGSEM Workshop On Prepositions',2006),('W06-2104','Marked Adpositions','SIGSEM Workshop On Prepositions',2006),('W06-2105','Semantic Interpretation Of Prepositions For NLP Applications','SIGSEM Workshop On Prepositions',2006),('W06-2106','Coverage And Inheritance In The Preposition Project','SIGSEM Workshop On Prepositions',2006),('W06-2107','An Ontology-Based View On Prepositional Senses','SIGSEM Workshop On Prepositions',2006),('W06-2108','A Conceptual Analysis Of The Notion Of Instrumentality Via A Multilingual Analysis','SIGSEM Workshop On Prepositions',2006),('W06-2109','German Particle Verbs And Pleonastic Prepositions','SIGSEM Workshop On Prepositions',2006),('W06-2110','Automatic Identification Of English Verb Particle Constructions Using Linguistic Features','SIGSEM Workshop On Prepositions',2006),('W06-2111','On The Prepositions Which Introduce An Adjunct Of Duration','SIGSEM Workshop On Prepositions',2006),('W06-2112','How Bad Is The Problem Of PP-Attachment? A Comparison Of English German And Swedish','SIGSEM Workshop On Prepositions',2006),('W06-2113','Handling Of Prepositions In English To Bengali Machine Translation','SIGSEM Workshop On Prepositions',2006),('W06-2201','Learning Effective Surface Text Patterns For Information Extraction','Workshop On Adaptive Text Extraction And Mining ATEM',2006),('W06-2202','Simple Information Extraction (SIE): A Portable And Effective IE System','Workshop On Adaptive Text Extraction And Mining ATEM',2006),('W06-2203','An Experimental Study On Boundary Classification Algorithms For Information Extraction Using SVM','Workshop On Adaptive Text Extraction And Mining ATEM',2006),('W06-2204','Transductive Pattern Learning For Information Extraction','Workshop On Adaptive Text Extraction And Mining ATEM',2006),('W06-2205','Recognition Of Synonyms By A Lexical Graph','Workshop On Adaptive Text Extraction And Mining ATEM',2006),('W06-2206','Spotting The \\'Odd-One-Out\\': Data-Driven Error Detection And Correction In Textual Databases','Workshop On Adaptive Text Extraction And Mining ATEM',2006),('W06-2207','A Hybrid Approach For The Acquisition Of Information Extraction Patterns','Workshop On Adaptive Text Extraction And Mining ATEM',2006),('W06-2208','Expanding The Recall Of Relation Extraction By Bootstrapping','Workshop On Adaptive Text Extraction And Mining ATEM',2006),('W06-2209','Active Annotation','Workshop On Adaptive Text Extraction And Mining ATEM',2006),('W06-2301','Robust Parsing Error Mining Automated Lexical Acquisition And Evaluation','Workshop On ROMAND Robust Methods In Analysis Of Natural Language Data',2006),('W06-2302','Another Evaluation Of Anaphora Resolution Algorithms And A Comparison With GETARUNS Knowledge Rich Approach','Workshop On ROMAND Robust Methods In Analysis Of Natural Language Data',2006),('W06-2303','Robust Parsing Of The Proposition Bank','Workshop On ROMAND Robust Methods In Analysis Of Natural Language Data',2006),('W06-2304','A Robust And Efficient Parser For Non-Canonical Inputs','Workshop On ROMAND Robust Methods In Analysis Of Natural Language Data',2006),('W06-2305','Robust Parsing: More With Less','Workshop On ROMAND Robust Methods In Analysis Of Natural Language Data',2006),('W06-2401','Named Entities Translation Based On Comparable Corpora','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2402','Grouping Multi-Word Expressions According To Part-Of-Speech In Statistical Machine Translation','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2403','Automatic Extraction Of Chinese Multiword Expressions With A Statistical Tool','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2404','Chunking Japanese Compound Functional Expressions By Machine Learning','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2405','Identifying Idiomatic Expressions Using Automatic Word-Alignment','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2406','Collocation Extraction: Needs Feeds And Results Of An Extraction System For German','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2407','Extending Corpus-Based Identification Of Light Verb Constructions Using A Supervised Learning Framework','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2408','Multi-Word Verbs In A Flective Language: The Case Of Estonian','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2409','Modeling Monolingual And Bilingual Collocation Dictionaries In Description Logics','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2410','Multiword Units In An MT Lexicon','Workshop On Multi-Word-Expressions In A Multilingual Context',2006),('W06-2501','Using WordNet-Based Context Vectors To Estimate The Semantic Relatedness Of Concepts','Workshop On Making Sense Of Sense: Bringing Psycholinguistics And Computational Linguistics Together',2006),('W06-2502','Cluster Stopping Rules For Word Sense Discrimination','Workshop On Making Sense Of Sense: Bringing Psycholinguistics And Computational Linguistics Together',2006),('W06-2503','Relating WordNet Senses For Word Sense Disambiguation','Workshop On Making Sense Of Sense: Bringing Psycholinguistics And Computational Linguistics Together',2006),('W06-2504','Whats In A Name? The Automatic Recognition Of Metonymical Location Names','Workshop On Making Sense Of Sense: Bringing Psycholinguistics And Computational Linguistics Together',2006),('W06-2505','Multilingual Versus Monolingual WSD','Workshop On Making Sense Of Sense: Bringing Psycholinguistics And Computational Linguistics Together',2006),('W06-2506','Characterizing Response Types And Revealing Noun Ambiguity In German Association Norms','Workshop On Making Sense Of Sense: Bringing Psycholinguistics And Computational Linguistics Together',2006),('W06-2601','Maximum Entropy Tagging With Binary And Real-Valued Features','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2602','Constraint Satisfaction Inference: Non-Probabilistic Global Inference For Sequence Labelling','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2603','Decomposition Kernels For Natural Language Processing','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2604','A Multiclassifier Based Document Categorization System: Profiting From The Singular Value Decomposition Dimensionality Reduction Technique','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2605','Discourse Parsing: Learning FOL Rules Based On Rich Verb Semantic Representations To Automatically Label Rhetorical Relations','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2606','Reranking Translation Hypotheses Using Structural Properties','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2607','Tree Kernel Engineering In Semantic Role Labeling Systems','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2608','Syntagmatic Kernels: A Word Sense Disambiguation Case Study','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2609','Learning To Identify Definitions Using Syntactic Features','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2610','An Ontology-Based Approach To Disambiguation Of Semantic Relations','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2611','Towards Free-Text Semantic Parsing: A Unified Framework Based On FrameNet VerbNet And PropBank','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2612','Constructing A Rule Based Naming System For Thai Names Using The Concept Of Ontologies','Workshop On Learning Structured Information In Natural Language Applications',2006),('W06-2701','Representing And Querying Multi-Dimensional Markup For Question Answering','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2702','Annotation And Disambiguation Of Semantic Types In Biomedical Text: A Cascaded Approach To Named Entity Recognition','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2703','Tools To Address The Interdependence Between Tokenisation And Standoff Annotation','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2704','Towards An Alternative Implementation Of NXTs Query Language Via XQuery','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2705','Multi-Dimensional Annotation And Alignment In An English-German Translation Corpus','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2706','Querying XML Documents With Multi-Dimensional Markup','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2707','Annotating Text Using The Linguistic Description Scheme Of MPEG-7: The Direct-INFO Scenario','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2708','Tools For Hierarchical Annotation Of Typed Dialogue','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2709','ANNIS: Complex Multilevel Annotations In A Linguistic Database','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2710','The NITE XML Toolkit: Demonstration From Five Corpora','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2711','The SAMMIE Multimodal Dialogue Corpus Meets The Nite XML Toolkit','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2712','Representing And Accessing Multi-Level Annotations In MMAX2','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2713','Representing And Accessing Multilevel Linguistic Annotation Using The MEANING Format','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2714','Middleware For Creating And Combining Multi-Dimensional NLP Markup','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2715','Multidimensional Markup And Heterogeneous Linguistic Resources','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2716','Layering And Merging Linguistic Annotations','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2717','XML-Based Phrase Alignment In Parallel Treebanks','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2718','A Standoff Annotation Interface Between DELPH-In Components','Workshop On NLP And XML NLPXML Multi-Dimensional Markup',2006),('W06-2801','Text Linkage In The Wiki Medium - A Comparative Study','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2802','Errors In Wikis','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2803','Linguistic Features Of Italian Blogs: Literary Language','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2804','An Analysis Of Wikipedia Digital Writing','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2805','Learning To Recognize Blogs: A Preliminary Exploration','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2806','Interpreting Genre Evolution On The Web','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2807','Novelle A Collaborative Open Source Writing Tool Software','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2808','Anomaly Detecting Within Dynamic Chinese Chat Text','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2809','A Proposal To Automatically Build And Maintain Gazetteers For Named Entity Recognition By Using Wikipedia','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2810','Finding Similar Sentences Across Multiple Languages In Wikipedia','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2811','Multilingual Interactive Experiments With Flickr','Workshop On New Text Wikis And Blogs And Other Dynamic Text Sources',2006),('W06-2901','A Mission For Computational Natural Language Learning','CoNLL',2006),('W06-2902','Porting Statistical Parsers With Data-Defined Kernels','CoNLL',2006),('W06-2903','Non-Local Modeling With A Mixture Of PCFGs','CoNLL',2006),('W06-2904','Improved Large Margin Dependency Parsing Via Local Constraints And Laplacian Regularization','CoNLL',2006),('W06-2905','What Are The Productive Units Of Natural Language Grammar? A DOP Approach To The Automatic Identification Of Constructions','CoNLL',2006),('W06-2906','Resolving And Generating Definite Anaphora By Modeling Hypernymy Using Unlabeled Corpora','CoNLL',2006),('W06-2907','Investigating Lexical Substitution Scoring For Subtitle Generation','CoNLL',2006),('W06-2908','Semantic Role Recognition Using Kernels On Weighted Marked Ordered Labeled Trees','CoNLL',2006),('W06-2909','Semantic Role Labeling Via Tree Kernel Joint Inference','CoNLL',2006),('W06-2910','Can Human Verb Associations Help Identify Salient Features For Semantic Verb Classification?','CoNLL',2006),('W06-2911','Applying Alternating Structure Optimization To Word Sense Disambiguation','CoNLL',2006),('W06-2912','Unsupervised Parsing With U-DOP','CoNLL',2006),('W06-2913','A Lattice-Based Framework For Enhancing Statistical Parsers With Information From Unlabeled Corpora','CoNLL',2006),('W06-2914','Word Distributions For Thematic Segmentation In A Support Vector Machine Approach','CoNLL',2006),('W06-2915','Which Side Are You On? Identifying Perspectives At The Document And Sentence Levels','CoNLL',2006),('W06-2916','Unsupervised Grammar Induction By Distribution And Attachment','CoNLL',2006),('W06-2917','Learning Auxiliary Fronting With Grammatical Inference','CoNLL',2006),('W06-2918','Using Gazetteers In Discriminative Information Extraction','CoNLL',2006),('W06-2919','A Context Pattern Induction Method For Named Entity Extraction','CoNLL',2006),('W06-2920','CoNLL-X Shared Task On Multilingual Dependency Parsing','CoNLL',2006),('W06-2921','The Treebanks Used In The Shared Task','CoNLL',2006),('W06-2922','Experiments With A Multilanguage Non-Projective Dependency Parser','CoNLL',2006),('W06-2923','LingPars A Linguistically Inspired Language-Independent Machine Learner For Dependency Treebanks','CoNLL',2006),('W06-2924','Dependency Parsing By Inference Over High-Recall Dependency Predictions','CoNLL',2006),('W06-2925','Projective Dependency Parsing With Perceptron','CoNLL',2006),('W06-2926','A Pipeline Model For Bottom-Up Dependency Parsing','CoNLL',2006),('W06-2927','Multi-Lingual Dependency Parsing At NAIST','CoNLL',2006),('W06-2928','Dependency Parsing With Reference To Slovene Spanish And Swedish','CoNLL',2006),('W06-2929','Vine Parsing And Minimum Risk Reranking For Speed And Precision','CoNLL',2006),('W06-2930','Investigating Multilingual Dependency Parsing','CoNLL',2006),('W06-2931','Dependency Parsing Based On Dynamic Local Optimization','CoNLL',2006),('W06-2932','Multilingual Dependency Analysis With A Two-Stage Discriminative Parser','CoNLL',2006),('W06-2933','Labeled Pseudo-Projective Dependency Parsing With Support Vector Machines','CoNLL',2006),('W06-2934','Multi-Lingual Dependency Parsing With Incremental Integer Linear Programming','CoNLL',2006),('W06-2935','Language Independent Probabilistic Context-Free Parsing Bolstered By Machine Learning','CoNLL',2006),('W06-2936','Maximum Spanning Tree Algorithm For Non-Projective Labeled Dependency Parsing','CoNLL',2006),('W06-2937','The Exploration Of Deterministic And Efficient Dependency Parsing','CoNLL',2006),('W06-2938','Dependency Parsing As A Classication Problem','CoNLL',2006),('W06-3001','Contextual Phenomena And Thematic Relations In Database QA Dialogues: Results From A Wizard-Of-Oz Experiment','Interactive Question Answering Workshop',2006),('W06-3002','WoZ Simulation Of Interactive Question Answering','Interactive Question Answering Workshop',2006),('W06-3003','Modeling Reference Interviews As A Basis For Improving Automatic QA Systems','Interactive Question Answering Workshop',2006),('W06-3004','Enhanced Interactive Question-Answering With Conditional Random Fields','Interactive Question Answering Workshop',2006),('W06-3005','A Data Driven Approach To Relevancy Recognition For Contextual Question Answering','Interactive Question Answering Workshop',2006),('W06-3006','Answering Questions Of Information Access Dialogue (IAD) Task Using Ellipsis Handling Of Follow-Up Questions','Interactive Question Answering Workshop',2006),('W06-3007','User-Centered Evaluation Of Interactive Question Answering Systems','Interactive Question Answering Workshop',2006),('W06-3101','Morpho-Syntactic Information For Automatic Error Analysis Of Statistical Machine Translation Output','Workshop on Statistical Machine Translation',2006),('W06-3102','Initial Explorations In English To Turkish Statistical Machine Translation','Workshop on Statistical Machine Translation',2006),('W06-3103','Morpho-Syntactic Arabic Preprocessing For Arabic To English Statistical Machine Translation','Workshop on Statistical Machine Translation',2006),('W06-3104','Quasi-Synchronous Grammars: Alignment By Soft Projection Of Syntactic Dependencies','Workshop on Statistical Machine Translation',2006),('W06-3105','Why Generative Phrase Models Underperform Surface Heuristics','Workshop on Statistical Machine Translation',2006),('W06-3106','Phrase-Based SMT With Shallow Tree-Phrases','Workshop on Statistical Machine Translation',2006),('W06-3107','Searching For Alignments In SMT: A Novel Approach Based On An Estimation Of Distribution Algorithm','Workshop on Statistical Machine Translation',2006),('W06-3108','Discriminative Reordering Models For Statistical Machine Translation','Workshop on Statistical Machine Translation',2006),('W06-3109','Generalized Stack Decoding Algorithms For Statistical Machine Translation','Workshop on Statistical Machine Translation',2006),('W06-3110','N-Gram Posterior Probabilities For Statistical Machine Translation','Workshop on Statistical Machine Translation',2006),('W06-3111','Partitioning Parallel Documents Using Binary Segmentation','Workshop on Statistical Machine Translation',2006),('W06-3112','Contextual Bitext-Derived Paraphrases In Automatic MT Evaluation','Workshop on Statistical Machine Translation',2006),('W06-3113','How Many Bits Are Needed To Store Probabilities For Phrase-Based Translation?','Workshop on Statistical Machine Translation',2006),('W06-3114','Manual And Automatic Evaluation Of Machine Translation Between European Languages','Workshop on Statistical Machine Translation',2006),('W06-3115','NTT System Description For The WMT2006 Shared Task','Workshop on Statistical Machine Translation',2006),('W06-3116','Mood At Work: Ramses Versus Pharaoh','Workshop on Statistical Machine Translation',2006),('W06-3117','Stochastic Inversion Transduction Grammars For Obtaining Word Phrases For Phrase-Based Statistical Machine Translation','Workshop on Statistical Machine Translation',2006),('W06-3118','PORTAGE: With Smoothed Phrase Tables And Segment Choice Models','Workshop on Statistical Machine Translation',2006),('W06-3119','Syntax Augmented Machine Translation Via Chart Parsing','Workshop on Statistical Machine Translation',2006),('W06-3120','TALP Phrase-Based Statistical Translation System For European Language Pairs','Workshop on Statistical Machine Translation',2006),('W06-3121','Phramer - An Open Source Statistical Phrase-Based Translator','Workshop on Statistical Machine Translation',2006),('W06-3122','Language Models And Reranking For Machine Translation','Workshop on Statistical Machine Translation',2006),('W06-3123','Constraining The Phrase-Based Joint Probability Statistical Translation Model','Workshop on Statistical Machine Translation',2006),('W06-3124','Microsoft Research Treelet Translation System: Meeting Of The North American Association For Computational Linguistics 2006 Europarl Evaluation','Workshop on Statistical Machine Translation',2006),('W06-3125','N-Gram-Based SMT System Enhanced With Reordering Patterns','Workshop on Statistical Machine Translation',2006),('W06-3126','The LDV-COMBO System For SMT','Workshop on Statistical Machine Translation',2006),('W06-3201','A Combined Phonetic-Phonological Approach To Estimating Cross-Language Phoneme Similarity In An ASR Environment','SIGMORPHON',2006),('W06-3202','Improving Syllabification Models With Phonotactic Knowledge','SIGMORPHON',2006),('W06-3203','Learning Quantity Insensitive Stress Systems Via Local Inference','SIGMORPHON',2006),('W06-3204','Invited Talk: Universal Constraint Rankings Result From Learning And Evolution','SIGMORPHON',2006),('W06-3205','Exploring Variant Definitions Of Pointer Length In MDL','SIGMORPHON',2006),('W06-3206','Improved Morpho-Phonological Sequence Processing With Constraint Satisfaction Inference','SIGMORPHON',2006),('W06-3207','Richness Of The Base And Probabilistic Unsupervised Learning In Optimality Theory','SIGMORPHON',2006),('W06-3208','Morphology Induction From Limited Noisy Data Using Approximate String Matching','SIGMORPHON',2006),('W06-3209','Learning Probabilistic Paradigms For Morphology In A Latent Class Model','SIGMORPHON',2006),('W06-3210','A Naive Theory Of Affixation And An Algorithm For Extraction','SIGMORPHON',2006),('W06-3301','The Semantics Of A Definiendum Constrains Both The Lexical Semantics And The Lexicosyntactic Patterns In The Definiens','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3302','Ontology-Based Natural Language Query Processing For The Biological Domain','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3303','Term Generalization And Synonym Resolution For Biological Abstracts: Using The Gene Ontology For Subcellular Localization Prediction','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3304','Integrating Ontological Knowledge And Textual Evidence In Estimating Gene And Gene Product Similarity','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3305','A Priority Model For Named Entities','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3306','Human Gene Name Normalization Using Text Matching With Automatically Extracted Synonym Dictionaries','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3307','Integrating Co-Occurrence Statistics With Information Extraction For Robust Retrieval Of Protein Interactions From Medline','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3308','BIOSMILE: Adapting Semantic Role Labeling For Biomedical Verbs:','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3309','Generative Content Models For Structural Analysis Of Medical Abstracts','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3310','Exploring Text And Image Features To Classify Images In Bioscience Literature','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3311','Mining Biomedical Texts For Disease-Related Pathways','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3312','Postnominal Prepositional Phrase Attachment In Proteomics','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3314','BioKI:Enzymes - An Adaptable System To Locate Low-Frequency Information In Full-Text Proteomics Articles','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3315','A Graph-Search Framework For GeneId Ranking','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3316','Semi-Supervised Anaphora Resolution In Biomedical Texts','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3317','Using Dependency Parsing And Probabilistic Inference To Extract Relationships Between Genes Proteins And Malignancies Implicit Among Multiple Biomedical Research Abstracts','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3318','Recognizing Nested Named Entities In GENIA Corpus','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3319','Biomedical Term Recognition With The Perceptron HMM Algorithm','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3320','Refactoring Corpora','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3321','Rapid Adaptation Of POS Tagging For Domain Specific Uses','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3322','Extracting Protein-Protein Interactions Using Simple Contextual Features','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3323','Identifying Experimental Techniques In Biomedical Literature','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3324','A Pragmatic Approach To Summary Extraction In Clinical Trials','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3325','The Difficulties Of Taxonomic Name Extraction And A Solution','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3326','Summarizing Key Concepts Using Citation Sentences','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3327','Subdomain Adaptation Of A POS Tagger With A Small Corpus','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3328','Bootstrapping And Evaluating Named Entity Recognition In The Biomedical Domain','Workshop:  BioNLP Workshop On Linking Natural Language And Biology',2006),('W06-3401','Prosodic Correlates Of Rhetorical Relations','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3402','Off-Topic Detection In Conversational Telephone Speech','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3403','Computational Measures For Language Similarity Across Time In Online Communities','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3404','You Are What You Say: Using Meeting Participants\\' Speech To Detect Their Roles And Expertise','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3405','Shallow Discourse Structure For Action Item Detection','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3406','Improving Email Speech Acts Analysis Via N-Gram Selection','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3407','Topic-Segmentation Of Dialogue','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3408','ChAT: A Time-Linked System For Conversational Analysis','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3409','Pragmatic Discourse Representation Theory','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3410','Retrospective Analysis Of Communication Events - Understanding The Dynamics Of Collaborative Multi-Party Discourse','Workshop On Analyzing Conversations In Text And Speech',2006),('W06-3501','Pragmatic Information Extraction From Subject Ellipsis In Informal English','Workshop On Scalable Natural Language Understanding',2006),('W06-3502','Backbone Extraction And Pruning For Speeding Up A Deep Parser For Dialogue Systems','Workshop On Scalable Natural Language Understanding',2006),('W06-3503','Understanding Complex Natural Language Explanations In Tutorial Applications','Workshop On Scalable Natural Language Understanding',2006),('W06-3504','Increasing The Coverage Of A Domain Independent Dialogue Lexicon With VERBNET','Workshop On Scalable Natural Language Understanding',2006),('W06-3505','Scaling Natural Language Understanding Via User-Driven Ontology Learning','Workshop On Scalable Natural Language Understanding',2006),('W06-3506','Catching Metaphors','Workshop On Scalable Natural Language Understanding',2006),('W06-3507','Scaling Construction Grammar Up To Production Systems: The Situated Constructional Interpretation Model','Workshop On Scalable Natural Language Understanding',2006),('W06-3508','Searching For Grammar Right','Workshop On Scalable Natural Language Understanding',2006),('W06-3509','Embodied Construction Grammar As Layered Modal Languages','Workshop On Scalable Natural Language Understanding',2006),('W06-3510','A (Very) Brief Introduction To Fluid Construction Grammar','Workshop On Scalable Natural Language Understanding',2006),('W06-3601','A Syntax-Directed Translator With Extended Domain Of Locality','Workshop On Computationally Hard Problems And Joint Inference In Speech And Language Processing',2006),('W06-3602','Efficient Dynamic Programming Search Algorithms For Phrase-Based SMT','Workshop On Computationally Hard Problems And Joint Inference In Speech And Language Processing',2006),('W06-3603','Computational Challenges In Parsing By Classification','Workshop On Computationally Hard Problems And Joint Inference In Speech And Language Processing',2006),('W06-3604','All-Word Prediction As The Ultimate Confusible Disambiguation','Workshop On Computationally Hard Problems And Joint Inference In Speech And Language Processing',2006),('W06-3605','A Probabilistic Search For The Best Solution Among Partially Completed Candidates','Workshop On Computationally Hard Problems And Joint Inference In Speech And Language Processing',2006),('W06-3606','Practical Markov Logic Containing First-Order Quantifiers With Application To Identity Uncertainty','Workshop On Computationally Hard Problems And Joint Inference In Speech And Language Processing',2006),('W06-3607','Re-Ranking Algorithms For Name Tagging','Workshop On Computationally Hard Problems And Joint Inference In Speech And Language Processing',2006),('W06-3701','Usability Issues In An Interactive Speech-To-Speech Translation System For Healthcare','Workshop On Medical Speech Translation',2006),('W06-3702','Evaluating Task Performance For A Unidirectional Controlled Language Medical Speech Translation System','Workshop On Medical Speech Translation',2006),('W06-3703','Speech To Speech Translation For Medical Triage In Korean','Workshop On Medical Speech Translation',2006),('W06-3704','Automated Interpretation Of Clinical Encounters With Cultural Cues And Electronic Health Record Generation','Workshop On Medical Speech Translation',2006),('W06-3705','Language Engineering And The Pathway To Healthcare: A User-Oriented View','Workshop On Medical Speech Translation',2006),('W06-3706','Converser (TM): Highly Interactive Speech-To-Speech Translation For Healthcare','Workshop On Medical Speech Translation',2006),('W06-3707','MedSLT: A Limited-Domain Unidirectional Grammar-Based Medical Speech Translator','Workshop On Medical Speech Translation',2006),('W06-3708','S-MINDS 2-Way Speech-To-Speech Translation System','Workshop On Medical Speech Translation',2006),('W06-3709','Accultran: Automated Interpretation Of Clinical Encounters With Cultural Cues And Electronic Health Record Generation','Workshop On Medical Speech Translation',2006),('W06-3710','A Multi-Lingual Decision Support Prototype For The Medical Domain','Workshop On Medical Speech Translation',2006),('W06-3711','IBM MASTOR System: Multilingual Automatic Speech-To-Speech Translator','Workshop On Medical Speech Translation',2006),('W06-3801','A Graphical Framework For Contextual Search And Name Disambiguation In Email','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3802','Graph Based Semi-Supervised Approach For Information Extraction','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3803','Graph-Based Text Representation For Novelty Detection','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3804','Measuring Aboutness Of An Entity In A Text','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3805','A Study Of Two Graph Algorithms In Topic-Driven Summarization','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3806','Similarity Between Pairs Of Co-Indexed Trees For Textual Entailment Recognition','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3807','Learning Of Graph-Based Question Answering Rules','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3808','Seeing Stars When There Aren’t Many Stars: Graph-Based Semi-Supervised Learning For Sentiment Categorization','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3809','Random-Walk Term Weighting For Improved Text Classification','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3810','Graph-Based Generalized Latent Semantic Analysis For Document Representation','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3811','Synonym Extraction Using A Semantic Distance On A Dictionary','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3812','Chinese Whispers - An Efficient Graph Clustering Algorithm And Its Application To Natural Language Processing Problems','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3813','Matching Syntactic-Semantic Graphs For Semantic Relation Assignment','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3814','Evaluating And Optimizing The Parameters Of An Unsupervised Graph-Based WSD Algorithm','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3815','Context Comparison As A Minimum Cost Flow Problem','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2006),('W06-3900','Proceedings of the Fifth International Workshop on Inference in Computational Semantics','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3901','Anaphora resolution and minimal models','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3902','Extracting formal specifications from natural language regulatory documents','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3903','How to change a person\\'s mind: Understanding the difference between the effects and consequences of speech acts','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3904','Towards a redundancy elimination algorithm for underspecified descriptions','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3905','Towards a redundancy elimination algorithm for underspecified descriptions','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3906','Controlled Language for Geographical Information System Queries','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3907','Computing relative polarity for textual inference','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3908','Using Answer Set Programming in an inference-based approach to Natural Language Semantics','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3909','A Bootstrapping Algorithm for Automatically Harvesting Semantic Relations','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3910','Concepts across categories','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3911','Multi-dimensional Temporal Logic for Events and States','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3912','Considerations on the nature of metaphorical meaning arising from a computational treatment of metaphor interpretation','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3913','Supporting temporal question answering: strategies for offline data collection','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3914','Formal semantics of verbs for knowledge inference','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3915','Ingredients of a first-order account of bridging','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3916','A Computational Theory of Inference for Arithmetic Explanation','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3917','Towards a Logical Foundation of Semantic Networks - A Typology of Descriptive Means for Semantic Inference','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W06-3918','The Alligator theorem prover for dependent type systems: Description and proof samples','Proceedings of the Fifth International Workshop on Inference in Computational Semantics',2006),('W07-0101','Lexical Influences on the Perception of Sarcasm','Workshop on Computational Approaches to Figurative Language',2007),('W07-0102','Corpus-driven Metaphor Harvesting','Workshop on Computational Approaches to Figurative Language',2007),('W07-0103','Hunting Elusive Metaphors Using Lexical Resources','Workshop on Computational Approaches to Figurative Language',2007),('W07-0104','Active Learning for the Identification of Nonliteral Language','Workshop on Computational Approaches to Figurative Language',2007),('W07-0201','Analysis of the Wikipedia Category Graph for NLP Applications','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0202','Multi-level Association Graphs - A New Graph-Based Model for Information Retrieval','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0203','Extractive Automatic Summarization: Does more Linguistic Knowledge Make a Difference?','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0204','Timestamped Graphs: Evolutionary Models of Text for Multi-Document Summarization','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0205','Unigram Language Models using Diffusion Smoothing over Graphs','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0206','Transductive Structured Classification through Constrained Min-Cuts','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0207','Latent Semantic Grammar Induction: Context Projectivity and Prior Distributions','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0208','Learning to Transform Linguistic Graphs','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0209','Semi-supervised Algorithm for Human-Computer Dialogue Mining','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0210','Correlations in the Organization of Large-Scale Syntactic Dependency Networks','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0211','DLSITE-2: Semantic Similarity Based on Syntactic Dependency Trees Applied to Textual Entailment','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0212','How Difficult is it to Develop a Perfect Spell-checker? A Cross-Linguistic Analysis through Complex Network Approach','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0213','Vertex Degree Distribution for the Graph of Word Co-Occurrences in Russian','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2007),('W07-0301','Applying POMDPs to Dialog Systems in the Troubleshooting Domain','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0302','Training a real-world POMDP-based Dialog System','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0303','The Multimodal Presentation Dashboard','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0304','Technical Support Dialog Systems:Issues Problems and Solutions','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0305','Olympus: an open-source framework for conversational spoken language interface research','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0306','Toward Evaluation that Leads to Best Practices: Reconciling Dialog Evaluation in Research and Industry','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0307','Experiments on the France Telecom 3000 Voice Agency corpus: academic research on an industrial spoken dialog system','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0308','Experiences of an In-Service Wizard-of-Oz Data Collection for the Deployment of a Call-Routing Application','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0309','AdaRTE: An Extensible and Adaptable Architecture for Dialog Systems','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0310','Multi-slot semantics for natural-language call routing systems','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0311','Enhancing commercial grammar-based applications using robust approaches to speech understanding','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0312','WIRE: A Wearable Spoken Language Understanding System for the Military','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0313','Different measurement metrics to evaluate a chatbot system','Workshop on Bridging the Gap: Academic and Industrial Research in Dialog Technologies',2007),('W07-0401','Chunk-Level Reordering of Source Language Sentences with Automatically Learned Rules for Statistical Machine Translation','SSST',2007),('W07-0402','Extraction Phenomena in Synchronous TAG Syntax and Semantics','SSST',2007),('W07-0403','Inversion Transduction Grammar for Joint Phrasal Translation Modeling','SSST',2007),('W07-0404','Factorization of Synchronous Context-Free Grammars in Linear Time','SSST',2007),('W07-0405','Binarization Synchronous Binarization and Target-side Binarization','SSST',2007),('W07-0406','Machine Translation as Tree Labeling','SSST',2007),('W07-0407','Discriminative word alignment by learning the alignment structure and syntactic divergence between a language pair','SSST',2007),('W07-0408','Generation in Machine Translation from Deep Syntactic Trees','SSST',2007),('W07-0409','Combining Morphosyntactic Enriched Representation with n-best Reranking in Statistical Translation','SSST',2007),('W07-0410','A Walk on the Other Side: Using SMT Components in a Transfer-Based Translation System','SSST',2007),('W07-0411','Dependency-Based Automatic Evaluation for Machine Translation','SSST',2007),('W07-0412','Probabilistic Synchronous Tree-Adjoining Grammars for Machine Translation: The Argument from Bilingual Dictionaries','SSST',2007),('W07-0413','Three models for discriminative machine translation using Global Lexical Selection and Sentence Reconstruction','SSST',2007),('W07-0414','Comparing Reordering Constraints for SMT Using Efficient BLEU Oracle Computation','SSST',2007),('W07-0601','A Linguistic Investigation into Unsupervised DOP','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0602','Using Classifier Features for Studying the Effect of Native Language on the Choice of Written Second Language Words','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0603','Phon 1.2: A Computational Basis for Phonological Database Elaboration and Model Testing','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0604','High-accuracy Annotation and Parsing of CHILDES Transcripts','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0605','I will shoot your shopping down and you can shoot all my tins---Automatic Lexical Acquisition from the CHILDES Database','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0606','A Cognitive Model for the Representation and Acquisition of Verb Selectional Preferences','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0607','ISA meets Lara: An incremental word space model for cognitively plausible simulations of semantic learning','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0608','Simulating the acquisition of object names','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0609','Rethinking the syntactic burst in young children','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0610','The Topology of Synonymy and Homonymy Networks','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0611','The Benefits of Errors: Learning an OT Grammar with a Structured Candidate Set','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0612','Learning to interpret novel noun-noun compounds: evidence from a category learning experiment','Workshop on Cognitive Aspects of Computational Language Acquisition',2007),('W07-0701','Using Dependency Order Templates to Improve Generality in Translation','Workshop on Statistical Machine Translation',2007),('W07-0702','CCG Supertags in Factored Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0703','Integration of an Arabic Transliteration Module into a Statistical Machine Translation System','Workshop on Statistical Machine Translation',2007),('W07-0704','Exploring Different Representational Units in English-to-Turkish Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0705','Can We Translate Letters?','Workshop on Statistical Machine Translation',2007),('W07-0706','A Dependency Treelet String Correspondence Model for Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0707','Word Error Rates: Decomposition over POS classes and Applications for Error Analysis','Workshop on Statistical Machine Translation',2007),('W07-0708','Speech-Input Multi-Target Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0709','Meta-Structure Transformation Model for Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0710','Training Non-Parametric Features for Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0711','Using Word-Dependent Transition Models in HMM-Based Word Alignment for Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0712','Efficient Handling of N-gram Language Models for Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0713','Human Evaluation of Machine Translation Through Binary System Comparisons','Workshop on Statistical Machine Translation',2007),('W07-0714','Labelled Dependencies in Machine Translation Evaluation','Workshop on Statistical Machine Translation',2007),('W07-0715','An Iteratively-Trained Segmentation-Free Phrase Translation Model for Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0716','Using Paraphrases for Parameter Tuning in Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0717','Mixture-Model Adaptation for SMT','Workshop on Statistical Machine Translation',2007),('W07-0718','(Meta-) Evaluation of Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0719','Context-aware Discriminative Phrase Selection for Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0720','Ngram-Based Statistical Machine Translation Enhanced with Multiple Weighted Reordering Hypotheses','Workshop on Statistical Machine Translation',2007),('W07-0721','Analysis of Statistical and Morphological Classes to Generate Weigthed Reordering Hypotheses on a Statistical Machine Translation System','Workshop on Statistical Machine Translation',2007),('W07-0722','Domain Adaptation in Statistical Machine Translation with Mixture Modelling','Workshop on Statistical Machine Translation',2007),('W07-0723','Getting to Know Moses: Initial Experiments on German-English Factored Translation','Workshop on Statistical Machine Translation',2007),('W07-0724','NRC\\'s PORTAGE System for WMT 2007','Workshop on Statistical Machine Translation',2007),('W07-0725','Building a Statistical Machine Translation System for French Using the Europarl Corpus','Workshop on Statistical Machine Translation',2007),('W07-0726','Multi-Engine Machine Translation with an Open-Source SMT Decoder','Workshop on Statistical Machine Translation',2007),('W07-0727','The ISL Phrase-Based MT System for the 2007 ACL Workshop on Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0728','Rule-Based Translation with Statistical Phrase-Based Post-Editing','Workshop on Statistical Machine Translation',2007),('W07-0729','The Noisier Channel: Translation from Morphologically Complex Languages','Workshop on Statistical Machine Translation',2007),('W07-0730','UCB System Description for the WMT 2007 Shared Task','Workshop on Statistical Machine Translation',2007),('W07-0731','The Syntax Augmented MT (SAMT) System at the Shared Task for the 2007 ACL Workshop on Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0732','Statistical Post-Editing on SYSTRAN\\'s Rule-Based Translation System','Workshop on Statistical Machine Translation',2007),('W07-0733','Experiments in Domain Adaptation for Statistical Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0734','METEOR: An Automatic Metric for MT Evaluation with High Levels of Correlation with Human Judgments','Workshop on Statistical Machine Translation',2007),('W07-0735','English-to-Czech Factored Machine Translation','Workshop on Statistical Machine Translation',2007),('W07-0736','Sentence Level Machine Translation Evaluation as a Ranking','Workshop on Statistical Machine Translation',2007),('W07-0737','Localization of Difficult-to-Translate Phrases','Workshop on Statistical Machine Translation',2007),('W07-0738','Linguistic Features for Automatic Evaluation of Heterogenous MT Systems','Workshop on Statistical Machine Translation',2007),('W07-0801','ElixirFM -- Implementation of Functional Arabic Morphology','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0802','Implementation of the Arabic Numerals and their Syntax in GF','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0803','Person Name Entity Recognition for Arabic','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0804','Arabic Cross-Document Person Name Normalization','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0805','Syllable-Based Speech Recognition for Amharic','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0806','Adapting a Medical speech to speech translation system (MedSLT) to Arabic','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0807','Finding Variants of Out-of-Vocabulary Words in Arabic','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0808','Can You Tag the Modal? You Should.','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0809','Arabic Tokenization System','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0810','Arabic to French Sentence Alignment: Exploration of A Cross-language Information Retrieval Approach','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0811','An Arabic Slot Grammar Parser','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0812','Improved Arabic Base Phrase Chunking with a new enriched POS tag set','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0813','Smoothing a Lexicon-based POS Tagger for Arabic and Hebrew','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0814','An Amharic Stemmer : Reducing Words to their Citation Forms','Workshop on Computational Approaches to Semitic Languages: Common Issues and Resources',2007),('W07-0901','Naming the Past: Named Entity and Animacy Recognition in 19th Century Swedish Literature','LaTeCH',2007),('W07-0902','Viterbi Based Alignment between Text Images and their Transcripts','LaTeCH',2007),('W07-0903','Retrieving Lost Information from Textual Databases: Rediscovering Expeditions from an Animal Specimen Database','LaTeCH',2007),('W07-0904','Concept Disambiguation for Improved Subject Access Using Multiple Knowledge Sources','LaTeCH',2007),('W07-0905','The Latin Dependency Treebank in a Cultural Heritage Digital Library','LaTeCH',2007),('W07-0906','Cultural Heritage Digital Resources: From Extraction to Querying','LaTeCH',2007),('W07-0907','Dynamic Path Prediction and Recommendation in a Museum Environment','LaTeCH',2007),('W07-0908','Anchoring Dutch Cultural Heritage Thesauri to WordNet: Two Case Studies','LaTeCH',2007),('W07-0909','Cross Lingual and Semantic Retrieval for Cultural Heritage Appreciation','LaTeCH',2007),('W07-0910','Deriving a Domain Specific Test Collection from a Query Log','LaTeCH',2007),('W07-0911','Multilingual Search for Cultural Heritage Archives via Combining Multiple Translation Resources','LaTeCH',2007),('W07-1001','Syntactic complexity measures for detecting Mild Cognitive Impairment','Workshop:  Biological translational and clinical language processing',2007),('W07-1002','Determining the Syntactic Structure of Medical Terms in Clinical Notes','Workshop:  Biological translational and clinical language processing',2007),('W07-1003','The Role of Roles in Classifying Annotated Biomedical Text','Workshop:  Biological translational and clinical language processing',2007),('W07-1004','On the unification of syntactic annotations under the Stanford dependency scheme: A case study on BioInfer and GENIA','Workshop:  Biological translational and clinical language processing',2007),('W07-1005','An Unsupervised Method for Extracting Domain-specific Affixes in Biological Literature','Workshop:  Biological translational and clinical language processing',2007),('W07-1006','Combining multiple evidence for gene symbol disambiguation','Workshop:  Biological translational and clinical language processing',2007),('W07-1007','Mining a Lexicon of Technical Terms and Lay Equivalents','Workshop:  Biological translational and clinical language processing',2007),('W07-1008','Annotation of Chemical Named Entities','Workshop:  Biological translational and clinical language processing',2007),('W07-1009','Recognising Nested Named Entities in Biomedical Text','Workshop:  Biological translational and clinical language processing',2007),('W07-1010','Exploring the Efficacy of Caption Search for Bioscience Journal Search Interfaces','Workshop:  Biological translational and clinical language processing',2007),('W07-1011','ConText: An Algorithm for Identifying Contextual Features from Clinical Text','Workshop:  Biological translational and clinical language processing',2007),('W07-1012','BioNoculars: Extracting Protein-Protein Interactions from Biomedical Text','Workshop:  Biological translational and clinical language processing',2007),('W07-1013','A shared task involving multi-label classification of clinical free text','Workshop:  Biological translational and clinical language processing',2007),('W07-1014','From indexing the biomedical literature to coding clinical text: experience with MTI and machine learning approaches','Workshop:  Biological translational and clinical language processing',2007),('W07-1015','Automatically Restructuring Practice Guidelines using the GEM DTD','Workshop:  Biological translational and clinical language processing',2007),('W07-1016','A Study of Structured Clinical Abstracts and the Semantic Classification of Sentences','Workshop:  Biological translational and clinical language processing',2007),('W07-1017','Automatic Code Assignment to Medical Text','Workshop:  Biological translational and clinical language processing',2007),('W07-1018','Interpreting comparative constructions in biomedical text','Workshop:  Biological translational and clinical language processing',2007),('W07-1019','The Extraction of Enriched Protein-Protein Interactions from Biomedical Text','Workshop:  Biological translational and clinical language processing',2007),('W07-1020','What\\'s in a gene name? Automated refinement of gene name dictionaries','Workshop:  Biological translational and clinical language processing',2007),('W07-1021','Exploring the Use of NLP in the Disclosure of Electronic Patient Records','Workshop:  Biological translational and clinical language processing',2007),('W07-1022','BaseNPs that contain gene names: domain specificity and genericity','Workshop:  Biological translational and clinical language processing',2007),('W07-1023','Challenges for extracting biomedical knowledge from full text','Workshop:  Biological translational and clinical language processing',2007),('W07-1024','Adaptation of POS Tagging for Multiple BioMedical Domains','Workshop:  Biological translational and clinical language processing',2007),('W07-1025','Information Extraction from Patients\\' Free Form Documentation','Workshop:  Biological translational and clinical language processing',2007),('W07-1026','Automatic Indexing of Specialized Documents: Using Generic vs. Domain-Specific Document Representations','Workshop:  Biological translational and clinical language processing',2007),('W07-1027','Developing Feature Types for Classifying Clinical Notes','Workshop:  Biological translational and clinical language processing',2007),('W07-1028','Quantitative Data on Referring Expressions in Biomedical Abstracts','Workshop:  Biological translational and clinical language processing',2007),('W07-1029','Discovering contradicting protein-protein interactions in text','Workshop:  Biological translational and clinical language processing',2007),('W07-1030','Marking time in developmental biology','Workshop:  Biological translational and clinical language processing',2007),('W07-1031','Evaluating and combining and biomedical named entity recognition systems','Workshop:  Biological translational and clinical language processing',2007),('W07-1032','Unsupervised Learning of the Morpho-Semantic Relationship in MEDLINE','Workshop:  Biological translational and clinical language processing',2007),('W07-1033','Reranking for Biomedical Named-Entity Recognition','Workshop:  Biological translational and clinical language processing',2007),('W07-1101','A Measure of Syntactic Flexibility for Automatically Identifying Multiword Expressions in Corpora','MWE',2007),('W07-1102','Distinguishing Subtypes of Multiword Expressions Using Linguistically-Motivated Statistical Measures','MWE',2007),('W07-1103','Design and Implementation of a Lexicon of Dutch Multiword Expressions','MWE',2007),('W07-1104','Semantics-based Multiword Expression Extraction','MWE',2007),('W07-1105','Spanish Adverbial Frozen Expressions','MWE',2007),('W07-1106','Pulling their Weight: Exploiting Syntactic Forms for the Automatic Identification of Idiomatic Expressions in Context','MWE',2007),('W07-1107','Pauses as an Indicator of Psycholinguistically Valid Multi-Word Expressions (MWEs)?','MWE',2007),('W07-1108','Co-occurrence Contexts for Noun Compound Interpretation','MWE',2007),('W07-1109','Learning Dependency Relations of Japanese Compound Functional Expressions','MWE',2007),('W07-1110','Semantic Labeling of Compound Nominalization in Chinese','MWE',2007),('W07-1201','Multi-Component Tree Adjoining Grammars Dependency Graph Models and Linguistic Analyses','Workshop on Deep Linguistic Processing',2007),('W07-1202','Perceptron Training for a Wide-Coverage Lexicalized-Grammar Parser','Workshop on Deep Linguistic Processing',2007),('W07-1203','Filling Statistics with Linguistics -- Property Design for the Disambiguation of German LFG Parses','Workshop on Deep Linguistic Processing',2007),('W07-1204','Exploiting Semantic Information for HPSG Parse Selection','Workshop on Deep Linguistic Processing',2007),('W07-1205','Deep Grammars in a Tree Labeling Approach to Syntax-based Statistical Machine Translation','Workshop on Deep Linguistic Processing',2007),('W07-1206','Question Answering based on Semantic Roles','Workshop on Deep Linguistic Processing',2007),('W07-1207','Deep Linguistic Processing for Spoken Dialogue Systems','Workshop on Deep Linguistic Processing',2007),('W07-1208','Self- or Pre-Tuning? Deep Linguistic Processing of Language Variants','Workshop on Deep Linguistic Processing',2007),('W07-1209','Pruning the Search Space of a Hand-Crafted Parsing System with a Probabilistic Parser','Workshop on Deep Linguistic Processing',2007),('W07-1210','Semantic Composition with (Robust) Minimal Recursion Semantics','Workshop on Deep Linguistic Processing',2007),('W07-1211','A Task-based Comparison of Information Extraction Pattern Models','Workshop on Deep Linguistic Processing',2007),('W07-1212','Creating a Systemic Functional Grammar Corpus from the Penn Treebank','Workshop on Deep Linguistic Processing',2007),('W07-1213','Verb Valency Semantic Representation for Deep Linguistic Processing','Workshop on Deep Linguistic Processing',2007),('W07-1214','The Spanish Resource Grammar: Pre-processing Strategy and Lexical Acquisition','Workshop on Deep Linguistic Processing',2007),('W07-1215','Extracting a Verb Lexicon for Deep Parsing from FrameNet','Workshop on Deep Linguistic Processing',2007),('W07-1216','Fips A ``Deep\\'\\' Linguistic Multilingual Parser','Workshop on Deep Linguistic Processing',2007),('W07-1217','Partial Parse Selection for Robust Deep Processing','Workshop on Deep Linguistic Processing',2007),('W07-1218','Validation and Regression Testing for a Cross-linguistic Grammar Resource','Workshop on Deep Linguistic Processing',2007),('W07-1219','Local Ambiguity Packing and Discontinuity in German','Workshop on Deep Linguistic Processing',2007),('W07-1220','The Corpus and the Lexicon: Standardising Deep Lexical Acquisition Evaluation','Workshop on Deep Linguistic Processing',2007),('W07-1301','Computing and Historical Phonology','SIGMORPHON',2007),('W07-1302','Word Similarity Metrics and Multilateral Comparison','SIGMORPHON',2007),('W07-1303','Bayesian Identification of Cognates and Correspondences','SIGMORPHON',2007),('W07-1304','Testing Cladistics on Dialect Networks and Phyla (Gallo-Romance Vowels Southern Italo-Romance Diasystems and Mayan Languages)','SIGMORPHON',2007),('W07-1305','The Relative Divergence of Dutch Dialect Pronunciations from their Common Source: An Exploratory Study','SIGMORPHON',2007),('W07-1306','Can Corpus Based Measures be Used for Comparative Study of Languages?','SIGMORPHON',2007),('W07-1307','Inducing Sound Segment Differences Using Pair Hidden Markov Models','SIGMORPHON',2007),('W07-1308','Phonological Reconstruction of a Dead Language Using the Gradual Learning Algorithm','SIGMORPHON',2007),('W07-1309','Evolution Optimization and Language Change: The Case of Bengali Verb Inflections','SIGMORPHON',2007),('W07-1310','On the Geolinguistic Change in Northern France between 1300 and 1900: A Dialectometrical Inquiry','SIGMORPHON',2007),('W07-1311','Visualizing the Evaluation of Distance Measures','SIGMORPHON',2007),('W07-1312','Data Nonlinearity in Exploratory Multivariate Analysis of Language Corpora','SIGMORPHON',2007),('W07-1313','Emergence of Community Structures in Vowel Inventories: An Analysis Based on Complex Networks','SIGMORPHON',2007),('W07-1314','Cognate Identification and Alignment Using Practical Orthographies','SIGMORPHON',2007),('W07-1315','ParaMor: Minimally Supervised Induction of Paradigm Structure and Morphological Analysis','SIGMORPHON',2007),('W07-1316','Dynamic Correspondences: An Object-Oriented Approach to Tracking Sound Reconstructions','SIGMORPHON',2007),('W07-1317','Creating a Comparative Dictionary of Totonac-Tepehua','SIGMORPHON',2007),('W07-1401','The Third PASCAL Recognizing Textual Entailment Challenge','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1402','A Semantic Approach To Textual Entailment: System Evaluation and Task Analysis','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1403','Precision-focused Textual Inference','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1404','COGEX at RTE 3','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1405','A Corpus of Fine-Grained Entailment Relations','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1406','Recognizing Textual Entailment Using Sentence Similarity based on Dependency Tree Skeletons','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1407','Learning Textual Entailment using SVMs and String Similarity Measures','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1408','Entailment and Anaphora Resolution in RTE3','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1409','On the Role of Lexical and World Knowledge in RTE3','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1410','Machine Learning with Semantic-Based Distances Between Sentences for Textual Entailment','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1411','A Perspective-Based Approach for Solving Textual Entailment Recognition','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1412','Shallow Semantic in Fast Textual Entailment Rule Learners','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1413','Combining Lexical-Syntactic Information with Machine Learning for Recognizing Textual Entailment','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1414','Dependency-based paraphrasing for recognizing textual entailment','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1415','Experiments of UNED at the Third Recognising Textual Entailment Challenge','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1416','Textual Entailment Using Univariate Density Model and Maximizing Discriminant Function','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1417','The Role of Sentence Structure in Recognizing Textual Entailment','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1418','Semantic and Logical Inference Model for Textual Entailment','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1419','SVO triple based Latent Semantic Analysis for recognising textual entailment','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1420','Textual Entailment Through Extended Lexical Overlap and Lexico-Semantic Matching','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1421','Hypothesis Transformation and Semantic Variability Rules Used in Recognizing Textual Entailment','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1422','Semantic Inference at the Lexical-Syntactic Level for Textual Entailment Recognition','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1423','An Extensible Probabilistic Transformation-based Approach to the Third Recognizing Textual Entailment Challenge','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1424','Mutaphrase: Paraphrasing with FrameNet','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1425','A Compositional Approach toward Dynamic Phrasal Thesaurus','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1426','Machine Learning Based Semantic Inference: Experiments and Observations at RTE-3','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1427','Learning Alignments and Leveraging Natural Logic','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1428','A Discourse Commitment-Based Framework for Recognizing Textual Entailment','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1429','Biology Based Alignments of Paraphrases for Sentence Compression','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1430','A first order semantic approach to adjectival inference','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1431','Natural Logic for Textual Inference','Workshop on Textual Entailment and Paraphrasing',2007),('W07-1501','GrAF: A Graph-based Format for Linguistic Annotations','Linguistic Annotation Workshop',2007),('W07-1502','Efficient Annotation with the Jena ANnotation Environment (JANE)','Linguistic Annotation Workshop',2007),('W07-1503','Mining Syntactically Annotated Corpora with XQuery','Linguistic Annotation Workshop',2007),('W07-1504','Assocating Facial Displays with Syntactic Constituents for Generation','Linguistic Annotation Workshop',2007),('W07-1505','An Annotation Type System for a Data-Driven NLP Pipeline','Linguistic Annotation Workshop',2007),('W07-1506','Discontinuity Revisited: An Improved Conversion to Context-Free Representations','Linguistic Annotation Workshop',2007),('W07-1507','Usage of XSL Stylesheets for the Annotation of the S\\'ami Language Corpora.','Linguistic Annotation Workshop',2007),('W07-1508','Criteria for the Manual Grouping of Verb Senses','Linguistic Annotation Workshop',2007),('W07-1509','Semi-Automated Named Entity Annotation','Linguistic Annotation Workshop',2007),('W07-1510','Querying Multimodal Annotation: A Concordancer for GeM','Linguistic Annotation Workshop',2007),('W07-1511','Annotating Chinese Collocations with Multi Information','Linguistic Annotation Workshop',2007),('W07-1512','Computing Translation Units and Quantifying Parallelism in Parallel Dependency Treebanks','Linguistic Annotation Workshop',2007),('W07-1513','Adding Semantic Role Annotation to a Corpus of Written Dutch','Linguistic Annotation Workshop',2007),('W07-1514','A Search Tool for Parallel Treebanks','Linguistic Annotation Workshop',2007),('W07-1515','Annotating Expressions of Appraisal in English','Linguistic Annotation Workshop',2007),('W07-1516','Active Learning for Part-of-Speech Tagging: Accelerating Corpus Annotation','Linguistic Annotation Workshop',2007),('W07-1517','Combining Independent Syntactic and Semantic Annotation Schemes','Linguistic Annotation Workshop',2007),('W07-1518','XARA: An XML- and Rule-based Semantic Role Labeler','Linguistic Annotation Workshop',2007),('W07-1519','ITU Treebank Annotation Tool','Linguistic Annotation Workshop',2007),('W07-1520','Two Tools for Creating and Visualizing Sub-sentential Alignments of Parallel Text','Linguistic Annotation Workshop',2007),('W07-1521','Building Chinese Sense Annotated Corpus with the Help of Software Tools','Linguistic Annotation Workshop',2007),('W07-1522','Annotating a Japanese Text Corpus with Predicate-Argument and Coreference Relations','Linguistic Annotation Workshop',2007),('W07-1523','Web-based Annotation of Anaphoric Relations and Lexical Chains','Linguistic Annotation Workshop',2007),('W07-1524','Standoff Coordination for Multi-Tool Annotation in a Dialogue Corpus','Linguistic Annotation Workshop',2007),('W07-1525','PoCoS - Potsdam Coreference Scheme','Linguistic Annotation Workshop',2007),('W07-1526','Multiple-step Treebank Conversion: From Dependency to Penn Format','Linguistic Annotation Workshop',2007),('W07-1527','Experiments with an Annotation Scheme for a Knowledge-rich Noun Phrase Interpretation System','Linguistic Annotation Workshop',2007),('W07-1528','IGT-XML: An XML Format for Interlinearized Glossed Text','Linguistic Annotation Workshop',2007),('W07-1529','Shared Corpora Working Group Report','Linguistic Annotation Workshop',2007),('W07-1530','Discourse Annotation Working Group Report','Linguistic Annotation Workshop',2007),('W07-1601','A Corpus-Based Analysis of Geometric Constraints on Projective Prepositions','Workshop on Prepositions',2007),('W07-1602','Landmark Classification for Route Directions','Workshop on Prepositions',2007),('W07-1603','PrepLex: A Lexicon of French Prepositions for Parsing','Workshop on Prepositions',2007),('W07-1604','Detection of Grammatical Errors Involving Prepositions','Workshop on Prepositions',2007),('W07-1605','Measuring the Productivity of Determinerless PPs','Workshop on Prepositions',2007),('W07-1606','Inferring the Semantics of Temporal Prepositions in Italian','Workshop on Prepositions',2007),('W07-1607','Automatically Acquiring Models of Preposition Use','Workshop on Prepositions',2007),('W07-1608','Simple Preposition Correspondence: A Problem in English to Indian Language Machine Translation','Workshop on Prepositions',2007),('W07-1701','Slavic Information Extraction and Partial Parsing','Workshop on Balto-Slavonic Natural Language Processing',2007);", "Create an Adaptable Relation Extraction System','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0604','Mining the Biomedical Literature for Genic Information','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0605','Accelerating the Annotation of Sparse Named Entities by Dynamic Sentence Selection','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0606','The BioScope corpus: annotation for negation uncertainty and their scope in biomedical texts','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0607','Recognizing Speculative Language in Biomedical Research Articles: A Linguistically Motivated Perspective','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0608','Cascaded Classifiers for Confidence-Based Chemical Named Entity Recognition','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0609','How to Make the Most of NE Dictionaries in Statistical NER','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0610','Species Disambiguation for Biomedical Term Identification','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0611','Knowledge Sources for Word Sense Disambiguation of Biomedical Text','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0612','Automatic inference of indexing rules for MEDLINE','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0613','Prediction of Protein Sub-cellular Localization using Information from Texts and Sequences.','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0614','A Pilot Annotation to Investigate Discourse Connectivity in Biomedical Text','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0615','Conditional Random Fields and Support Vector Machines for Disorder Named Entity Recognition in Clinical Texts','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0616','Using Natural Language Processing to Classify Suicide Notes','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0617','Extracting Protein-Protein Interaction based on Discriminative Training of the Hidden Vector State Model','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0618','A preliminary approach to extract drugs by combining UMLS resources and USAN naming conventions','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0619','Mapping Clinical Notes to Medical Terminologies at Point of Care','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0620','An Approach to Reducing Annotation Costs for BioNLP','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0621','Temporal Annotation of Clinical Text','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0622','CBR-Tagger: a case-based reasoning approach to the gene/protein mention problem','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0623','Textual Information for Predicting Functional Properties of the Genes','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0624','Determining causal and non-causal relationships in biomedical text by classifying verbs using a Naive Bayesian Classifier','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0625','Statistical Term Profiling for Query Pattern Mining','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0626','Using Language Models to Identify Language Impairment in Spanish-English Bilingual Children','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0627','Raising the Compatibility of Heterogeneous Annotations: A Case Study on','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0628','Adaptive Information Extraction for Complex Biomedical Tasks','Proceedings of the Workshop on Current Trends in Biomedical Natural Language Processing',2008),('W08-0701','Invited talk: Phonological Models in Automatic Speech Recognition','Proceedings of the Tenth Meeting of ACL Special Interest Group on Computational Morphology and Phonology',2008),('W08-0702','Bayesian Learning over Conflicting Data: Predictions for Language Change','Proceedings of the Tenth Meeting of ACL Special Interest Group on Computational Morphology and Phonology',2008),('W08-0703','A Bayesian Model of Natural Language Phonology: Generating Alternations from Underlying Forms','Proceedings of the Tenth Meeting of ACL Special Interest Group on Computational Morphology and Phonology',2008),('W08-0704','Unsupervised Word Segmentation for Sesotho Using Adaptor Grammars','Proceedings of the Tenth Meeting of ACL Special Interest Group on Computational Morphology and Phonology',2008),('W08-0705','Invited talk: Counting Rankings','Proceedings of the Tenth Meeting of ACL Special Interest Group on Computational Morphology and Phonology',2008),('W08-0706','Three Correlates of the Typological Frequency of Quantity-Insensitive Stress Systems','Proceedings of the Tenth Meeting of ACL Special Interest Group on Computational Morphology and Phonology',2008),('W08-0707','Phonotactic Probability and the Maori Passive: A Computational Approach','Proceedings of the Tenth Meeting of ACL Special Interest Group on Computational Morphology and Phonology',2008),('W08-0708','Evaluating an Agglutinative Segmentation Model for ParaMor','Proceedings of the Tenth Meeting of ACL Special Interest Group on Computational Morphology and Phonology',2008),('W08-0801','A Multimodal Home Entertainment Interface via a Mobile Device','Proceedings of the ACL-08: HLT Workshop on Mobile Language Processing',2008),('W08-0802','A Wearable Headset Speech-to-Speech Translation System','Proceedings of the ACL-08: HLT Workshop on Mobile Language Processing',2008),('W08-0803','Information extraction using finite state automata and syllable n-grams in a mobile environment','Proceedings of the ACL-08: HLT Workshop on Mobile Language Processing',2008),('W08-0804','Small Statistical Models by Random Feature Mixing','Proceedings of the ACL-08: HLT Workshop on Mobile Language Processing',2008),('W08-0805','Mixture Pruning and Roughening for Scalable Acoustic Models','Proceedings of the ACL-08: HLT Workshop on Mobile Language Processing',2008),('W08-0806','Assistive Mobile Communication Support','Proceedings of the ACL-08: HLT Workshop on Mobile Language Processing',2008),('W08-0807','A Distributed Database for Mobile NLP Applications','Proceedings of the ACL-08: HLT Workshop on Mobile Language Processing',2008),('W08-0901','Developing Online ICALL Resources for Russian','BEA',2008),('W08-0902','Classification Errors in a Domain-Independent Assessment System','BEA',2008),('W08-0903','King Alfred: A Translation Environment for Learners of Anglo-Saxon English','BEA',2008),('W08-0904','Recognizing Noisy Romanized Japanese Words in Learner English','BEA',2008),('W08-0905','An Annotated Corpus Outside Its Original Context: A Corpus-Based Exercise Book','BEA',2008),('W08-0906','Answering Learnersâ€™ Questions by Retrieving Question Paraphrases from Social Q&A Sites','BEA',2008),('W08-0907','Learner Characteristics and Feedback in Tutorial Dialogue','BEA',2008),('W08-0908','Automatic Identification of Discourse Moves in Scientific Article Introductions','BEA',2008),('W08-0909','An Analysis of Statistical Models and Features for Reading Difficulty Prediction','BEA',2008),('W08-0910','Retrieval of Reading Materials for Vocabulary and Reading Practice','BEA',2008),('W08-0911','Real Time Web Text Classification and Analysis of Reading Difficulty','BEA',2008),('W08-0912','Towards Automatic Scoring of a Test of Spoken Language with Heterogeneous Task Types','BEA',2008),('W08-0913','Diagnosing Meaning Errors in Short Answers to Reading Comprehension Questions','BEA',2008),('W08-1001','Lexicalised Parsing of German V2','Proceedings of the Workshop on Parsing German',2008),('W08-1002','Parse Selection with a German HPSG Grammar','Proceedings of the Workshop on Parsing German',2008),('W08-1003','Part-of-Speech Tagging with a Symbolic Full Parser: Using the TIGER Treebank to Evaluate Fips','Proceedings of the Workshop on Parsing German',2008),('W08-1004','Revisiting the Impact of Different Annotation Schemes on PCFG Parsing: A Grammatical Dependency Evaluation','Proceedings of the Workshop on Parsing German',2008),('W08-1005','Parsing German with Latent Variable Grammars','Proceedings of the Workshop on Parsing German',2008),('W08-1006','Parsing Three German Treebanks: Lexicalized and Unlexicalized Baselines','Proceedings of the Workshop on Parsing German',2008),('W08-1007','A Dependency-Driven Parser for German Dependency and Constituency Representations','Proceedings of the Workshop on Parsing German',2008),('W08-1008','The PaGe 2008 Shared Task on Parsing German','Proceedings of the Workshop on Parsing German',2008),('W08-1101','Prominence and Phrasing in Spoken Discourse Processing','INLG',2008),('W08-1102','Language Embodiment and Social Intelligence','INLG',2008),('W08-1103','Generating Textual Summaries of Bar Charts','INLG',2008),('W08-1104','Using Spatial Reference Frames to Generate Grounded Textual Summaries of Georeferenced Data','INLG',2008),('W08-1105','Dependency Tree Based Sentence Compression','INLG',2008),('W08-1106','Extractive vs. NLG-based Abstractive Summarization of Evaluative Text: The Effect of Corpus Controversiality','INLG',2008),('W08-1107','Referring Expressions as Formulas of Description Logic','INLG',2008),('W08-1108','Attribute Selection for Referring Expression Generation: New Algorithms and Evaluation Methods','INLG',2008),('W08-1109','The Use of Spatial Relations in Referring Expression Generation','INLG',2008),('W08-1110','Using Tactical NLG to Induce Affective States: Empirical Investigations','INLG',2008),('W08-1111','Practical Grammar-Based NLG from Examples','INLG',2008),('W08-1112','Accurate and Robust LFG-Based Generation for Chinese','INLG',2008),('W08-1113','Automated Metrics That Agree With Human Judgements On Generated Output for an Embodied Conversational Agent','INLG',2008),('W08-1114','Simple but  effective feedback generation  to tutor abstract  problem solving','INLG',2008),('W08-1115','What\\'s In a Message? Interpreting Geo-referenced Data for the Visually-impaired','INLG',2008),('W08-1116','Evolving Questions in Text Planning','INLG',2008),('W08-1117','The Effect of Dialogue System Output Style Variation on Users\\' Evaluation Judgments and Input Style','INLG',2008),('W08-1118','Evaluating an Ontology-Driven WYSIWYM Interface','INLG',2008),('W08-1119','The Importance of Narrative and Other Lessons from an Evaluation of an NLG System that Summarises Clinical Data','INLG',2008),('W08-1120','Building a Large-scale Commercial NLG System for an EMR','INLG',2008),('W08-1121','Degree of Abstraction in Referring Expression Generation and its Relation with the Construction of the Contrast Set','INLG',2008),('W08-1122','Parser-Based Retraining for Domain Adaptation of Probabilistic Generators','INLG',2008),('W08-1123','Creation of a New Domain and Evaluation of Comparison Generation in a Natural Language Generation System','INLG',2008),('W08-1124','Generating Baseball Summaries from Multiple Perspectives by Reordering Content','INLG',2008),('W08-1125','A Dynamic Programming Approach to Document Length Constraints','INLG',2008),('W08-1126','REG Challenge Preface','INLG',2008),('W08-1127','The GREC Challenge 2008: Overview and Evaluation Results','INLG',2008),('W08-1128','IS-G: The Comparison of Different Learning Techniques for the Selection of the Main Subject References','INLG',2008),('W08-1129','CNTS: Memory-Based Learning of Generating Repeated References','INLG',2008),('W08-1130','OSU-2: Generating Referring Expressions with a Maximum Entropy Classifier','INLG',2008),('W08-1131','The TUNA Challenge 2008: Overview and Evaluation Results','INLG',2008),('W08-1132','The Fingerprint of Human Referring Expressions and their Surface Realization with Graph Transducers (IS-FP IS-GT IS-FP-GT)}','INLG',2008),('W08-1133','Referring Expression Generation Using Speaker-based Attribute Selection and Trainable Realization (ATTR)','INLG',2008),('W08-1134','NIL-UCM: Most-Frequent-Value-First Attribute Selection and Best-Scoring-Choice Realization','INLG',2008),('W08-1135','USP-EACH Frequency-based Greedy Attribute Selection for Referring Expressions Generation','INLG',2008),('W08-1136','Referring Expression Generation Challenge 2008 DIT System Descriptions (DIT-FBI DIT-TVAS DIT-CBSR DIT-RBR DIT-FBI-CBSR DIT-TVAS-RBR)','INLG',2008),('W08-1137','OSU-GP: Attribute Selection Using Genetic Programming','INLG',2008),('W08-1138','GRAPH: The Costs of Redundancy in Referring Expressions','INLG',2008),('W08-1139','JU-PTBSGRE: GRE Using Prefix Tree Based Structure','INLG',2008),('W08-1140','From TUNA Attribute Sets to Portuguese Text: a First Report','INLG',2008),('W08-1201','Invited Talk: The Relevance of a Cognitive Model of the Mental Lexicon to Automatic Word Sense Disambiguation','Coling 2008: Proceedings of the 2nd workshop on Information Retrieval for Question Answering',2008),('W08-1202','Analyzing Disagreements','Coling 2008: Proceedings of the 2nd workshop on Information Retrieval for Question Answering',2008),('W08-1203','Exploiting &lsquo;", "Create Large-Scale Annotated Texts','STEP',2008),('W08-2231','A Resource-Poor Approach for Linking Ontology Classes to Wikipedia Articles','STEP',2008),('W08-2232','Top-Down Cohesion Segmentation in Summarization','STEP',2008),('W09-0101','Machine Translation and its Philosophical Accounts','Proceedings of the EACL 2009 Workshop on the Interaction between Linguistics and Computational Linguistics: Virtuous Vicious or Vacuous?',2009),('W09-0102','The Annotation Conundrum','Proceedings of the EACL 2009 Workshop on the Interaction between Linguistics and Computational Linguistics: Virtuous Vicious or Vacuous?',2009),('W09-0103','How the Statistical Revolution Changes (Computational) Linguistics','Proceedings of the EACL 2009 Workshop on the Interaction between Linguistics and Computational Linguistics: Virtuous Vicious or Vacuous?',2009),('W09-0104','Computational Linguistics and Generative Linguistics: The Triumph of Hope over Experience','Proceedings of the EACL 2009 Workshop on the Interaction between Linguistics and Computational Linguistics: Virtuous Vicious or Vacuous?',2009),('W09-0105','Linguistics in Computational Linguistics: Observations and Predictions','Proceedings of the EACL 2009 Workshop on the Interaction between Linguistics and Computational Linguistics: Virtuous Vicious or Vacuous?',2009),('W09-0106','Linguistically Na&iuml;", "Create Voice XML as Demonstrated on the iPhone','SIGDIAL',2009),('W09-3923','Dialog System for Mixed Initiative One-Turn Address Entry and Error Recovery','SIGDIAL',2009),('W09-3924','Leveraging POMDPs Trained with User Simulations and Rule-based Dialogue Management in a Spoken Dialogue System','SIGDIAL',2009),('W09-3925','Speeding Up the Design of Dialogue Applications by Using Database Contents and Structure Information','SIGDIAL',2009),('W09-3926','Modeling User Satisfaction with Hidden Markov Models','SIGDIAL',2009),('W09-3927','Discourse Structure and Performance Analysis: Beyond the Correlation','SIGDIAL',2009),('W09-3928','The Role of Interactivity in Human-Machine Conversation for Automatic Word Acquisition','SIGDIAL',2009),('W09-3929','Clarification Potential of Instructions','SIGDIAL',2009),('W09-3930','What do We Know about Conversation Participants: Experiments on Conversation Entailment','SIGDIAL',2009),('W09-3931','Artificial Companions as Dialogue Agents','SIGDIAL',2009),('W09-3932','Effects of Conversational Agents on Human Communication in Thought-Evoking Multi-Party Dialogues','SIGDIAL',2009),('W09-3933','Models for Multiparty Engagement in Open-World Dialog','SIGDIAL',2009),('W09-3934','Extracting Decisions from Multi-Party Dialogue Using Directed Graphical Models and Semantic Similarity','SIGDIAL',2009),('W09-3935','Learning to Predict Engagement with a Spoken Dialog System in Open-World Settings','SIGDIAL',2009),('W09-3936','Turn-Yielding Cues in Task-Oriented Dialogue','SIGDIAL',2009),('W09-3937','Split Utterances in Dialogue: a Corpus Study','SIGDIAL',2009),('W09-3938','k-Nearest Neighbor Monte-Carlo Control Algorithm for POMDP-Based Dialogue Systems','SIGDIAL',2009),('W09-3939','Comparison of Classification and Ranking Approaches to Pronominal Anaphora Resolution in Czech','SIGDIAL',2009),('W09-3940','Spoken Tutorial Dialogue and the Feeling of Another&rsquo;", "Create an Emotion Lexicon','Proceedings of the NAACL HLT 2010 Workshop on Computational Approaches to Analysis and Generation of Emotion in Text',2010),('W10-0205','A Corpus-based Method for Extracting Paraphrases of Emotion Terms','Proceedings of the NAACL HLT 2010 Workshop on Computational Approaches to Analysis and Generation of Emotion in Text',2010),('W10-0206','A Text-driven Rule-based System for Emotion Cause Detection','Proceedings of the NAACL HLT 2010 Workshop on Computational Approaches to Analysis and Generation of Emotion in Text',2010),('W10-0207','Wishful Thinking - Finding suggestions and &rsquo;", "Create Communication Channel Management Strategies for Diverse Users','Workshop on Speech and Language Processing for Assistive Technologies',2010),('W10-1308','A Multimodal Vocabulary for Augmentative and Alternative Communication from Sound/Image Label Datasets','Workshop on Speech and Language Processing for Assistive Technologies',2010),('W10-1309','Demo Session Abstracts','Workshop on Speech and Language Processing for Assistive Technologies',2010),('W10-1310','State-Transition Interpolation and MAP Adaptation for HMM-based Dysarthric Speech Recognition','Workshop on Speech and Language Processing for Assistive Technologies',2010),('W10-1311','Towards a noisy-channel model of dysarthria in speech recognition','Workshop on Speech and Language Processing for Assistive Technologies',2010),('W10-1312','Collecting a Motion-Capture Corpus of American Sign Language for Data-Driven Generation Research','Workshop on Speech and Language Processing for Assistive Technologies',2010),('W10-1313','Automated Skimming System in Response to Questions for NonVisual Readers','Workshop on Speech and Language Processing for Assistive Technologies',2010),('W10-1401','Statistical Parsing of Morphologically Rich Languages (SPMRL) What How and Whither','Workshop on Statistical Parsing of Morphologically-Rich Languages',2010),('W10-1402','Improving Arabic Dependency Parsing with Lexical and Inflectional Morphological Features','Workshop on Statistical Parsing of Morphologically-Rich Languages',2010),('W10-1403','Two Methods to Incorporate &rsquo;", "create Dialect Tunisian corpora and adapt language model','HyTra',2013),('W13-2814','A Hybrid Word Alignment Model for Phrase-Based Statistical Machine Translation','HyTra',2013),('W13-2815','Lexical Selection for Hybrid MT with Sequence Labeling','HyTra',2013),('W13-2816','Two Approaches to Correcting Homophone Confusions in a Hybrid Machine Translation System','HyTra',2013),('W13-2817','Uses of Monolingual In-Domain Corpora for Cross-Domain Adaptation with Hybrid MT Approaches','HyTra',2013),('W13-2818','Language-independent hybrid MT with PRESEMT','HyTra',2013),('W13-2901','Sentence Simplification as Tree Transduction','Workshop on Predicting and Improving Text Readability for target reader populations',2013),('W13-2902','Building a German/Simple German Parallel Corpus for Automatic Text Simplification','Workshop on Predicting and Improving Text Readability for target reader populations',2013),('W13-2903','The C-Score â€“ Proposing a Reading Comprehension Metrics as a Common Evaluation Measure for Text Simplification','Workshop on Predicting and Improving Text Readability for target reader populations',2013),('W13-2904','A Language-Independent Approach to Automatic Text Difficulty Assessment for Second-Language Learners','Workshop on Predicting and Improving Text Readability for target reader populations',2013),('W13-2905','Text Modification for Bulgarian Sign Language Users','Workshop on Predicting and Improving Text Readability for target reader populations',2013),('W13-2906','Modeling Comma Placement in Chinese Text for Better Readability using Linguistic Features and Gaze Information','Workshop on Predicting and Improving Text Readability for target reader populations',2013),('W13-2907','On The Applicability of Readability Models to Web Texts','Workshop on Predicting and Improving Text Readability for target reader populations',2013),('W13-2908','The CW Corpus: A New Resource for Evaluating the Identification of Complex Words','Workshop on Predicting and Improving Text Readability for target reader populations',2013),('W13-2909','A Pilot Study of Readability Prediction with Reading Time','Workshop on Predicting and Improving Text Readability for target reader populations',2013),('W13-3001','Distributions on Minimalist Grammar Derivations','MoL',2013),('W13-3002','Order and Optionality: Minimalist Grammars with Adjunction','MoL',2013),('W13-3003','On the Parameterized Complexity of Linear Context-Free Rewriting Systems','MoL',2013),('W13-3004','Segmenting Temporal Intervals for Tense and Aspect','MoL',2013),('W13-3005','The Frobenius Anatomy of Relative Pronouns','MoL',2013),('W13-3006','Vowel Harmony and Subsequentiality','MoL',2013),('W13-3007','Learning Subregular Classes of Languages with Factored Deterministic Automata','MoL',2013),('W13-3008','Structure Learning in Weighted Languages','MoL',2013),('W13-3009','Why Letter Substitution Puzzles are Not Hard to Solve: A Case Study in Entropy and Probabilistic Search-Complexity','MoL',2013),('W13-3010','Investigating Connectivity and Consistency Criteria for Phrase Pair Extraction in Statistical Machine Translation','MoL',2013),('W13-3011','Grammars and Topic Models','MoL',2013),('W13-3101','Multi-document multilingual summarization corpus preparation, Part 1: Arabic, English, Greek, Chinese, Romanian','MultiLing',2013),('W13-3102','Multi-document multilingual summarization corpus preparation, Part 2: Czech, Hebrew and Spanish','MultiLing',2013),('W13-3103','Multi-document multilingual summarization and evaluation tracks in ACL 2013 MultiLing Workshop','MultiLing',2013),('W13-3104','ACL 2013 MultiLing Pilot Overview','MultiLing',2013),('W13-3105','CIST System Report for ACL MultiLing 2013 â€“ Track 1: Multilingual Multi-document Summarization','MultiLing',2013),('W13-3106','Multilingual Multi-Document Summarization with POLY2','MultiLing',2013),('W13-3107','The UWB Summariser at Multiling-2013','MultiLing',2013),('W13-3108','Multilingual Summarization: Dimensionality Reduction and a Step Towards Optimal Term Coverage','MultiLing',2013),('W13-3109','Using a Keyness Metric for Single and Multi Document Summarisation','MultiLing',2013),('W13-3110','Multilingual summarization system based on analyzing the discourse structure at MultiLing 2013','MultiLing',2013),('W13-3111','Multilingual Single-Document Summarization with MUSE','MultiLing',2013),('W13-3201','Vector Space Semantic Parsing: A Framework for Compositional Vector Space Models','CVSC',2013),('W13-3202','Learning from errors: Using vector-based compositional semantics for parse reranking','CVSC',2013),('W13-3203','A Structured Distributional Semantic Model : Integrating Structure with Semantics','CVSC',2013),('W13-3204','Letter N-Gram-based Input Encoding for Continuous Space Language Models','CVSC',2013),('W13-3205','Transducing Sentences to Syntactic Feature Vectors: an Alternative Way to Parse?','CVSC',2013),('W13-3206','General estimation and evaluation of compositional distributional semantic models','CVSC',2013),('W13-3207','Applicative structure in vector space models','CVSC',2013),('W13-3208','Determining Compositionality of Expresssions Using Various Word Space Models and Methods','CVSC',2013),('W13-3209','â€œNot not badâ€\x9d is not â€œbadâ€\x9d: A distributional account of negation','CVSC',2013),('W13-3210','Towards Dynamic Word Sense Discrimination with Random Indexing','CVSC',2013),('W13-3211','A Generative Model of Vector Space Semantics','CVSC',2013),('W13-3212','Aggregating Continuous Word Embeddings for Information Retrieval','CVSC',2013),('W13-3213','Answer Extraction by Recursive Parse Tree Descent','CVSC',2013),('W13-3214','Recurrent Convolutional Neural Networks for Discourse Compositionality','CVSC',2013),('W13-3301','Meaning Unit Segmentation in English and Chinese: a New Approach to Discourse Phenomena','DiscoMT',2013),('W13-3302','Analysing Lexical Consistency in Translation','DiscoMT',2013),('W13-3303','Implicitation of Discourse Connectives in (Machine) Translation','DiscoMT',2013),('W13-3304','Associative Texture Is Lost In Translation','DiscoMT',2013),('W13-3305','Detecting Narrativity to Improve English to French Translation of Simple Past Verbs','DiscoMT',2013),('W13-3306','Machine Translation with Many Manually Labeled Discourse Connectives','DiscoMT',2013),('W13-3307','Translation of It in a Deep Syntax Framework','DiscoMT',2013),('W13-3308','Feature Weight Optimization for Discourse-Level SMT','DiscoMT',2013),('W13-3401','Rosetta Stone Linguistic Problems','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3402','Linguistic Problems Based on Text Corpora','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3403','Introducing Computational Concepts in a Linguistics Olympiad','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3404','Multilingual Editing of Linguistic Problems','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3405','Learning from OzCLO, the Australian Computational and Linguistics Olympiad','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3406','The Swedish Model of Public Outreach of Linguistics to secondary school Students through Olympiads','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3407','Correspondence Seminar: Bringing Linguistics to High Schools','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3408','Artificial IntelliDance: Teaching Machine Learning through a Choreography','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3409','Treebanking for Data-driven Research in the Classroom','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3410','Learning Computational Linguistics through NLP Evaluation Events: the experience of Russian evaluation initiative','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3411','A Virtual Manipulative for Learning Log-Linear Models','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3412','Teaching the Basics of NLP and ML in an Introductory Course to Information Science','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3413','Semantic Technologies in IBM Watson','Workshop On Effective Tools And Methodologies For Teaching Natural Language Processing And Computational Linguistics',2013),('W13-3501','Online Active Learning for Cost Sensitive Domain Adaptation','CoNLL',2013),('W13-3502','Analysis of Stopping Active Learning based on Stabilizing Predictions','CoNLL',2013),('W13-3503','Improving Pointwise Mutual Information (PMI) by Incorporating Significant Co-occurrence','CoNLL',2013),('W13-3504','Supervised Morphological Segmentation in a Low-Resource Learning Setting using Conditional Random Fields','CoNLL',2013),('W13-3505','Graph-Based Posterior Regularization for Semi-Supervised Structured Prediction','CoNLL',2013),('W13-3506','A Boosted Semi-Markov Perceptron','CoNLL',2013),('W13-3507','Spectral Learning of Refinement HMMs','CoNLL',2013),('W13-3508','Sentence Compression with Joint Structural Inference','CoNLL',2013),('W13-3509','Learning Adaptable Patterns for Passage Reranking','CoNLL',2013),('W13-3510','Documents and Dependencies: an Exploration of Vector Space Models for Semantic Composition','CoNLL',2013),('W13-3511','Hidden Markov tree models for semantic class induction','CoNLL',2013),('W13-3512','Better Word Representations with Recursive Neural Networks for Morphology','CoNLL',2013),('W13-3513','Separating Disambiguation from Composition in Distributional Semantics','CoNLL',2013),('W13-3514','Frame Semantics for Stance Classification','CoNLL',2013),('W13-3515','Philosophers are Mortal: Inferring the Truth of Unseen Facts','CoNLL',2013),('W13-3516','Towards Robust Linguistic Analysis using OntoNotes','CoNLL',2013),('W13-3517','Dynamic Knowledge-Base Alignment for Coreference Resolution','CoNLL',2013),('W13-3518','A Non-Monotonic Arc-Eager Transition System for Dependency Parsing','CoNLL',2013),('W13-3519','Collapsed Variational Bayesian Inference for PCFGs','CoNLL',2013),('W13-3520','Polyglot: Distributed Word Representations for Multilingual NLP','CoNLL',2013),('W13-3521','Exploiting multiple hypotheses for Multilingual Spoken Language Understanding','CoNLL',2013),('W13-3522','Multilingual WSD-like Constraints for Paraphrase Extraction','CoNLL',2013),('W13-3523','Topic Models + Word Alignmen','CoNLL',2013),('W13-3524','Terminology Extraction Approaches for Product Aspect Detection in Customer Reviews','CoNLL',2013),('W13-3525','Acquisition of Desires before Beliefs: A Computional Investigation','CoNLL',2013),('W13-3601','The CoNLL-2013 Shared Task on Grammatical Error Correction','CoNLL',2013),('W13-3602','The University of Illinois System in the CoNLL-2013 Shared Task','CoNLL',2013),('W13-3603','CoNLL-2013 Shared Task: Grammatical Error Correction NTHU System Description','CoNLL',2013),('W13-3604','NAIST at 2013 CoNLL Grammatical Error Correction Shared Task','CoNLL',2013),('W13-3605','UM-Checker: A Hybrid System for English Grammatical Error Correction','CoNLL',2013),('W13-3606','A Tree Transducer Model for Grammatical Error Correction','CoNLL',2013),('W13-3607','Constrained Grammatical Error Correction using Statistical Machine Translation','CoNLL',2013),('W13-3608','LFG-based Features for Noun Number and Article Grammatical Errors','CoNLL',2013),('W13-3609','Toward More Precision in Correction of Grammatical Errors','CoNLL',2013),('W13-3610','Grammatical Error Correction as Multiclass Classification with Single Model','CoNLL',2013),('W13-3611','IITB System for CoNLL 2013 Shared Task: A Hybrid Approach to Grammatical Error Correction','CoNLL',2013),('W13-3612','UdS at CoNLL 2013 Shared Task','CoNLL',2013),('W13-3613','Rule-based System for Automatic Grammar Correction Using Syntactic N-grams for English Language Learning (L2)','CoNLL',2013),('W13-3614','Memory-based Grammatical Error Correction','CoNLL',2013),('W13-3615','A Noisy Channel Model Framework for Grammatical Correction','CoNLL',2013),('W13-3616','A Hybrid Model For Grammatical Error Correction','CoNLL',2013),('W13-3617','KUNLP Grammatical Error Correction System For CoNLL-2013 Shared Task','CoNLL',2013),('W13-4001','Discourse Relations, Discourse Structure, Discourse Semantics','SIGDIAL',2013),('W13-4002','Expressivity and comparison of models of discourse structure','SIGDIAL',2013),('W13-4003','Unsupervised structured semantic inference for spoken dialog reservation tasks','SIGDIAL',2013),('W13-4004','Toward a Better Understanding of Causality between Verbal Events: Extraction and Analysis of the Causal Power of Verb-Verb Associations','SIGDIAL',2013),('W13-4005','Training an integrated sentence planner on user dialogue','SIGDIAL',2013),('W13-4006','Topic Independent Identification of Agreement and Disagreement in Social Media Dialogue','SIGDIAL',2013),('W13-4007','Automatic Prediction of Friendship via Multi-model Dyadic Features','SIGDIAL',2013),('W13-4008','Stance Classification in Online Debates by Recognizing Users\\' Intentions','SIGDIAL',2013),('W13-4009','Generating More Specific Questions for Acquiring Attributes of Unknown Concepts from Users','SIGDIAL',2013),('W13-4010','Modeling Collaborative Referring for Situated Referential Grounding','SIGDIAL',2013),('W13-4011','A quantitative view of feedback lexical markers in conversational French','SIGDIAL',2013),('W13-4012','On the contribution of discourse structure to topic segmentation','SIGDIAL',2013),('W13-4013','Will my Spoken Dialogue System be a Slow Learner ?','SIGDIAL',2013),('W13-4014','Model-free POMDP optimisation of tutoring systems with echo-state networks','SIGDIAL',2013),('W13-4015','Patterns of Importance Variation in Spoken Dialog','SIGDIAL',2013),('W13-4016','Reinforcement Learning of Two-Issue Negotiation Dialogue Policies','SIGDIAL',2013),('W13-4017','Dialogue Act Recognition in Synchronous and Asynchronous Conversations','SIGDIAL',2013),('W13-4018','Improving Interaction Quality Recognition Using Error Correction','SIGDIAL',2013),('W13-4019','A Prolog Datamodel for State Chart XML','SIGDIAL',2013),('W13-4020','Exploring Features For Localized Detection of Speech Recognition Errors','SIGDIAL',2013),('W13-4021','Modelling Human Clarification Strategies','SIGDIAL',2013),('W13-4022','Interactive Error Resolution Strategies for Speech-to-Speech Translation Systems','SIGDIAL',2013),('W13-4023','AIDA: Artificial Intelligent Dialogue Agent','SIGDIAL',2013),('W13-4024','Demonstration of an Always-On Companion for Isolated Older Adults','SIGDIAL',2013),('W13-4025','A Multithreaded Conversational Interface for Pedestrian Navigation and Question Answering','SIGDIAL',2013),('W13-4026','Demonstration of the PARLANCE system: a data-driven incremental, spoken dialogue system for interactive search','SIGDIAL',2013),('W13-4027','Multi-step Natural Language Understanding','SIGDIAL',2013),('W13-4028','WebWOZ: A Platform for Designing and Conducting Web-based Wizard of Oz Experiments','SIGDIAL',2013),('W13-4029','Exploring the effects of gaze and pauses in situated human-robot interaction','SIGDIAL',2013),('W13-4030','Interpreting Situated Dialogue Utterances: an Update Model that Uses Speech, Gaze, and Gesture Information','SIGDIAL',2013),('W13-4031','Multimodality and Dialogue Act Classification in the RoboHelper Project','SIGDIAL',2013),('W13-4032','Verbal indicators of psychological distress in interactive dialogue with a virtual human','SIGDIAL',2013),('W13-4033','Spoken Language Understanding for Natural Interaction','SIGDIAL',2013),('W13-4034','Learning Dialogue Management Models for Task-Oriented Dialogue with Parallel Dialogue and Task Streams','SIGDIAL',2013),('W13-4035','POMDP-based dialogue manager adaptation to extended domains','SIGDIAL',2013),('W13-4036','Training and evaluation of an MDP model for social multi-user human-robot interaction','SIGDIAL',2013),('W13-4037','Evaluation of Speech Dialog Strategies for Internet Applications in the Car','SIGDIAL',2013),('W13-4038','Predicting Tasks in Goal-Oriented Spoken Dialog Systems using Semantic Knowledge Bases','SIGDIAL',2013),('W13-4039','Surface Text based Dialogue Models for Virtual Humans','SIGDIAL',2013),('W13-4040','Speech Reduction, Intensity, and F0 Shape are Cues to Turn-Taking','SIGDIAL',2013),('W13-4041','Gesture Semantics Reconstruction Based on Motion Capturing and Complex Event Processing: a Circular Shape Example','SIGDIAL',2013),('W13-4042','Open-ended, Extensible System Utterances Are Preferred, Even If They Require Filled Pauses','SIGDIAL',2013),('W13-4043','A Four-Participant Group Facilitation Framework for Conversational Robots','SIGDIAL',2013),('W13-4044','Tacit Social Contracts for Wheelchairs','SIGDIAL',2013),('W13-4045','Laugher and Topic Transition in Multiparty Conversation','SIGDIAL',2013),('W13-4046','IMHO: An Exploratory Study of Hedging in Web Forums','SIGDIAL',2013),('W13-4047','Impact of ASR N-Best Information on Bayesian Dialogue Act Recognition','SIGDIAL',2013),('W13-4048','Investigating speaker gaze and pointing behaviour in human-computer interaction with the mint.tools collection','SIGDIAL',2013),('W13-4049','In-Context Evaluation of Unsupervised Dialogue Act Models for Tutorial Dialogue','SIGDIAL',2013),('W13-4050','Spoken Dialog Systems for Automated Survey Interviewing','SIGDIAL',2013),('W13-4051','Open-domain Utterance Generation for Conversational Dialogue Systems using Web-scale Dependency Structures','SIGDIAL',2013),('W13-4052','Evaluating State Representations for Reinforcement Learning of Turn-Taking Policies in Tutorial Dialogue','SIGDIAL',2013),('W13-4053','A Semi-supervised Approach for Natural Language Call Routing','SIGDIAL',2013),('W13-4054','Counseling Dialog System with 5W1H Extraction','SIGDIAL',2013),('W13-4055','Integration and test environment for an in-vehicle dialogue system in the SIMSI project','SIGDIAL',2013),('W13-4056','Weakly and Strongly Constrained Dialogues for Language Learning','SIGDIAL',2013),('W13-4057','Open-Domain Information Access with Talking Robots','SIGDIAL',2013),('W13-4058','Demonstration of the EmoteWizard of Oz Interface for Empathic Robotic Tutors','SIGDIAL',2013),('W13-4059','The Map Task Dialogue System: A Test-bed for Modelling Human-Like Dialogue','SIGDIAL',2013),('W13-4060','A Robotic Agent in a Virtual Environment that Performs Situated Incremental Understanding of Navigational Utterances','SIGDIAL',2013),('W13-4061','Roundtable: An Online Framework for Building Web-based Conversational Agents','SIGDIAL',2013),('W13-4062','A Data-driven Model for Timing Feedback in a Map Task Dialogue System','SIGDIAL',2013),('W13-4063','Continuously Predicting and Processing Barge-in During a Live Spoken Dialogue Task','SIGDIAL',2013),('W13-4064','Which ASR should I choose for my dialogue system?','SIGDIAL',2013),('W13-4065','The Dialog State Tracking Challenge','SIGDIAL',2013),('W13-4066','Recipe For Building Robust Spoken Dialog State Trackers: Dialog State Tracking Challenge System Description','SIGDIAL',2013),('W13-4067','A Simple and Generic Belief Tracking Mechanism for the Dialog State Tracking Challenge: On the believability of observed information','SIGDIAL',2013),('W13-4068','Multi-domain learning and generalization in dialog state tracking','SIGDIAL',2013),('W13-4069','Structured Discriminative Model For Dialog State Tracking','SIGDIAL',2013),('W13-4070','Comparison of Bayesian Discriminative and Generative Models for Dialogue State Tracking','SIGDIAL',2013),('W13-4071','Dialog State Tracking using Conditional Random Fields','SIGDIAL',2013),('W13-4072','Engineering Statistical Dialog State Trackers: A Case Study on DSTC','SIGDIAL',2013),('W13-4073','Deep Neural Network Approach for the Dialog State Tracking Challenge','SIGDIAL',2013),('W13-4901','Working with a small dataset - semi-supervised dependency parsing for Irish','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4902','Lithuanian Dependency Parsing with Rich Morphological Features','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4903','Parsing Croatian and Serbian by Using Croatian Dependency Treebanks','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4904','A Cross-Task Flexible Transition Model for Arabic Tokenization, Affix Detection, Affix Labeling, POS Tagging, and Dependency Parsing','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4905','The LIGM-Alpage architecture for the SPMRL 2013 Shared Task: Multiword Expression Analysis and Dependency Parsing','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4906','Exploring beam-based shift-reduce dependency parsing with DyALog: Results from the SPMRL 2013 shared task','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4907','Effective Morphological Feature Selection with MaltOptimizer at the SPMRL 2013 Shared Task','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4908','Exploiting the Contribution of Morphological Information to Parsing: the BASQUE TEAM system in the SPRML\\'2013 Shared Task','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4909','The AI-KU System at the SPMRL 2013 Shared Task : Unsupervised Features for Dependency Parsing','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4910','SPMRL\\'13 Shared Task System: The CADIM Arabic Dependency Parser','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4911','A Statistical Approach to Prediction of Empty Categories in Hindi Dependency Treebank','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4912','An Empirical Study on the Effect of Morphological and Lexical Features in Persian Dependency Parsing','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4913','Constructing a Practical Constituent Parser from a Japanese Treebank with Function Labels','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4914','Context Based Statistical Morphological Analyzer and its Effect on Hindi Dependency Parsing','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4915','Representation of Morphosyntactic Units and Coordination Structures in the Turkish Dependency Treebank','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4916','(Re)ranking Meets Morphosyntax: State-of-the-art Results from the SPMRL 2013 Shared Task','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-4917','Overview of the SPMRL 2013 Shared Task: A Cross-Framework Evaluation of Parsing Morphologically Rich Languages','Workshop on Statistical Parsing of Morphologically-Rich Languages',2013),('W13-5001','Event-Centered Information Retrieval Using Kernels on Event Graphs','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5002','JoBimText Visualizer: A Graph-based Approach to Contextualizing Distributional Similarity','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5003','Merging Word Senses','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5004','Reconstructing Big Semantic Similarity Networks','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5005','Graph-Based Unsupervised Learning of Word Similarities Using Heterogeneous Feature Types','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5006','From Global to Local Similarities: A Graph-Based Contextualization Method using Distributional Thesauri','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5007','Understanding seed selection in bootstrapping','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5008','Graph-Structures Matching for Review Relevance Identification','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5009','Automatic Extraction of Reasoning Chains from Textual Reports','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5010','Graph-based Approaches for Organization Entity Resolution in MapReduce','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W13-5011','A Graph-Based Approach to Skill Extraction from Text','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2013),('W14-0101','Towards Building KurdNet, the Kurdish WordNet','*SEM',2014),('W14-0201','In-Car Multi-Domain Spoken Dialogs: A Wizard of Oz Study','Dialogue in Motion',2014),('W14-0202','IBM\\'s Belief Tracker: Results On Dialog State Tracking Challenge Datasets','Dialogue in Motion',2014),('W14-0203','Click or Type: An Analysis of Wizardâ€™s Interaction for Future Wizard Interface Design','Dialogue in Motion',2014),('W14-0204','Recipes for building voice search UIs for automotive','Dialogue in Motion',2014),('W14-0205','A Natural Language Instructor for pedestrian navigation based in generation by selection','Dialogue in Motion',2014),('W14-0206','Mining human interactions to construct a virtual guide for a virtual fair','Dialogue in Motion',2014),('W14-0207','Collaborative Exploration in Human-Robot Teams: What\\'s in their Corpora of Dialog, Video, & LIDAR Messages?','Dialogue in Motion',2014),('W14-0208','Multi-threaded Interaction Management for Dynamic Spatial Applications','Dialogue in Motion',2014),('W14-0209','Mostly Passive Information Delivery â€“ a Prototype','Dialogue in Motion',2014),('W14-0210','Navigation Dialog of Blind People: Recovery from Getting Lost','Dialogue in Motion',2014),('W14-0211','Conversational Strategies for Robustly Managing Dialog in Public Spaces','Dialogue in Motion',2014),('W14-0212','Situationally Aware In-Car Information Presentation Using Incremental Speech Generation: Safer, and More Effective','Dialogue in Motion',2014),('W14-0213','Human pause and resume behaviours for unobtrusive humanlike in-car spoken dialogue systems','Dialogue in Motion',2014),('W14-0301','Word Confidence Estimation for SMT N-best List Re-ranking','HaCat',2014),('W14-0302','Proofreading Human Translations with an E-pen','HaCat',2014),('W14-0303','Estimating Grammar Correctness for a Priori Estimation of Machine Translation Post-Editing Effort','HaCat',2014),('W14-0304','On-The-Fly Translator Assistant (Readability and Terminology Handling)','HaCat',2014),('W14-0305','Translators in the Loop: Understanding How they Work with CAT Tools','HaCat',2014),('W14-0306','Measuring the Cognitive Effort of Literal Translation Processes','HaCat',2014),('W14-0307','The Impact of Machine Translation Quality on Human Post-Editing','HaCat',2014),('W14-0308','Beyond Linguistic Equivalence. An Empirical Study of Translation Evaluation in a Translation Learner Corpus','HaCat',2014),('W14-0309','Black-box integration of heterogeneous bilingual resources into an interactive translation system','HaCat',2014),('W14-0310','The ACCEPT Portal: An Online Framework for the Pre-editing and Post-editing of User-Generated Content','HaCat',2014),('W14-0311','Real Time Adaptive Machine Translation for Post-Editing with cdec and TransCenter','HaCat',2014),('W14-0312','Confidence-based Active Learning Methods for Machine Translation','HaCat',2014),('W14-0313','Online Word Alignment for Online Adaptive Machine Translation','HaCat',2014),('W14-0314','Quantifying the Influence of MT Output in the Translators\\' Performance: A Case Study in Technical Translation','HaCat',2014),('W14-0315','Speech-Enabled Computer-Aided Translation: A Satisfaction Survey with Post-Editor Trainees','HaCat',2014),('W14-0401','Finding Viable Seed URLs for Web Corpora: A Scouting Approach and Comparative Study of Available Sources','Workshop On Web As Corpus',2014),('W14-0402','Focused Web Corpus Crawling','Workshop On Web As Corpus',2014),('W14-0403','Less Destructive Cleaning of Web Documents by Using Standoff Annotation','Workshop On Web As Corpus',2014),('W14-0404','Some Issues on the Normalization of a Corpus of Products Reviews in Portuguese','Workshop On Web As Corpus',2014),('W14-0405','{bs,hr,sr}WaC - Web Corpora of Bosnian, Croatian and Serbian','Workshop On Web As Corpus',2014),('W14-0406','The PAISÃ€ Corpus of Italian Web Texts','Workshop On Web As Corpus',2014),('W14-0501','Challenging incrementality in human language processing: two operations for a cognitive architecture','CogACLL',2014),('W14-0502','A Brazilian Portuguese Phonological-prosodic Algorithm Applied to Language Acquisition: A Case Study','CogACLL',2014),('W14-0503','Bayesian inference as a cross-linguistic word segmentation strategy: Always learning useful things','CogACLL',2014),('W14-0504','Learning the hyperparameters to learn morphology','CogACLL',2014),('W14-0505','An explicit statistical model of learning lexical segmentation using multiple cues','CogACLL',2014),('W14-0506','Distributional Learning as a Theory of Language Acquisition','CogACLL',2014),('W14-0507','A multimodal corpus for the evaluation of computational models for (grounded) language acquisition','CogACLL',2014),('W14-0508','Towards a computational model of grammaticalization and lexical diversity','CogACLL',2014),('W14-0509','How well can a corpus-derived co-occurrence network simulate human associative behavior?','CogACLL',2014),('W14-0510','Agent-based modeling of language evolution','CogACLL',2014),('W14-0511','Missing Generalizations: A Supervised Machine Learning Approach to L2 Written Production','CogACLL',2014),('W14-0601','A New Implementation for Canonical Text Services','LaTeCH',2014),('W14-0602','How to semantically relate dialectal Dictionaries in the Linked Data Framework','LaTeCH',2014),('W14-0603','Bootstrapping a historical commodities lexicon with SKOS and DBpedia','LaTeCH',2014),('W14-0604','New Technologies for Old Germanic. Resources and Research on Parallel Bibles in Older Continental Western Germanic','LaTeCH',2014),('W14-0605','A Multilingual Evaluation of Three Spelling Normalisation Methods for Historical Text','LaTeCH',2014),('W14-0606','Enhancing the possibilities of corpus-based investigations: Word sense disambiguation on query results of large text corpora','LaTeCH',2014),('W14-0607','A Hybrid Disambiguation Measure for Inaccurate Cultural Heritage Data','LaTeCH',2014),('W14-0608','Automated Error Detection in Digitized Cultural Heritage Documents','LaTeCH',2014),('W14-0609','Mining the Twentieth Centuryâ€™s History from the Time Magazine Corpus','LaTeCH',2014),('W14-0610','Social and Semantic Diversity: Socio-semantic Representation of a Scientific Corpus','LaTeCH',2014),('W14-0611','A Tool for a High-Carat Gold-Standard Word Alignment','LaTeCH',2014),('W14-0612','CorA: A web-based annotation tool for historical and other non-standard language data','LaTeCH',2014),('W14-0613','Developing a Tagalog Linguistic Inquiry and Word Count (LIWC) â€˜Disasterâ€™ Dictionary for Understanding Mixed Language Social Media: A Work-in-Progress Paper','LaTeCH',2014),('W14-0614','Text Analysis of Aberdeen Burgh Records 1530-1531','LaTeCH',2014),('W14-0615','From Syntax to Semantics. First Steps Towards Tectogrammatical Annotation of Latin','LaTeCH',2014),('W14-0616','On the syllabic structures of Aromanian','LaTeCH',2014),('W14-0617','A Gazetteer and Georeferencing for Historical English Documents','LaTeCH',2014),('W14-0618','Automatic Wayang Ontology Construction using Relation Extraction from Free Text','LaTeCH',2014),('W14-0701','Because We Say So','CAtoCL',2014),('W14-0702','Annotating Causality in the TempEval-3 Corpus','CAtoCL',2014),('W14-0703','Automatic Detection of Causal Relations in German Multilogs','CAtoCL',2014),('W14-0704','Studying the Semantic Context of two Dutch Causal Connectives','CAtoCL',2014),('W14-0705','Building a Japanese Corpus of Temporal-Causal-Discourse Structures Based on SDRT for Extracting Causal Relations','CAtoCL',2014),('W14-0706','Likelihood of External Causation in the Structure of Events','CAtoCL',2014),('W14-0707','Recognizing Causality in Verb-Noun Pairs via Noun and Verb Semantics','CAtoCL',2014),('W14-0801','Breaking Bad: Extraction of Verb-Particle Constructions from a Parallel Subtitles Corpus','MWE',2014),('W14-0802','A Supervised Model for Extraction of Multiword Expressions, Based on Statistical Context Features','MWE',2014),('W14-0803','VPCTagger: Detecting Verb-Particle Constructions With Syntax-Based Methods','MWE',2014),('W14-0804','The Relevance of Collocations for Parsing','MWE',2014),('W14-0805','Parsing Modern Greek verb MWEs with LFG/XLE grammars','MWE',2014),('W14-0806','Evaluation of a Substitution Method for Idiom Transformation in Statistical Machine Translation','MWE',2014),('W14-0807','Encoding MWEs in a conceptual lexicon','MWE',2014),('W14-0808','German Compounds and Statistical Machine Translation. Can they get along?','MWE',2014),('W14-0809','Extracting MWEs from Italian corpora: A case study for refining the POS-pattern methodology','MWE',2014),('W14-0810','Mickey Mouse is not a Phrase: Improving Relevance in E-Commerce with Multiword Expressions','MWE',2014),('W14-0811','Encoding of Compounds in Swedish FrameNet','MWE',2014),('W14-0812','Extraction of Nominal Multiword Expressions in French','MWE',2014),('W14-0813','Towards an Empirical Subcategorization of Multiword Expressions','MWE',2014),('W14-0814','Contexts, Patterns, Interrelations - New Ways of Presenting Multi-word Expressions','MWE',2014),('W14-0815','Detecting change and emergence for multiword expressions','MWE',2014),('W14-0816','An Approach to Take Multi-Word Expressions','MWE',2014),('W14-0817','Paraphrasing Swedish Compound Nouns in Machine Translation','MWE',2014),('W14-0818','Feature Norms of German Noun Compounds','MWE',2014),('W14-0819','Identifying collocations using cross-lingual association measures','MWE',2014),('W14-0820','Unsupervised Construction of a Lexicon and a Repository of Variation Patterns for Arabic Modal Multiword Expressions','MWE',2014),('W14-0821','Issues in Translating Verb-Particle Constructions from German to English','MWE',2014),('W14-0901','Generating Music from Literature','Workshop on Computational Linguistics for Literature',2014),('W14-0902','Computational analysis to explore authors\\' depiction of characters','Workshop on Computational Linguistics for Literature',2014),('W14-0903','Quotations, Relevance and Time Depth: Medieval Arabic Literature in Grids and Networks','Workshop on Computational Linguistics for Literature',2014),('W14-0904','Time after Time: Representing Time in Literary Texts','Workshop on Computational Linguistics for Literature',2014),('W14-0905','Structure-based Clustering of Novels','Workshop on Computational Linguistics for Literature',2014),('W14-0906','From Speaker Identification to Affective Analysis: A Multi-Step System for Analyzing Children\\'s Stories','Workshop on Computational Linguistics for Literature',2014),('W14-0907','Parsing Screenplays for Extracting Social Networks from Movies','Workshop on Computational Linguistics for Literature',2014),('W14-0908','Function Words in Authorship Attribution. From Black Magic to Theory?','Workshop on Computational Linguistics for Literature',2014),('W14-1001','Analytical Approaches to Combining MT Technologies','HyTra',2014),('W14-1002','Using Hypothesis Selection Based Features for Confusion Network MT System Combination','HyTra',2014),('W14-1003','Comparing CRF and template-matching in phrasing tasks within a Hybrid MT system','HyTra',2014),('W14-1004','Controlled Authoring In A Hybrid Russian-English Machine Translation System','HyTra',2014),('W14-1005','Using Feature Structures to Improve Verb Translation in English-to-German Statistical MT','HyTra',2014),('W14-1006','Building a Spanish-German Dictionary for Hybrid MT','HyTra',2014),('W14-1007','An Empirical Study of the Impact of Idioms on Phrase Based Statistical Machine Translation of English to Brazilian-Portuguese','HyTra',2014),('W14-1008','Resumptive Pronoun Detection for Modern Standard Arabic to English MT','HyTra',2014),('W14-1009','Automatic Building and Using Parallel Resources for SMT from Comparable Corpora','HyTra',2014),('W14-1010','Improving the precision of automatically constructed human-oriented translation dictionaries','HyTra',2014),('W14-1011','Adventures in Multilingual Parsing','HyTra',2014),('W14-1012','Machine translation for LSPs: strategy and implementation','HyTra',2014),('W14-1013','A Principled Approach to Context-Aware Machine Translation','HyTra',2014),('W14-1014','Deriving de/het gender classification for Dutch nouns for rule-based MT generation tasks','HyTra',2014),('W14-1015','Chinese-to-Spanish rule-based machine translation system','HyTra',2014),('W14-1016','Extracting Multiword Translations from Aligned Comparable Documents','HyTra',2014),('W14-1017','How to overtake Google in MT quality - the Baltic case','HyTra',2014),('W14-1018','Hybrid Strategies for better products and shorter time-to-market','HyTra',2014),('W14-1101','Keynote: Supporting evidence-based medicine using text mining','Louhi',2014),('W14-1102','A Graph-Based Analysis of Medical Queries of a Swedish Health Care Portal','Louhi',2014),('W14-1103','The impact of near domain transfer on biomedical named entity recognition','Louhi',2014),('W14-1104','Domain Adaptation with Active Learning for Coreference Resolution','Louhi',2014),('W14-1105','Towards Cross-Domain PDTB-Style Discourse Parsing','Louhi',2014),('W14-1106','Translating SNOMED CT Terminology into a Minor Language','Louhi',2014),('W14-1107','A System for Building FrameNet-like Corpus for the Biomedical Domain','Louhi',2014),('W14-1108','Geneâ€“disease association extraction by text mining and network analysis','Louhi',2014),('W14-1109','Negation scope and spelling variation for text-mining of Danish electronic patient records','Louhi',2014),('W14-1110','Building a semantically annotated corpus for congestive heart and renal failure from clinical records and the literature','Louhi',2014),('W14-1111','Precise Medication Extraction using Agile Text Mining','Louhi',2014),('W14-1112','Applying UMLS for Distantly Supervised Relation Detection','Louhi',2014),('W14-1113','Adverse Drug Event prediction combining shallow analysis and machine learning','Louhi',2014),('W14-1114','Reducing VSM data sparseness by generalizing contexts: application to health text mining','Louhi',2014),('W14-1115','Disambiguation of Period Characters in Clinical Narratives','Louhi',2014),('W14-1116','Tuning HeidelTime for identifying time expressions in clinical texts in English and French','Louhi',2014),('W14-1117','Detecting drugs and adverse events from Spanish social media streams','Louhi',2014),('W14-1118','Care Episode Retrieval','Louhi',2014),('W14-1201','One Step Closer to Automatic Evaluation of Text Simplification Systems','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1202','Automatic diagnosis of understanding of medical words','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1203','Exploring Measures of Readability for Spoken Language: Analyzing linguistic features of subtitles to identify age-specific TV programs','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1204','Keyword Highlighting Improves Comprehension for People with Dyslexia','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1205','An eye-tracking evaluation of some parser complexity metrics','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1206','Syntactic Sentence Simplification for French','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1207','Medical text simplification using synonym replacement: Adapting assessment of word difficulty to a compounding language','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1208','Segmentation of patent claims for improving their readability','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1209','Improving Readability of Swedish Electronic Health Records through Lexical Simplification: First Results','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1210','An Open Corpus of Everyday Documents for Simplification Tasks','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1211','EACL - Expansion of Abbreviations in CLinical text','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1212','A Quantitative Insight into the Impact of Translation on Readability','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1213','Classifying easy-to-read texts without parsing','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1214','An Analysis of Crowdsourced Text Simplifications','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1215','An evaluation of syntactic simplification rules for people with autism','Workshop on Predicting and Improving Text Readability for target reader populations',2014),('W14-1301','Mining Lexical Variants from Microblogs: An Unsupervised Multilingual Approach','LASM',2014),('W14-1302','Estimating Time to Event from Tweets Using Temporal Expressions','LASM',2014),('W14-1303','Accurate Language Identification of Twitter Messages','LASM',2014),('W14-1304','The (Un)Predictability of Emotional Hashtags in Twitter','LASM',2014),('W14-1305','Finding Arguing Expressions of Divergent Viewpoints in Online Debates','LASM',2014),('W14-1306','Aspect Term Extraction for Sentiment Analysis: New Datasets, New Evaluation Measures and an Improved Unsupervised Method','LASM',2014),('W14-1307','Vowel and Diacritic Restoration for Social Media Texts','LASM',2014),('W14-1308','A Cascaded Approach for Social Media Text Normalization of Turkish','LASM',2014),('W14-1309','Experiments to Improve Named Entity Recognition on Turkish Tweets','LASM',2014),('W14-1401','Types and Records for Predication','TTNLS',2014),('W14-1402','System with Generalized Quantifiers on Dependent Types for Anaphora','TTNLS',2014),('W14-1403','Monads as a Solution for Generalized Opacity','TTNLS',2014),('W14-1404','The Phenogrammar of Coordination','TTNLS',2014),('W14-1405','Natural Language Reasoning Using Proof-Assistant Technology: Rich Typing and Beyond','TTNLS',2014),('W14-1406','A Type-Driven Tensor-Based Semantics for CCG','TTNLS',2014),('W14-1407','From Natural Language to RDF Graphs with Pregroups','TTNLS',2014),('W14-1408','Incremental semantic scales by strings','TTNLS',2014),('W14-1409','A Probabilistic Rich Type Theory for Semantic Interpretation','TTNLS',2014),('W14-1410','Probabilistic Type Theory for Incremental Dialogue Processing','TTNLS',2014),('W14-1411','Propositions, Questions, and Adjectives: a rich type theoretic approach','TTNLS',2014),('W14-1501','Post-hoc Manipulations of Vector Space Models with Application to Semantic Role Labeling','CVSC',2014),('W14-1502','Distributional Composition using Higher-Order Dependency Vectors','CVSC',2014),('W14-1503','A Systematic Study of Semantic Vector Space Model Parameters','CVSC',2014),('W14-1504','Extractive Summarization using Continuous Vector Space Models','CVSC',2014),('W14-1505','Investigating the Contribution of Distributional Semantic Information for Dialogue Act Classification','CVSC',2014),('W14-1601','What\\'s in a p-value in NLP?','CoNLL',2014),('W14-1602','Domain-Specific Image Captioning','CoNLL',2014),('W14-1603','Reconstructing Native Language Typology from Foreign Language Usage','CoNLL',2014),('W14-1604','Automatic Transliteration of Romanized Dialectal Arabic','CoNLL',2014),('W14-1605','Learning to Rank Answer Candidates for Automatic Resolution of Crossword Puzzles','CoNLL',2014),('W14-1606','Inducing Neural Models of Script Knowledge','CoNLL',2014),('W14-1607','Grounding Language with Points and Paths in Continuous Spaces','CoNLL',2014),('W14-1608','Looking for Hyponyms in Vector Space','CoNLL',2014),('W14-1609','Lexicon Infused Phrase Embeddings for Named Entity Resolution','CoNLL',2014),('W14-1610','Focused Entailment Graphs for Open IE Propositions','CoNLL',2014),('W14-1611','Improved Pattern Learning for Bootstrapped Entity Extraction','CoNLL',2014),('W14-1612','Towards Temporal Scoping of Relational Facts based on Wikipedia Data','CoNLL',2014),('W14-1613','Distributed Word Representation Learning for Cross-Lingual Dependency Parsing','CoNLL',2014),('W14-1614','Treebank Translation for Cross-Lingual Parser Induction','CoNLL',2014),('W14-1615','Weakly-Supervised Bayesian Learning of a CCG Supertagger','CoNLL',2014),('W14-1616','Factored Markov Translation with Robust Modeling','CoNLL',2014),('W14-1617','Hallucinating Phrase Translations for Low Resource MT','CoNLL',2014),('W14-1618','Linguistic Regularities in Sparse and Explicit Word Representations','CoNLL',2014),('W14-1619','Probabilistic Modeling of Joint-context in Distributional Similarity','CoNLL',2014),('W14-1620','A Rudimentary Lexicon and Semantics Help Bootstrap Phoneme Acquisition','CoNLL',2014),('W14-1701','The CoNLL-2014 Shared Task on Grammatical Error Correction','CoNLL',2014),('W14-1702','Grammatical error correction using hybrid systems and type filtering','CoNLL',2014),('W14-1703','The AMU System in the CoNLL-2014 Shared Task: Grammatical Error Correction by Data-Intensive and Feature-Rich Statistical Machine Translation','CoNLL',2014),('W14-1704','The Illinois-Columbia System in the CoNLL-2014 Shared Task','CoNLL',2014),('W14-1705','RACAI GEC â€“ A hybrid approach to Grammatical Error Correction','CoNLL',2014),('W14-1706','Grammatical Error Detection Using Tagger Disagreement','CoNLL',2014),('W14-1707','CoNLL 2014 Shared Task: Grammatical Error Correction with a Syntactic N-gram Language Model from a Big Corpora','CoNLL',2014),('W14-1708','Tuning a Grammar Correction System for Increased Precision','CoNLL',2014),('W14-1709','POSTECH Grammatical Error Correction System in the CoNLL-2014 Shared Task','CoNLL',2014),('W14-1710','Grammatical Error Detection and Correction using a Single Maximum Entropy Model','CoNLL',2014),('W14-1711','Factored Statistical Machine Translation for Grammatical Error Correction','CoNLL',2014),('W14-1712','NTHU at the CoNLL-2014 Shared Task','CoNLL',2014),('W14-1713','A Unified Framework for Grammar Error Correction','CoNLL',2014),('W14-1801','Automated Measures of Specific Vocabulary Knowledge from Constructed Responses (\\'Use These Words to Write a Sentence Based on this Picture\\')','BEA',2014),('W14-1802','Automatic Assessment of the Speech of Young English Learners','BEA',2014),('W14-1803','Automatic detection of plagiarized spoken responses','BEA',2014),('W14-1804','Understanding MOOC Discussion Forums using Seeded LDA','BEA',2014),('W14-1805','Translation Class Instruction as Collaboration in the Act of Translation','BEA',2014),('W14-1806','The pragmatics of margin comments: An empirical study','BEA',2014),('W14-1807','Surprisal as a Predictor of Essay Quality','BEA',2014),('W14-1808','Towards Domain-Independent Assessment of Elementary Studentsâ€™ Science Competency using Soft Cardinality','BEA',2014),('W14-1809','Automatic evaluation of spoken summaries: the case of language assessment','BEA',2014),('W14-1810','An Explicit Feedback System for Preposition Errors based on Wikipedia Revisions','BEA',2014),('W14-1811','Syllable and language model based features for detecting non-scorable tests in spoken language proficiency assessment applications','BEA',2014),('W14-1812','Improving Peer Feedback Prediction: The Sentence Level is Right','BEA',2014),('W14-1813','ArCADE: An Arabic Corpus of Auditory Dictation Errors','BEA',2014),('W14-1814','Similarity-Based Non-Scorable Response Detection for Automated Speech Scoring','BEA',2014),('W14-1815','Natural Language Generation with Vocabulary Constraints','BEA',2014),('W14-1816','Automated scoring of speaking items in an assessment for teachers of English as a Foreign Language','BEA',2014),('W14-1817','Automatic Generation of Challenging Distractors Using Context-Sensitive Inference Rules','BEA',2014),('W14-1818','Sentence-level Rewriting Detection','BEA',2014),('W14-1819','Exploiting Morphological, Grammatical, and Semantic Correlates for Improved Text Difficulty Assessment','BEA',2014),('W14-1820','Assessing the Readability of Sentences: Which Corpora and Features?','BEA',2014),('W14-1821','Rule-based and machine learning approaches for second language sentence-level readability','BEA',2014),('W14-1901','Standing on the shoulders of giants: attacking the meta-problems of technical AAC research','Workshop on Speech and Language Processing for Assistive Technologies',2014),('W14-1902','Graphical Modification of Text. An Approach To Dyslexic Users.','Workshop on Speech and Language Processing for Assistive Technologies',2014),('W14-1903','Dialogue Strategy Learning in Healthcare: A Systematic Approach for Learning Dialogue Models from Data','Workshop on Speech and Language Processing for Assistive Technologies',2014),('W14-1904','Speech recognition in Alzheimer\\'s disease with personal assistive robots','Workshop on Speech and Language Processing for Assistive Technologies',2014),('W14-1905','Individuality-preserving Voice Conversion for Articulation Disorders Using Dictionary Selective Non-negative Matrix Factorization','Workshop on Speech and Language Processing for Assistive Technologies',2014),('W14-1906','Preliminary Test of a Real-Time, Interactive Silent Speech Interface Based on Electromagnetic Articulograph','Workshop on Speech and Language Processing for Assistive Technologies',2014),('W14-2001','Computationally Rational Saccadic Control: An Explanation of Spillover Effects Based on Sampling from Noisy Perception and Memory','Workshop on Cognitive Modeling and Computational Linguistics',2014),('W14-2002','Investigating the role of entropy in sentence processing','Workshop on Cognitive Modeling and Computational Linguistics',2014),('W14-2003','Sentence Processing in a Vectorial Model of Working Memory','Workshop on Cognitive Modeling and Computational Linguistics',2014),('W14-2004','Evaluating Evaluation Metrics for Minimalist Parsing','Workshop on Cognitive Modeling and Computational Linguistics',2014),('W14-2005','Learning Verb Classes in an Incremental Model','Workshop on Cognitive Modeling and Computational Linguistics',2014),('W14-2006','A Usage-Based Model of Early Grammatical Development','Workshop on Cognitive Modeling and Computational Linguistics',2014),('W14-2007','A Model to Qualify the Linguistic Adaptation Phenomenon in Online Conversation Threads: Analyzing Priming Effect in Online Health Community','Workshop on Cognitive Modeling and Computational Linguistics',2014),('W14-2008','Quantifying the role of discourse topicality in speakersâ€™ choices of referring expressions','Workshop on Cognitive Modeling and Computational Linguistics',2014),('W14-2101','Annotating Patterns of Reasoning about Medical Theories of Causation in Vaccine Cases: Toward a Type System for Arguments','Workshop on Argumentation Mining',2014),('W14-2102','Towards Creation of a Corpus for Argumentation Mining the Biomedical Genetics Research Literature','Workshop on Argumentation Mining',2014),('W14-2103','An automated method to build a corpus of rhetorically-classified sentences in biomedical texts','Workshop on Argumentation Mining',2014),('W14-2104','Ontology-Based Argument Mining and Automatic Essay Scoring','Workshop on Argumentation Mining',2014),('W14-2105','Identifying Appropriate Support for Propositions in Online User Comments','Workshop on Argumentation Mining',2014),('W14-2106','Analyzing Argumentative Discourse Units in Online Interactions','Workshop on Argumentation Mining',2014),('W14-2107','Back up your Stance: Recognizing Arguments in Online Discussions','Workshop on Argumentation Mining',2014),('W14-2108','Automated argumentation mining to the rescue? Envisioning argumentation and decision-making support for debates in open online collaboration communities','Workshop on Argumentation Mining',2014),('W14-2109','A Benchmark Dataset for Automatic Detection of Claims and Evidence in the Context of Controversial Topics','Workshop on Argumentation Mining',2014),('W14-2110','Applying Argumentation Schemes for Essay Scoring','Workshop on Argumentation Mining',2014),('W14-2111','Mining Arguments From 19th Century Philosophical Texts Using Topic Based Modelling','Workshop on Argumentation Mining',2014),('W14-2112','Towards segment-based recognition of argumentation structure in short texts','Workshop on Argumentation Mining',2014),('W14-2113','Titles That Announce Argumentative Claims in Biomedical Research Articles','Workshop on Argumentation Mining',2014),('W14-2114','Extracting Higher Order Relations From Biomedical Text','Workshop on Argumentation Mining',2014),('W14-2115','Survey in sentiment, polarity and function analysis of citation','Workshop on Argumentation Mining',2014),('W14-2116','Indicators of Argument-conclusion Relationships. An Approach for Argumentation Mining in German Discourses','Workshop on Argumentation Mining',2014),('W14-2117','Extracting Imperatives from Wikipedia Article for Deletion Discussions','Workshop on Argumentation Mining',2014),('W14-2118','Requirement Mining in Technical Documents','Workshop on Argumentation Mining',2014),('W14-2201','Aikuma: A Mobile App for Collaborative Language Documentation','ComputEL',2014),('W14-2202','Documenting Endangered Languages with the WordsEye Linguistics Tool','ComputEL',2014),('W14-2203','Small Languages, Big Data: Multilingual Computational Tools and Techniques for the Lexicography of Endangered Languages','ComputEL',2014),('W14-2204','LingSync & the Online Linguistic Database: New Models for the Collection and Management of Data for Language Communities, Linguists and Language Learners','ComputEL',2014),('W14-2205','Modeling the Noun Morphology of Plains Cree','ComputEL',2014),('W14-2206','Learning Grammar Specifications from IGT: A Case Study of Chintang','ComputEL',2014),('W14-2207','Creating Lexical Resources for Endangered Languages','ComputEL',2014),('W14-2208','Estimating Native Vocabulary Size in an Endangered Language','ComputEL',2014),('W14-2209','InterlinguaPlus Machine Translation Approach for Local Languages: Ekegusii & Swahili','ComputEL',2014),('W14-2210','Building and Evaluating Somali Language Corpora','ComputEL',2014),('W14-2211','SeedLing: Building and Using a Seed corpus for the Human Language Project','ComputEL',2014),('W14-2212','Short-Term Projects, Long-Term Benefits: Four Student NLP Projects for Low-Resource Languages','ComputEL',2014),('W14-2213','Data Warehouse, Bronze, Gold, STEC, Software','ComputEL',2014),('W14-2214','Time to Change the D in DEL','ComputEL',2014),('W14-2301','Conversational Metaphors in Use: Exploring the Contrast between Technical and Everyday Notions of Metaphor','metaphor in NLP',2014),('W14-2302','Different Texts, Same Metaphors: Unigrams and Beyond','metaphor in NLP',2014),('W14-2303','Metaphor Detection through Term Relevance','metaphor in NLP',2014),('W14-2304','Multi-dimensional abstractness in cross-domain mappings','metaphor in NLP',2014),('W14-2305','Abductive Inference for Interpretation of Metaphors','metaphor in NLP',2014),('W14-2306','Computing Affect in Metaphors','metaphor in NLP',2014),('W14-2307','A Service-Oriented Architecture for Metaphor Processing','metaphor in NLP',2014),('W14-2401','Learning a Lexicon for Broad-coverage Semantic Parsing','SP',2014),('W14-2402','Semantic Parsing using Distributional Semantics and Probabilistic Logic','SP',2014),('W14-2403','Large-scale CCG Induction from the Groningen Meaning Bank','SP',2014),('W14-2404','Semantic Parsing for Text to 3D Scene Generation','SP',2014),('W14-2405','A Deep Architecture for Semantic Parsing','SP',2014),('W14-2406','Combining Formal and Distributional Models of Temporal and Intensional Semantics','SP',2014),('W14-2407','Cooking with Semantics','SP',2014),('W14-2408','Representing Caused Motion in Embodied Construction Grammar','SP',2014),('W14-2409','Low-Dimensional Embeddings of Logic','SP',2014),('W14-2410','Software Requirements: A new Domain for Semantic Parsers','SP',2014),('W14-2411','From Treebank Parses to Episodic Logic and Commonsense Inference','SP',2014),('W14-2412','On maximum spanning DAG algorithms for semantic DAG parsing','SP',2014),('W14-2413','Intermediary Semantic Representation through Proposition Structures','SP',2014),('W14-2414','Efficient Logical Inference for Semantic Processing','SP',2014),('W14-2415','Towards README-EVAL : Interpreting README File Instructions','SP',2014),('W14-2416','Freebase QA: Information Extraction or Semantic Parsing?','SP',2014),('W14-2501','Is It All in the Phrasing? Computational Explorations in How We Say What We Say, and Why It Matters','LTCSS',2014),('W14-2502','Creating and Destroying Party Brands','LTCSS',2014),('W14-2503','Sociolinguistics for Computational Social Science','LTCSS',2014),('W14-2504','Location and Language Use in Social Media','LTCSS',2014),('W14-2505','Overview of the 2014 NLP Unshared Task in PoliInformatics','LTCSS',2014),('W14-2506','Context-based Natural Language Processing for GIS-based Vague Region Visualization','LTCSS',2014),('W14-2507','Extracting Socioeconomic Patterns from the News: Modelling Text and Outlet Importance Jointly','LTCSS',2014),('W14-2508','Fact Checking: Task definition and dataset construction','LTCSS',2014),('W14-2509','Finding Eyewitness Tweets During Crises','LTCSS',2014),('W14-2510','Inducing Information Structures for Data-driven Text Analysis','LTCSS',2014),('W14-2511','Information density, Heapsâ€™ Law, and perception of factiness in news','LTCSS',2014),('W14-2512','Measuring the Public Accountability of New Modes of Governance','LTCSS',2014),('W14-2513','Optimizing Features in Active Machine Learning for Complex Qualitative Content Analysis','LTCSS',2014),('W14-2514','Power of Confidence: How Poll Scores Impact Topic Dynamics in Political Debates','LTCSS',2014),('W14-2515','Predicting Fine-grained Social Roles with Selectional Preferences','LTCSS',2014),('W14-2516','Predicting Party Affiliations from European Parliament Debates','LTCSS',2014),('W14-2517','Temporal Analysis of Language through Neural Language Models','LTCSS',2014),('W14-2518','Using Simple NLP Tools to Trace the Globalization of the Art World','LTCSS',2014),('W14-2519','Issue Framing as a Generalizable Phenomenon','LTCSS',2014),('W14-2520','I Want to Talk About, Again, My Record On Energy ...\\'\\': Modeling Agendas and Framing in Political Debates and Other Conversations','LTCSS',2014),('W14-2601','Words: Evaluative, Emotional, Colourful, Musical!','WASSA',2014),('W14-2602','Robust Cross-Domain Sentiment Analysis for Low-Resource Languages','WASSA',2014),('W14-2603','An Investigation for Implicatures in Chinese : Implicatures in Chinese and in English are similar !','WASSA',2014),('W14-2604','Inducing Domain-specific Noun Polarity Guided by Domain-independent Polarity Preferences of Adjectives','WASSA',2014),('W14-2605','Aspect-Level Sentiment Analysis in Czech','WASSA',2014),('W14-2606','Linguistic Models of Deceptive Opinion Spam','WASSA',2014),('W14-2607','Semantic Role Labeling of Emotions in Tweets','WASSA',2014),('W14-2608','An Impact Analysis of Features in a Classification Approach to Irony Detection in Product Reviews','WASSA',2014),('W14-2609','Modelling Sarcasm in Twitter, a Novel Approach','WASSA',2014),('W14-2610','Emotive or Non-emotive: That is The Question','WASSA',2014),('W14-2611','Challenges in Creating a Multilingual Sentiment Analysis Application for Social Media Mining','WASSA',2014),('W14-2612','Two-Step Model for Sentiment Lexicon Extraction from Twitter Streams','WASSA',2014),('W14-2613','Linguistically Informed Tweet Categorization for Online Reputation Management','WASSA',2014),('W14-2614','Credibility Adjusted Term Frequency: A Supervised Term Weighting Scheme for Sentiment Analysis and Text Classification','WASSA',2014),('W14-2615','Opinion Mining and Topic Categorization with Novel Term Weighting','WASSA',2014),('W14-2616','Sentiment classification of online political discussions: a comparison of a word-based and dependency-based method','WASSA',2014),('W14-2617','Improving Agreement and Disagreement Identification in Online Discussions with A Socially-Tuned Sentiment Lexicon','WASSA',2014),('W14-2618','Lexical Acquisition for Opinion Inference: A Sense-Level Lexicon of Benefactive and Malefactive Events','WASSA',2014),('W14-2619','Dive deeper: Deep Semantics for Sentiment Analysis','WASSA',2014),('W14-2620','Evaluating Sentiment Analysis Evaluation: A Case Study in Securities Trading','WASSA',2014),('W14-2621','Sentiment Classification on Polarity Reviews: An Empirical Study Using Rating-based Features','WASSA',2014),('W14-2622','Effect of Using Regression on Class Confidence Scores in Sentiment Analysis of Twitter Data','WASSA',2014),('W14-2623','A cognitive study of subjectivity extraction in sentiment annotation','WASSA',2014),('W14-2624','The Use of Text Similarity and Sentiment Analysis to Examine Rationales in the Large-Scale Online Deliberations','WASSA',2014),('W14-2625','A Conceptual Framework for Inferring Implicatures','WASSA',2014),('W14-2701','Detecting Sociostructural Beliefs about Group Status Differences in Online Discussions','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2702','Using County Demographics to Infer Attributes of Twitter Users','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2703','The Enrollment Effect: A Study of Amazon\\'s Vine Program','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2704','Discourse Analysis of User Forums in an Online Weight Loss Application','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2705','A Unified Topic-Style Model for Online Discussions','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2706','Self-disclosure topic model for Twitter conversations','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2707','Detecting and Evaluating Local Text Reuse in Social Networks','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2708','Generating Subjective Responses to Opinionated Articles in Social Media: An Agenda-Driven Architecture and a Turing-Like Test','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2709','A Semi-Automated Method of Network Text Analysis Applied to 150 Original Screenplays','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2710','Power of Confidence: How Poll Scores Impact Topic Dynamics in Political Debates','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2711','As Long as You Name My Name Right: Social Circles and Social Sentiment in the Hollywood Hearings','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2712','Towards Tracking Political Sentiment through Microblog Data','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2713','Innovation of Verbs in Hebrew','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2714','User Type Classification of Tweets with Implications for Event Recognition','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2715','Collective Stance Classification of Posts in Online Debate Forums','Joint Workshop on Social Dynamics and Personal Attributes in Social Media',2014),('W14-2801','Revisiting Word Neighborhoods for Speech Recognition','SIGMORPHON and SIGFSM',2014),('W14-2802','The Error-driven Ranking Model of the Acquisition of Phonotactics: How to Keep the Faithfulness Constraints at Bay','SIGMORPHON and SIGFSM',2014),('W14-2803','Comparing Models of Phonotactics for Word Segmentation','SIGMORPHON and SIGFSM',2014),('W14-2804','Generalizing Inflection Tables into Paradigms with Finite State Operations','SIGMORPHON and SIGFSM',2014),('W14-2805','Automatic Conversion of Dialectal Tamil Text to Standard Written Tamil Text using FSTs','SIGMORPHON and SIGFSM',2014),('W14-2806','Rule Based Morphological Analyzer of Kazakh Language','SIGMORPHON and SIGFSM',2014),('W14-2807','Rules, Analogy, and Social Factors Codetermine Past-tense Formation Patterns in English','SIGMORPHON and SIGFSM',2014),('W14-2808','10 Open Questions in Computational Morphonology','SIGMORPHON and SIGFSM',2014),('W14-2901','Augmenting FrameNet Via PPDB','Events: Definition, Detection, Coreference, and Representation',2014),('W14-2902','Verbal Valency Frame Detection and Selection in Czech and English','Events: Definition, Detection, Coreference, and Representation',2014),('W14-2903','Challenges of Adding Causation to Richer Event Descriptions','Events: Definition, Detection, Coreference, and Representation',2014),('W14-2904','Inter-annotator Agreement for ERE annotation','Events: Definition, Detection, Coreference, and Representation',2014),('W14-2905','Unsupervised Techniques for Extracting and Clustering Complex Events in News','Events: Definition, Detection, Coreference, and Representation',2014),('W14-2906','Conceptual and Practical Steps in Event Coreference Analysis of Large-scale Data','Events: Definition, Detection, Coreference, and Representation',2014),('W14-2907','A Comparison of the Events and Relations Across ACE, ERE, TAC-KBP, and FrameNet Annotation Standards','Events: Definition, Detection, Coreference, and Representation',2014),('W14-2908','Is the Stanford Dependency Representation Semantic?','Events: Definition, Detection, Coreference, and Representation',2014),('W14-2909','Qualities of Eventiveness','Events: Definition, Detection, Coreference, and Representation',2014),('W14-2910','Evaluation for Partial Event Coreference','Events: Definition, Detection, Coreference, and Representation',2014),('W14-3001','FrameNet: A Knowledge Base for Natural Language Processing','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3002','The Case for Empiricism (With and Without Statistics)','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3003','Case, Constructions, FrameNet, and the Deep Lexicon','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3004','SemLink+: FrameNet, VerbNet and Event Ontologies','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3005','FrameNet and Linked Data','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3006','Bridging Text and Knowledge with Frames','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3007','Statistical Models for Frame-Semantic Parsing','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3008','Using Frame Semantics in Natural Language Processing','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3009','Who Evoked that Frame? Some Thoughts on Context Effects and Event Types','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3010','The Role of Adverbs in Sentiment Analysis','Frame Semantics in NLP: A Workshop in Honor of Chuck Fillmore (1929-2014)',2014),('W14-3101','MiTextExplorer: Linked brushing and mutual information for exploratory text data analysis','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3102','Interactive Learning of Spatial Knowledge for Text to 3D Scene Generation','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3103','Dynamic Wordclouds and Vennclouds for Exploratory Data Analysis','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3104','Active Learning with Constrained Topic Model','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3105','GLANCE Visualizes Lexical Phenomena for Language Learning','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3106','SPIED: Stanford Pattern based Information Extraction and Diagnostics','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3107','Interactive Exploration of Asynchronous Conversations: Applying a User-centered Approach to Design a Visual Text Analytic System','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3108','MUCK: A toolkit for extracting and visualizing semantic dimensions of large text collections','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3109','Design of an Active Learning System with Human Correction for Content Analysis','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3110','LDAvis: A method for visualizing and interpreting topics','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3111','Hiearchie: Visualization for Hierarchical Topic Models','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3112','Concurrent Visualization of Relationships between Words and Topics in Topic Models','Workshop on Interactive Language Learning, Visualization, and Interfaces',2014),('W14-3201','Predicting military and veteran suicide risk: Cultural aspects','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3202','Linguistic Indicators of Severity and Progress in Online Text-based Therapy for Depression','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3203','Comparison of different feature sets for identification of variants in progressive aphasia','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3204','Aided diagnosis of dementia type through computer-based analysis of spontaneous speech','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3205','Assessing Violence Risk in Threatening Communications','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3206','Detecting linguistic idiosyncratic interests in autism using distributional semantic models','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3207','Quantifying Mental Health Signals in Twitter','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3208','Applying prosodic speech features in mental health care: An exploratory study in a life-review intervention for depression','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3209','Challenges in Automating Maze Detection','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3210','Learning Predictive Linguistic Features for Alzheimerâ€™s Disease and related Dementias using Verbal Utterances','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3211','Linguistic and Acoustic Features for Automatic Identification of Autism Spectrum Disorders in Children\\'s Narrative','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3212','Mining Themes and Interests in the Asperger\\'s and Autism Community','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3213','Toward Macro-Insights for Suicide Prevention: Analyzing Fine-Grained Distress at Scale','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3214','Towards Assessing Changes in Degree of Depression through Facebook','Workshop on Computational Linguistics and Clinical Psychology: From Linguistic Signal to Clinical Reality',2014),('W14-3301','Efficient Elicitation of Annotations for Human Evaluation of Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3302','Findings of the 2014 Workshop on Statistical Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3303','Parallel FDA5 for Fast Deployment of Accurate Statistical Machine Translation Systems','Workshop on Statistical Machine Translation',2014),('W14-3304','Yandex School of Data Analysis Russian-English Machine Translation System for WMT14','Workshop on Statistical Machine Translation',2014),('W14-3305','CimS â€“ The CIS and IMS joint submission to WMT 2014 translating from English into German','Workshop on Statistical Machine Translation',2014),('W14-3306','English-to-Hindi system description for WMT 2014: Deep Source-Context Features for Moses','Workshop on Statistical Machine Translation',2014),('W14-3307','The KIT-LIMSI Translation System for WMT 2014','Workshop on Statistical Machine Translation',2014),('W14-3308','The IIT Bombay Hindi-English Translation System at WMT 2014','Workshop on Statistical Machine Translation',2014),('W14-3309','Edinburghâ€™s Phrase-based Machine Translation Systems for WMT-14','Workshop on Statistical Machine Translation',2014),('W14-3310','EU-BRIDGE MT: Combined Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3311','Phrasal: A Toolkit for New Directions in Statistical Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3312','Anaphora Models and Reordering for Phrase-Based SMT','Workshop on Statistical Machine Translation',2014),('W14-3313','The Karlsruhe Institute of Technology Translation Systems for the WMT 2014','Workshop on Statistical Machine Translation',2014),('W14-3314','The DCU-ICTCAS MT system at WMT 2014 on German-English Translation Task','Workshop on Statistical Machine Translation',2014),('W14-3315','The CMU Machine Translation Systems at WMT 2014','Workshop on Statistical Machine Translation',2014),('W14-3316','Stanford Universityâ€™s Submissions to the WMT 2014 Translation Task','Workshop on Statistical Machine Translation',2014),('W14-3317','The RWTH Aachen German-English Machine Translation System for WMT 2014','Workshop on Statistical Machine Translation',2014),('W14-3318','Large-scale Exact Decoding: The IMS-TTT submission to WMT14','Workshop on Statistical Machine Translation',2014),('W14-3319','Abu-MaTran at WMT 2014 Translation Task: Two-step Data Selection and RBMT-Style Synthetic Rules','Workshop on Statistical Machine Translation',2014),('W14-3320','The UA-Prompsit hybrid machine translation system for the 2014 Workshop on Statistical Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3321','Machine Translation and Monolingual Postediting: The AFRL WMT-14 System','Workshop on Statistical Machine Translation',2014),('W14-3322','CUNI in WMT14: Chimera Still Awaits Bellerophon','Workshop on Statistical Machine Translation',2014),('W14-3323','Manawi: Using Multi-Word Expressions and Named Entities to Improve Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3324','Edinburghâ€™s Syntax-Based Systems at WMT 2014','Workshop on Statistical Machine Translation',2014),('W14-3325','DCU-Lingo24 Participation in WMT 2014 Hindi-English Translation task','Workshop on Statistical Machine Translation',2014),('W14-3326','Machine Translation of Medical Texts in the Khresmoi Project','Workshop on Statistical Machine Translation',2014),('W14-3327','Postech\\'s System Description for Medical Text Translation Task','Workshop on Statistical Machine Translation',2014),('W14-3328','Domain Adaptation for Medical Text Translation using Web Resources','Workshop on Statistical Machine Translation',2014),('W14-3329','DCU Terminology Translation System for Medical Query Subtask at WMT14','Workshop on Statistical Machine Translation',2014),('W14-3330','LIMSI $ WMTâ€™14 Medical Translation Task','Workshop on Statistical Machine Translation',2014),('W14-3331','Combining Domain Adaptation Approaches for Medical Text Translation','Workshop on Statistical Machine Translation',2014),('W14-3332','Experiments in Medical Translation Shared Task at WMT 2014','Workshop on Statistical Machine Translation',2014),('W14-3333','Randomized Significance Tests in Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3334','Estimating Word Alignment Quality for SMT Reordering Tasks','Workshop on Statistical Machine Translation',2014),('W14-3335','Dependency-based Automatic Enumeration of Semantically Equivalent Word Orders for Evaluating Japanese Translations','Workshop on Statistical Machine Translation',2014),('W14-3336','Results of the WMT14 Metrics Shared Task','Workshop on Statistical Machine Translation',2014),('W14-3337','Efforts on Machine Learning over Human-mediated Translation Edit Rate','Workshop on Statistical Machine Translation',2014),('W14-3338','SHEF-Lite 2.0: Sparse Multi-task Gaussian Processes for Translation Quality Estimation','Workshop on Statistical Machine Translation',2014),('W14-3339','Referential Translation Machines for Predicting Translation Quality','Workshop on Statistical Machine Translation',2014),('W14-3340','FBK-UPV-UEdin participation in the WMT14 Quality Estimation shared-task','Workshop on Statistical Machine Translation',2014),('W14-3341','Target-Centric Features for Translation Quality Estimation','Workshop on Statistical Machine Translation',2014),('W14-3342','LIG System for Word Level QE task at WMT14','Workshop on Statistical Machine Translation',2014),('W14-3343','Exploring Consensus in Machine Translation for Quality Estimation','Workshop on Statistical Machine Translation',2014),('W14-3344','LIMSI Submission for WMT\\'14 QE Task','Workshop on Statistical Machine Translation',2014),('W14-3345','Parmesan: Meteor without Paraphrases with Paraphrased References','Workshop on Statistical Machine Translation',2014),('W14-3346','A Systematic Comparison of Smoothing Techniques for Sentence-Level BLEU','Workshop on Statistical Machine Translation',2014),('W14-3347','VERTa participation in the WMT14 Metrics Task','Workshop on Statistical Machine Translation',2014),('W14-3348','Meteor Universal: Language Specific Translation Evaluation for Any Target Language','Workshop on Statistical Machine Translation',2014),('W14-3349','Application of Prize based on Sentence Length in Chunk-based Automatic Evaluation of Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3350','LAYERED: Metric for Machine Translation Evaluation','Workshop on Statistical Machine Translation',2014),('W14-3351','IPA and STOUT: Leveraging Linguistic and Source-based Features for Machine Translation Evaluation','Workshop on Statistical Machine Translation',2014),('W14-3352','DiscoTK: Using Discourse Structure for Machine Translation Evaluation','Workshop on Statistical Machine Translation',2014),('W14-3353','Tolerant BLEU: a Submission to the WMT14 Metrics Task','Workshop on Statistical Machine Translation',2014),('W14-3354','BEER: BEtter Evaluation as Ranking','Workshop on Statistical Machine Translation',2014),('W14-3355','RED, The DCU-CASICT Submission of Metrics Tasks','Workshop on Statistical Machine Translation',2014),('W14-3356','Crowdsourcing High-Quality Parallel Data Extraction from Twitter','Workshop on Statistical Machine Translation',2014),('W14-3357','Using Comparable Corpora to Adapt MT Models to New Domains','Workshop on Statistical Machine Translation',2014),('W14-3358','Dynamic Topic Adaptation for SMT using Distributional Profiles','Workshop on Statistical Machine Translation',2014),('W14-3359','Unsupervised Adaptation for Statistical Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3360','An Empirical Comparison of Features and Tuning for Phrase-based Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3361','Bayesian Reordering Model with Feature Selection','Workshop on Statistical Machine Translation',2014),('W14-3362','Augmenting String-to-Tree and Tree-to-String Translation with Non-Syntactic Phrases','Workshop on Statistical Machine Translation',2014),('W14-3363','Linear Mixture Models for Robust Machine Translation','Workshop on Statistical Machine Translation',2014),('W14-3401','Natural Language Processing Methods for Enhancing Geographic Metadata for Phylogeography of Zoonotic Viruses','BioNLP ',2014),('W14-3402','Temporal Expression Recognition for Cell Cycle Phase Concepts in Biomedical Literature','BioNLP ',2014),('W14-3403','Classifying Negative Findings in Biomedical Publications','BioNLP ',2014),('W14-3404','Automated Disease Normalization with Low Rank Approximations','BioNLP ',2014),('W14-3405','Decomposing Consumer Health Questions','BioNLP ',2014),('W14-3406','Detecting Health Related Discussions in Everyday Telephone Conversations for Studying Medical Events in the Lives of Older Adults','BioNLP ',2014),('W14-3407','Coreference Resolution for Structured Drug Product Labels','BioNLP ',2014),('W14-3408','Generating Patient Problem Lists from the ShARe Corpus using SNOMED CT/SNOMED CT CORE Problem List','BioNLP ',2014),('W14-3409','A System for Predicting ICD-10-PCS Codes from Electronic Health Records','BioNLP ',2014),('W14-3410','Structuring Operative Notes using Active Learning','BioNLP ',2014),('W14-3411','Chunking Clinical Text Containing Non-Canonical Language','BioNLP ',2014),('W14-3412','Decision Style in a Clinical Reasoning Corpus','BioNLP ',2014),('W14-3413','Temporal Expressions in Swedish Medical Text â€“ A Pilot Study','BioNLP ',2014),('W14-3414','A repository of semantic types in the MIMIC II database clinical notes','BioNLP ',2014),('W14-3415','Extracting drug indications and adverse drug reactions from Spanish health social media','BioNLP ',2014),('W14-3416','Symptom extraction issue','BioNLP ',2014),('W14-3417','Seeking Informativeness in Literature Based Discovery','BioNLP ',2014),('W14-3418','Towards Gene Recognition from Rare and Ambiguous Abbreviations using a Filtering Approach','BioNLP ',2014),('W14-3419','FFTM: A Fuzzy Feature Transformation Method for Medical Documents','BioNLP ',2014),('W14-3420','Using statistical parsing to detect agrammatic aphasia','BioNLP ',2014),('W14-3601','Using Twitter to Collect a Multi-Dialectal Corpus of Arabic','ANLP',2014),('W14-3602','The International Corpus of Arabic: Compilation, Analysis and Evaluation','ANLP',2014),('W14-3603','Building a Corpus for Palestinian Arabic: a Preliminary Study','ANLP',2014),('W14-3604','Annotating corpus data for a quantitative, constructional analysis of motion verbs in Modern Standard Arabic','ANLP',2014),('W14-3605','The First QALB Shared Task on Automatic Text Correction for Arabic','ANLP',2014),('W14-3606','A Framework for the Classification and Annotation of Multiword Expressions in Dialectal Arabic','ANLP',2014),('W14-3607','Al-Bayan: An Arabic Question Answering System for the Holy Quran','ANLP',2014),('W14-3608','Automatic Arabic diacritics restoration based on deep nets','ANLP',2014),('W14-3609','Combining strategies for tagging and parsing Arabic','ANLP',2014),('W14-3610','Named Entity Recognition System for Dialectal Arabic','ANLP',2014),('W14-3611','Semantic Query Expansion for Arabic Information Retrieval','ANLP',2014),('W14-3612','Transliteration of Arabizi into Arabic Orthography: Developing a Parallel Annotated Arabizi-Arabic Script SMS/Chat Corpus','ANLP',2014),('W14-3613','Tunisian dialect Wordnet creation and enrichment using web resources and other Wordnets','ANLP',2014),('W14-3614','A Pipeline Approach to Supervised Error Correction for the QALB-2014 Shared Task','ANLP',2014),('W14-3615','Arabic Spelling Correction using Supervised Learning','ANLP',2014),('W14-3616','Autocorrection of arabic common errors for large text corpus','ANLP',2014),('W14-3617','Automatic Correction of Arabic Text: a Cascaded Approach','ANLP',2014),('W14-3618','CMUQ-2014: An SMT-based System for Automatic Arabic Error Correction','ANLP',2014),('W14-3619','Fast and Robust Arabic Error Correction System','ANLP',2014),('W14-3620','GWU-HASP: Hybrid Arabic Spelling and Punctuation Corrector','ANLP',2014),('W14-3621','TECHLIMED system description for the Shared Task on Automatic Arabic Error Correction','ANLP',2014),('W14-3622','The Columbia System in the QALB-2014 Shared Task on Arabic Error Correction','ANLP',2014),('W14-3623','A Large Scale Arabic Sentiment Lexicon for Arabic Opinion Mining','ANLP',2014),('W14-3624','Evaluating Distant Supervision for Subjectivity and Sentiment Analysis on Arabic Twitter Feeds','ANLP',2014),('W14-3625','Arabic Native Language Identification','ANLP',2014),('W14-3626','AIDArabic A Named-Entity Disambiguation Framework for Arabic Text','ANLP',2014),('W14-3627','Domain and Dialect Adaptation for Machine Translation into Egyptian Arabic','ANLP',2014),('W14-3628','Unsupervised Word Segmentation Improves Dialectal Arabic to English Machine Translation','ANLP',2014),('W14-3629','Arabizi Detection and Conversion to Arabic','ANLP',2014),('W14-3701','Normalized Entity Graph for Computing Local Coherence','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2014),('W14-3702','Exploiting Timegraphs in Temporal Relation Classification','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2014),('W14-3703','Multi-document Summarization Using Bipartite Graphs','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2014),('W14-3704','A Novel Two-stage Framework for Extracting Opinionated Sentences from News Articles','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2014),('W14-3705','Constructing Coherent Event Hierarchies from News Stories','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2014),('W14-3706','Semi-supervised Graph-based Genre Classification for Web Pages','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2014),('W14-3707','The Modular Community Structure of Linguistic Predication Networks','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2014),('W14-3708','From Visualisation to Hypothesis Construction for Second Language Acquisition','TextGraphs Workshop On Graph Based Methods For Natural Language Processing',2014),('W14-3901','Foreign Words and the Automatic Processing of Arabic Social Media Text Written in Roman Script','Workshop on Computational Approaches to Code Switching',2014),('W14-3902','Code Mixing: A Challenge for Language Identification in the Language of Social Media','Workshop on Computational Approaches to Code Switching',2014),('W14-3903','Detecting Code-Switching in a Multilingual Alpine Heritage Corpus','Workshop on Computational Approaches to Code Switching',2014),('W14-3904','Exploration of the Impact of Maximum Entropy in Recurrent Neural Network Language Models for Code-Switching Speech','Workshop on Computational Approaches to Code Switching',2014),('W14-3905','Predicting Code-switching in Multilingual Communication for Immigrant Communities','Workshop on Computational Approaches to Code Switching',2014),('W14-3906','Twitter Users #CodeSwitch Hashtags! #MoltoImportante #wow','Workshop on Computational Approaches to Code Switching',2014),('W14-3907','Overview for the First Shared Task on Language Identification in Code-Switched Data','Workshop on Computational Approaches to Code Switching',2014),('W14-3908','Word-level Language Identification using CRF: Code-switching Shared Task Report of MSR India System','Workshop on Computational Approaches to Code Switching',2014),('W14-3909','The CMU Submission for the Shared Task on Language Identification in Code-Switched Data','Workshop on Computational Approaches to Code Switching',2014),('W14-3910','Language Identification in Code-Switching Scenario','Workshop on Computational Approaches to Code Switching',2014),('W14-3911','AIDA: Identifying Code Switching in Informal Arabic Text','Workshop on Computational Approaches to Code Switching',2014),('W14-3912','The IUCL+ System: Word-Level Language Identification via Extended Markov Models','Workshop on Computational Approaches to Code Switching',2014),('W14-3913','Mixed Language and Code-Switching in the Canadian Hansard','Workshop on Computational Approaches to Code Switching',2014),('W14-3914','I am borrowing ya mixing ? An Analysis of English-Hindi Code Mixing in Facebook','Workshop on Computational Approaches to Code Switching',2014),('W14-3915','DCU-UVT: Word-Level Language Classification with Code-Mixed Data','Workshop on Computational Approaches to Code Switching',2014),('W14-3916','Incremental N-gram Approach for Language Identification in Code-Switched Text','Workshop on Computational Approaches to Code Switching',2014),('W14-3917','The Tel Aviv University System for the Code-Switching Workshop Shared Task','Workshop on Computational Approaches to Code Switching',2014),('W14-4001','Vector Space Models for Phrase-based Machine Translation','SSST',2014),('W14-4002','Bilingual Markov Reordering Labels for Hierarchical SMT','SSST',2014),('W14-4003','Better Semantic Frame Based MT Evaluation via Inversion Transduction Grammars','SSST',2014),('W14-4004','Rule-based Syntactic Preprocessing for Syntax-based Machine Translation','SSST',2014),('W14-4005','Applying HMEANT to English-Russian Translations','SSST',2014),('W14-4006','Reducing the Impact of Data Sparsity in Statistical Machine Translation','SSST',2014),('W14-4007','Expanding the Language model in a low-resource hybrid MT system','SSST',2014),('W14-4008','Syntax and Semantics in Quality Estimation of Machine Translation','SSST',2014),('W14-4009','Overcoming the Curse of Sentence Length for Neural Machine Translation using Automatic Segmentation','SSST',2014),('W14-4010','Ternary Segmentation for Improving Search in Top-down Induction of Segmental ITGs','SSST',2014),('W14-4011','A CYK+ Variant for SCFG Decoding Without a Dot Chart','SSST',2014),('W14-4012','On the Properties of Neural Machine Translation: Encoderâ€“Decoder Approaches','SSST',2014),('W14-4013','Transduction Recursive Auto-Associative Memory: Learning Bilingual Compositional Distributed Vector Representations of Inversion Transduction Grammars','SSST',2014),('W14-4014','Transformation and Decomposition for Efficiently Implementing and Improving Dependency-to-String Model In Moses','SSST',2014),('W14-4015','Word\\'s Vector Representations meet Machine Translation','SSST',2014),('W14-4016','Context Sense Clustering for Translation','SSST',2014),('W14-4017','Evaluating Word Order Recursively over Permutation-Forests','SSST',2014),('W14-4018','Preference Grammars and Soft Syntactic Constraints for GHKM Syntax-based Statistical Machine Translation','SSST',2014),('W14-4019','How Synchronous are Adjuncts in Translation Data?','SSST',2014),('W14-4101','Keynote: Data Archeology: A theory informed approach to analyzing data traces of social interaction in large scale learning environments','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4102','Your click decides your fate: Inferring Information Processing and Attrition Behavior from MOOC Video Clickstream Interactions','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4103','Identifying Student Leaders from MOOC Discussion Forums through Language Influence','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4104','Towards Identifying the Resolvability of Threads in MOOCs','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4105','Point-of-View Mining and Cognitive Presence in MOOCs: A (Computational) Linguistics Perspective','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4106','Keynote Talk: Analytics: climbing up the ladder of behavior control','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4107','Shared Task on Prediction of Dropout Over Time in Massively Open Online Courses','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4108','Capturing attrition intensifying structural traits from didactic interaction sequences of MOOC learners','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4109','A Process for Predicting MOOC Attrition','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4110','Predicting Attrition Along the Way: The UIUC Model','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4111','Predicting MOOC Dropout over Weeks Using Machine Learning Methods','Workshop on Analysis of Large Scale Social Interaction in MOOCs',2014),('W14-4201','INVITED TALK 1: Computational Processing of Arabic Dialects','LT4CloseLang',2014),('W14-4202','Learning from a Neighbor: Adapting a Japanese Parser for Korean Through Feature Transfer Learning','LT4CloseLang',2014),('W14-4203','Cross-lingual Dependency Parsing of Related Languages with Rich Morphosyntactic Tagsets','LT4CloseLang',2014),('W14-4204','Language variety identification in Spanish tweets','LT4CloseLang',2014),('W14-4205','Exploiting Language Variants Via Grammar Parsing Having Morphologically Rich Information','LT4CloseLang',2014),('W14-4206','Adapting Predicate Frames for Urdu PropBanking','LT4CloseLang',2014),('W14-4207','Measuring Language Closeness by Modeling Regularity','LT4CloseLang',2014),('W14-4208','INVITED TALK 2: Towards Universal Syntactic Processing of Natural Language','LT4CloseLang',2014),('W14-4209','Proper Name Machine Translation from Japanese to Japanese Sign Language','LT4CloseLang',2014),('W14-4210','Exploring cross-language statistical machine translation for closely related South Slavic languages','LT4CloseLang',2014),('W14-4211','Exploring System Combination approaches for Indo-Aryan MT Systems','LT4CloseLang',2014),('W14-4212','A Comparison of MT Methods for Closely Related Languages: a Case Study on Czech - Slovak Language Pair','LT4CloseLang',2014),('W14-4213','Handling OOV Words in Dialectal Arabic to English Machine Translation','LT4CloseLang',2014),('W14-4301','Keynote: Statistical Approaches to Open-domain Spoken Dialogue Systems','SIGDIAL',2014),('W14-4302','Crowdsourcing Street-level Geographic Information Using a Spoken Dialogue System','SIGDIAL',2014),('W14-4303','Out-of-Domain Spoken Dialogs in the Car: A WoZ Study','SIGDIAL',2014),('W14-4304','Situated Language Understanding at 25 Miles per Hour','SIGDIAL',2014),('W14-4305','Information Navigation System Based on POMDP that Tracks User Focus','SIGDIAL',2014),('W14-4306','Adapting to Personality Over Time: Examining the Effectiveness of Dialogue Policy Progressions in Task-Oriented Interaction','SIGDIAL',2014),('W14-4307','Probabilistic Human-Computer Trust Handling','SIGDIAL',2014),('W14-4308','Learning non-cooperative dialogue behaviours','SIGDIAL',2014),('W14-4309','Improving Classification-Based Natural Language Understanding with Non-Expert Annotation','SIGDIAL',2014),('W14-4310','User Modeling by Using Bag-of-Behaviors for Building a Dialog System Sensitive to the Interlocutor\\'s Internal State','SIGDIAL',2014),('W14-4311','Alex: Bootstrapping a Spoken Dialogue System for a New Domain by Real Users','SIGDIAL',2014),('W14-4312','InproTKs: A Toolkit for Incremental Situated Processing','SIGDIAL',2014),('W14-4313','Back to the Blocks World: Learning New Actions through Situated Human-Robot Dialogue','SIGDIAL',2014),('W14-4314','An easy method to make dialogue systems incremental','SIGDIAL',2014),('W14-4315','Free on-line speech recogniser based on Kaldi ASR toolkit producing word posterior lattices','SIGDIAL',2014),('W14-4316','Combining Task and Dialogue Streams in Unsupervised Dialogue Act Models','SIGDIAL',2014),('W14-4317','Dialogue Act Modeling for Non-Visual Web Access','SIGDIAL',2014),('W14-4318','Extractive Summarization and Dialogue Act Modeling on Email Threads: An Integrated Probabilistic Approach','SIGDIAL',2014),('W14-4319','Keynote: Language Adaptation','SIGDIAL',2014),('W14-4320','Addressing Class Imbalance for Improved Recognition of Implicit Discourse Relations','SIGDIAL',2014),('W14-4321','The Role of Polarity in Inferring Acceptance and Rejection in Dialogue','SIGDIAL',2014),('W14-4322','In-depth Exploitation of Noun and Verb Semantics to Identify Causation in Verb-Noun Pairs','SIGDIAL',2014),('W14-4323','Identifying Narrative Clause Types in Personal Stories','SIGDIAL',2014),('W14-4324','Evaluating a Spoken Dialogue System that Detects and Adapts to User Affective States','SIGDIAL',2014),('W14-4325','Initiative Taking in Negotiation','SIGDIAL',2014),('W14-4326','Knowledge Acquisition Strategies for Goal-Oriented Dialog Systems','SIGDIAL',2014),('W14-4327','Reducing Sparsity Improves the Recognition of Implicit Discourse Relations','SIGDIAL',2014),('W14-4328','Interaction Quality Estimation in Spoken Dialogue Systems Using Hybrid-HMMs','SIGDIAL',2014),('W14-4329','Learning to Re-rank for Interactive Problem Resolution and Query Refinement','SIGDIAL',2014),('W14-4330','Aspectual Properties of Conversational Activities','SIGDIAL',2014),('W14-4331','Detecting Inappropriate Clarification Requests in Spoken Dialogue Systems','SIGDIAL',2014),('W14-4332','Using Ellipsis Detection and Word Similarity for Transformation of Spoken Language into Grammatically Valid Sentences','SIGDIAL',2014),('W14-4333','SAWDUST: a Semi-Automated Wizard Dialogue Utterance Selection Tool for domain-independent large-domain dialogue','SIGDIAL',2014),('W14-4334','A Demonstration of Dialogue Processing in SimSensei Kiosk','SIGDIAL',2014),('W14-4335','MVA: The Multimodal Virtual Assistant','SIGDIAL',2014),('W14-4336','The PARLANCE mobile application for interactive search in English and Mandarin','SIGDIAL',2014),('W14-4337','The Second Dialog State Tracking Challenge','SIGDIAL',2014),('W14-4338','Optimizing Generative Dialog State Tracker via Cascading Gradient Descent','SIGDIAL',2014),('W14-4339','Web-style ranking and SLU combination for dialog state tracking','SIGDIAL',2014),('W14-4340','Word-Based Dialog State Tracking with Recurrent Neural Networks','SIGDIAL',2014),('W14-4341','Comparative Error Analysis of Dialog State Tracking','SIGDIAL',2014),('W14-4342','Extrinsic Evaluation of Dialog State Tracking and Predictive Metrics for Dialog Policy Optimization','SIGDIAL',2014),('W14-4343','The SJTU System for Dialog State Tracking Challenge 2','SIGDIAL',2014),('W14-4344','Markovian Discriminative Modeling for Dialog State Tracking','SIGDIAL',2014),('W14-4345','Sequential Labeling for Tracking Dynamic Dialog States','SIGDIAL',2014),('W14-4401','A Case Study: NLG meeting Weather Industry Demand for Quality and Quantity of Textual Weather Forecasts','INLG',2014),('W14-4402','PatientNarr: Towards generating patient-centric summaries of hospital stays','INLG',2014),('W14-4403','Using Conceptual Spaces to Model Domain Knowledge in Data-to-Text Systems','INLG',2014),('W14-4404','Text simplification using synchronous dependency grammars: Generalising automatically harvested rules','INLG',2014),('W14-4405','A language-independent method for the extraction of RDF verbalization templates','INLG',2014),('W14-4406','An ACG Analysis of the G-TAG Generation Process','INLG',2014),('W14-4407','A Template-based Abstractive Meeting Summarization: Leveraging Summary and Source Text Relationships','INLG',2014),('W14-4408','A Hybrid Approach to Multi-document Summarization of Opinions in Reviews','INLG',2014),('W14-4409','Adapting Graph Summaries to the Usersâ€™ Reading Levels','INLG',2014),('W14-4410','Experimental Design to Improve Topic Analysis Based Summarization','INLG',2014),('W14-4411','Towards a Description of Symbolic Maps','INLG',2014),('W14-4412','Adapting SimpleNLG for Brazilian Portuguese realisation','INLG',2014),('W14-4413','Generating Summaries of Line Graphs','INLG',2014),('W14-4414','Two-Stage Stochastic Email Synthesizer','INLG',2014),('W14-4415','A Framework for Health Behavior Change using Companionable Robots','INLG',2014),('W14-4416','Classifiers for data-driven deep sentence generation','INLG',2014),('W14-4417','Determining Content for Unknown Users: Lessons from the MinkApp Case Study','INLG',2014),('W14-4418','FlowGraph2Text: Automatic Sentence Skeleton Compilation for Procedural Text Generation','INLG',2014),('W14-4419','Generating Annotated Graphs using the NLG Pipeline Architecture','INLG',2014),('W14-4420','Generating Valence Shifted Turkish Sentences','INLG',2014),('W14-4421','Latent User Models for Online River Information Tailoring','INLG',2014),('W14-4422','Multi-adaptive Natural Language Generation using Principal Component Regression','INLG',2014),('W14-4423','TBI-Doc: Generating Patient & Clinician Reports from Brain Imaging Data','INLG',2014),('W14-4424','Towards Surface Realization with CCGs Induced from Dependencies','INLG',2014),('W14-4425','Two-Stage Stochastic Natural Language Generation for Email Synthesis by Modeling Sender Style and Topic Structure','INLG',2014),('W14-4501','Application-Driven Relation Extraction with Limited Distant Supervision','AHA!-Workshop on Information Discovery in Text',2014),('W14-4502','Mining temporal footprints from Wikipedia','AHA!-Workshop on Information Discovery in Text',2014),('W14-4503','Extracting a Repository of Events and Event References from News Clusters','AHA!-Workshop on Information Discovery in Text',2014),('W14-4504','Proposition Knowledge Graphs','AHA!-Workshop on Information Discovery in Text',2014),('W14-4505','Word Clustering Based on Un-LP Algorithm','AHA!-Workshop on Information Discovery in Text',2014),('W14-4506','Automatic Detection and Analysis of Impressive Japanese Sentences Using Supervised Machine Learning','AHA!-Workshop on Information Discovery in Text',2014),('W14-4507','A Comparative Study of Conversion Aided Methods for WordNet Sentence Textual Similarity','AHA!-Workshop on Information Discovery in Text',2014),('W14-4508','Using Distributional Semantics to Trace Influence and Imitation in Romantic Orientalist Poetry','AHA!-Workshop on Information Discovery in Text',2014),('W14-4509','Unsupervised Approach to Extracting Problem Phrases from User Reviews of Products','AHA!-Workshop on Information Discovery in Text',2014),('W14-4510','Towards Social Event Detection and Contextualisation for Journalists','AHA!-Workshop on Information Discovery in Text',2014),('W14-4601','Developing an Automatic Part-of-Speech Tagger for Scottish Gaelic','CLTW',2014),('W14-4602','Using Irish NLP resources in Primary School Education','CLTW',2014),('W14-4603','Tools facilitating better use of online dictionaries: Technical aspects of Multidict, Wordlink and Clilstore','CLTW',2014),('W14-4604','Processing Mutations in Breton with Finite-State Transducers','CLTW',2014),('W14-4605','Statistical models for text normalization and machine translation','CLTW',2014),('W14-4606','Cross-lingual Transfer Parsing for Low-Resourced Languages: An Irish Case Study','CLTW',2014),('W14-4607','Irish National Morphology Database: a high-accuracy open-source dataset of Irish words','CLTW',2014),('W14-4608','Developing further speech recognition resources for Welsh','CLTW',2014),('W14-4609','gdbank: The beginnings of a corpus of dependency structures and type-logical grammar in Scottish Gaelic','CLTW',2014),('W14-4610','Developing high-end reusable tools and resources for Irish-language terminology, lexicography, onomastics (toponymy), folkloristics, and more, using modern web and database technologies','CLTW',2014),('W14-4611','DECHE and the Welsh National Corpus Portal','CLTW',2014),('W14-4612','Subsegmental language detection in Celtic language text','CLTW',2014),('W14-4701','The CogALex-IV Shared Task on the Lexical Access Problem','CogALex',2014),('W14-4702','A Two-Stage Approach for Computing Associative Responses to a Set of Stimulus Words','CogALex',2014),('W14-4703','Deep Learning from Web-Scale Corpora for Better Dictionary Interfaces','CogALex',2014),('W14-4704','Exploring the use of word embeddings and random walks on Wikipedia for the CogAlex shared task','CogALex',2014),('W14-4705','ETS Lexical Associations System for the COGALEX-4 Shared Task','CogALex',2014),('W14-4706','Using Significant Word Co-occurences for the Lexical Access Problem','CogALex',2014),('W14-4707','NaDiR: Naive Distributional Response Generation','CogALex',2014),('W14-4708','Retrieving Word Associations with a Simple Neighborhood Algorithm in a Graph-based Resource','CogALex',2014),('W14-4709','Predicting sense convergence with distributional semantics: an application to the CogaLex 2014 shared task','CogALex',2014),('W14-4710','WordFinder','CogALex',2014),('W14-4711','(Digital) Goodies from the ERC Wishing Well: BabelNet, Babelfy, Video Games with a Purpose and the Wikipedia Bitaxonomy','CogALex',2014),('W14-4712','Measuring Similarity from Word Pair Matrices with Syntagmatic and Paradigmatic Associations','CogALex',2014),('W14-4713','Jibiki-LINKS: a tool between traditional dictionaries and lexical networks for modelling lexical resources','CogALex',2014),('W14-4714','When Frequency Data Meet Dispersion Data in the Extraction of Multi-word Units from a Corpus: A Study of Trigrams in Chinese','CogALex',2014),('W14-4715','Exploring Mental Lexicon in an Efficient and Economic Way: Crowdsourcing Method for Linguistic Experiments','CogALex',2014),('W14-4716','A Computational Approach to Generate a Sensorial Lexicon','CogALex',2014),('W14-4717','Database Design of an Online E-Learning Tool of Chinese Classifiers','CogALex',2014),('W14-4718','Default Physical Measurements in SUMO','CogALex',2014),('W14-4719','Lexical Access Preference and Constraint Strategies for Improving Multiword Expression Association within Semantic MT Evaluation','CogALex',2014),('W14-4720','A Lexical Network with a Morphological Model in It','CogALex',2014),('W14-4721','Dimensions of Metaphorical Meaning','CogALex',2014),('W14-4722','Constructing an Ontology of Japanese Lexical Properties: Specifying its Property Structures and Lexical Entries','CogALex',2014),('W14-4723','Frames and terminology: representing predicative terms in the field of the environment','CogALex',2014),('W14-4724','Modelling the Semantics of Adjectives in the Ontology-Lexicon Interface','CogALex',2014),('W14-4725','Discovering Conceptual Metaphors using Source Domain Spaces','CogALex',2014),('W14-4726','Wordfinding Problems and How to Overcome them Ultimately With the Help of a Computer','CogALex',2014),('W14-4801','Generalising and Normalising Distributional Contexts to Reduce Data Sparsity: Application to Medical Corpora','CompuTerm International Workshop On Computational Terminology',2014),('W14-4802','Assigning Terms to Domains by Document Classification','CompuTerm International Workshop On Computational Terminology',2014),('W14-4803','Identification of Bilingual Terms from Monolingual Documents for Statistical Machine Translation','CompuTerm International Workshop On Computational Terminology',2014),('W14-4804','Terminology Questions in Texts Authored by Patients','CompuTerm International Workshop On Computational Terminology',2014),('W14-4805','NPMI Driven Recognition of Nested Terms','CompuTerm International Workshop On Computational Terminology',2014),('W14-4806','Bilingual Termbank Creation via Log-Likelihood Comparison and Phrase-Based Statistical Machine Translation','CompuTerm International Workshop On Computational Terminology',2014),('W14-4807','The ACL RD-TEC: A Dataset for Benchmarking Terminology Extraction and Classification in Computational Linguistics','CompuTerm International Workshop On Computational Terminology',2014),('W14-4808','Building the Interface between Experts and Linguists in the Detection and characterisation of Neology in the Field of Neurosciences','CompuTerm International Workshop On Computational Terminology',2014),('W14-4809','A comparative User Evaluation of Terminology Management Tools for Interpreters','CompuTerm International Workshop On Computational Terminology',2014),('W14-4810','Automatic Annotation of Parameters from Nanodevice Development Research Papers','CompuTerm International Workshop On Computational Terminology',2014),('W14-4811','Evaluating Term Extraction Methods for Interpreters','CompuTerm International Workshop On Computational Terminology',2014),('W14-4812','Unsupervised Method for the Acquisition of General Language Paraphrases for Medical Compounds','CompuTerm International Workshop On Computational Terminology',2014),('W14-4813','Identifying Portuguese Multiword Expressions using Different Classification Algorithms - A Comparative Analysis','CompuTerm International Workshop On Computational Terminology',2014),('W14-4814','Towards Automatic Distinction between Specialized and Non-Specialized Occurrences of Verbs in Medical Corpora','CompuTerm International Workshop On Computational Terminology',2014),('W14-4901','STTS 2.0? Improving the Tagset for the Part-of-Speech-Tagging of German Spoken Data','Linguistic Annotation Workshop',2014),('W14-4902','Use of Coreference in Automatic Searching for Multiword Discourse Markers in the Prague Dependency Treebank','Linguistic Annotation Workshop',2014),('W14-4903','POS error detection in automatically annotated corpora','Linguistic Annotation Workshop',2014),('W14-4904','Aligning Chinese-English Parallel Parse Trees: Is it Feasible?','Linguistic Annotation Workshop',2014),('W14-4905','Sentence diagrams: their evaluation and combination','Linguistic Annotation Workshop',2014),('W14-4906','Finding your â€œInner-Annotatorâ€\x9d: An Experiment in Annotator Independence for Rating Discourse Coherence Quality in Essays','Linguistic Annotation Workshop',2014),('W14-4907','Optimizing annotation efforts to build reliable annotated corpora for training statistical models','Linguistic Annotation Workshop',2014),('W14-4908','A Web-based Geo-resolution Annotation and Evaluation Tool','Linguistic Annotation Workshop',2014),('W14-4909','Annotating Uncertainty in Hungarian Webtext','Linguistic Annotation Workshop',2014),('W14-4910','A Corpus Study for Identifying Evidence on Microblogs','Linguistic Annotation Workshop',2014),('W14-4911','Semi-Semantic Part of Speech Annotation and Evaluation','Linguistic Annotation Workshop',2014),('W14-4912','Multiple views as aid to linguistic annotation error analysis','Linguistic Annotation Workshop',2014),('W14-4913','Annotating a Large Representative Corpus of Clinical Notes for Parts of Speech','Linguistic Annotation Workshop',2014),('W14-4914','Part-of-speech Tagset and Corpus Development for Igbo, an African Language','Linguistic Annotation Workshop',2014),('W14-4915','Annotating descriptively incomplete language phenomena','Linguistic Annotation Workshop',2014),('W14-4916','Annotating Discourse Connectives in Spoken Turkish','Linguistic Annotation Workshop',2014),('W14-4917','Exploiting the Human Computational Effort Dedicated to Message Reply Formatting for Training Discursive Email Segmenters','Linguistic Annotation Workshop',2014),('W14-4918','Annotating Multiparty Discourse: Challenges for Agreement Metrics','Linguistic Annotation Workshop',2014),('W14-4919','Towards Automatic Annotation of Clinical Decision-Making Style','Linguistic Annotation Workshop',2014),('W14-4920','Interactive Annotation for Event Modality in Modern Standard and Egyptian Arabic Tweets','Linguistic Annotation Workshop',2014),('W14-4921','Situation Entity Annotation','Linguistic Annotation Workshop',2014),('W14-4922','Focus Annotation in Reading Comprehension Data','Linguistic Annotation Workshop',2014),('W14-5001','Modeling Blame to Avoid Positive Face Threats in Natural Language Generation','INLG and SIGDIAL 2014 Joint Session',2014),('W14-5002','Generating effective referring expressions using charts','INLG and SIGDIAL 2014 Joint Session',2014),('W14-5003','Crowdsourcing Language Generation Templates for Dialogue Systems','INLG and SIGDIAL 2014 Joint Session',2014),('W14-5201','A broad-coverage collection of portable NLP components for building shareable analysis pipelines','OIAF4HLT',2014),('W14-5202','Integrating UIMA with Alveo, a human communication science virtual laboratory','OIAF4HLT',2014),('W14-5203','Towards Model Driven Architectures for Human Language Technologies','OIAF4HLT',2014),('W14-5204','The Language Application Grid Web Service Exchange Vocabulary','OIAF4HLT',2014),('W14-5205','Significance of Bridging Real-world Documents and NLP Technologies','OIAF4HLT',2014),('W14-5206','A Conceptual Framework of Online Natural Language Processing Pipeline Application','OIAF4HLT',2014),('W14-5207','Command-line utilities for managing and exploring annotated corpora','OIAF4HLT',2014),('W14-5208','SSF: A Common Representation Scheme for Language Analysis for Language Technology Infrastructure Development','OIAF4HLT',2014),('W14-5209','Quo Vadis UIMA?','OIAF4HLT',2014),('W14-5210','Integrated Tools for Query-driven Development of Light-weight Ontologies and Information Extraction Components','OIAF4HLT',2014),('W14-5211','Intellectual Property Rights Management with Web Service Grids','OIAF4HLT',2014),('W14-5212','EUMSSI: a Platform for Multimodal Analysis and Recommendation using UIMA','OIAF4HLT',2014),('W14-5301','Corpus-based Study and Identification of Mandarin Chinese Light Verb Variations','VarDial',2014),('W14-5302','Diachronic proximity vs. data sparsity in cross-lingual parser projection. A case study on Germanic','VarDial',2014),('W14-5303','Pos-tagging different varieties of Occitan with single-dialect resources','VarDial',2014),('W14-5304','Unsupervised adaptation of supervised part-of-speech taggers for closely related languages','VarDial',2014),('W14-5305','Morphological Disambiguation and Text Normalization for Southern Quechua Varieties','VarDial',2014),('W14-5306','The Varitext platform and the Corpus des variÃ©tÃ©s nationales du franÃ§ais (CoVaNa-FR) as resources for the study of French from a pluricentric perspective','VarDial',2014),('W14-5307','A Report on the DSL Shared Task 2014','VarDial',2014),('W14-5308','Employing Phonetic Speech Recognition for Language and Dialect Specific Search','VarDial',2014),('W14-5309','Part-of-Speech Tag Disambiguation by Cross-Linguistic Majority Vote','VarDial',2014),('W14-5310','Compilation of a Swiss German Dialect Corpus and its Application to PoS Tagging','VarDial',2014),('W14-5311','Automatically building a Tunisian Lexicon for Deverbal Nouns','VarDial',2014),('W14-5312','Statistical Morph Analyzer (SMA++) for Indian Languages','VarDial',2014),('W14-5313','Improved Sentence-Level Arabic Dialect Classification','VarDial',2014),('W14-5314','Using Maximum Entropy Models to Discriminate between Similar Languages and Varieties','VarDial',2014),('W14-5315','Exploring Methods and Resources for Discriminating Similar Languages','VarDial',2014),('W14-5316','The NRC System for Discriminating Similar Languages','VarDial',2014),('W14-5317','Experiments in Sentence Language Identification with Groups of Similar Languages','VarDial',2014),('W14-5318','A Simple Baseline for Discriminating Similar Languages','VarDial',2014),('W14-5401','The Effect of Sensor Errors in Situated Human-Computer Dialogue','VL',2014),('W14-5402','Joint Navigation in Commander/Robot Teams: Dialog & Task Performance When Vision is Bandwidth-Limited','VL',2014),('W14-5403','TUHOI: Trento Universal Human Object Interaction Dataset','VL',2014),('W14-5404','Concept-oriented labelling of patent images based on Random Forests and proximity-driven generation of synthetic data','VL',2014),('W14-5405','Exploration of functional semantics of prepositions from corpora of descriptions of visual scenes','VL',2014),('W14-5406','A Poodle or a Dog? Evaluating Automatic Image Annotation Using Human Descriptions at Different Levels of Granularity','VL',2014),('W14-5407','Key Event Detection in Video using ASR and Visual Data','VL',2014),('W14-5408','Twitter User Gender Inference Using Combined Analysis of Text and Image Processing','VL',2014),('W14-5409','Semantic and geometric enrichment of 3D geo-spatial models with captioned photos and labelled illustrations','VL',2014),('W14-5410','Weakly supervised construction of a repository of iconic images','VL',2014),('W14-5411','Cross-media Cross-genre Information Ranking based on Multi-media Information Networks','VL',2014),('W14-5412','Speech-accompanying gestures in Russian: functions and verbal context','VL',2014),('W14-5413','DALES: Automated Tool for Detection, Annotation, Labelling, and Segmentation of Multiple Objects in Multi-Camera Video Streams','VL',2014),('W14-5414','A Hybrid Segmentation of Web Pages for Vibro-Tactile Access on Touch-Screen Devices','VL',2014),('W14-5415','Expression Recognition by Using Facial and Vocal Expressions','VL',2014),('W14-5416','Formulating Queries for Collecting Training Examples in Visual Concept Classification','VL',2014),('W14-5417','Towards Succinct and Relevant Image Descriptions','VL',2014),('W14-5418','Coloring Objects: Adjective-Noun Visual Semantic Compositionality','VL',2014),('W14-5419','Multi-layered Image Representation for Image Interpretation','VL',2014),('W14-5420','The Last 10 Metres: Using Visual Analysis and Verbal Communication in Guiding Visually Impaired Smartphone Users to Entrances','VL',2014),('W14-5421','Keyphrase Extraction using Textual and Visual Features','VL',2014),('W14-5422','Towards automatic annotation of communicative gesturing','VL',2014),('W14-5501','Towards Identifying Hindi/Urdu Noun Templates in Support of a Large-Scale LFG Grammar','WSSANLP',2014),('W14-5502','Konkanverter - A Finite State Transducer based Statistical Machine Transliteration Engine for Konkani Language','WSSANLP',2014),('W14-5503','Integrating Dictionaries into an Unsupervised Model for Myanmar Word Segmentation','WSSANLP',2014),('W14-5504','A Framework for Learning Morphology using Suffix Association Matrix','WSSANLP',2014),('W14-5505','English to Urdu Statistical Machine Translation: Establishing a Baseline','WSSANLP',2014),('W14-5506','A hybrid approach for automatic clause boundary identification in Hindi','WSSANLP',2014),('W14-5507','RBMT as an alternative to SMT for under-resourced languages','WSSANLP',2014),('W14-5508','Developing an interlingual translation lexicon using WordNets and Grammatical Framework','WSSANLP',2014),('W14-5509','A Dictionary Data Processing Environment and Its Application in Algorithmic Processing of Pali Dictionary Data for Future NLP Tasks','WSSANLP',2014),('W14-5511','Real Time Early-stage Influenza Detection with Emotion Factors from Sina Microblog','WSSANLP',2014),('W14-5512','Building English-Vietnamese Named Entity Corpus with Aligned Bilingual News Articles','WSSANLP',2014),('W14-5513','Character-Cluster-Based Segmentation using Monolingual and Bilingual Information for Statistical Machine Translation','WSSANLP',2014),('W14-5514','A rule based approach for automatic clause boundary detection and classification in Hindi','WSSANLP',2014),('W14-5601','Relative clause extraction for syntactic simplification','ATS-MA',2014),('W14-5602','Making Biographical Data in Wikipedia Readable: A Pattern-based Multilingual Approach','ATS-MA',2014),('W14-5603','Exploring the effects of Sentence Simplification on Hindi to English Machine Translation System','ATS-MA',2014),('W14-5604','The Fewer, the Better? A Contrastive Study about Ways to Simplify','ATS-MA',2014),('W14-5605','Automatic Text Simplification For Handling Intellectual Property (The Case of Multiple Patent Claims)','ATS-MA',2014),('W14-5606','Assessing Conformance of Manually Simplified Corpora with User Requirements: the Case of Autistic Readers','ATS-MA',2014),('W14-5607','Making historical texts accessible to everybody','ATS-MA',2014),('W14-5701','Modelling Regular Subcategorization Changes in German Particle Verbs','ComAComA',2014),('W14-5702','Splitting of Compound Terms in non-Prototypical Compounding Languages','ComAComA',2014),('W14-5703','Automatic Compound Processing: Compound Splitting and Semantic Analysis for Afrikaans and Dutch','ComAComA',2014),('W14-5704','A Taxonomy for Afrikaans and Dutch Compounds','ComAComA',2014),('W14-5705','Electrophysiological correlates of noun-noun compound processing by non-native speakers of English','ComAComA',2014),('W14-5706','A Comparative Study of Different Classification Methods for the Identification of Brazilian Portuguese Multiword Expressions','ComAComA',2014),('W14-5707','Wordsyoudontknow: Evaluation of lexicon-based decompounding with unknown handling','ComAComA',2014),('W14-5708','Multiword noun compound bracketing using Wikipedia','ComAComA',2014),('W14-5709','Distinguishing Degrees of Compositionality in Compound Splitting for Statistical Machine Translation','ComAComA',2014),('W14-5801','Paraphrasing of Italian Support Verb Constructions based on Lexical and Grammatical Resources','LG-LP',2014),('W14-5802','Using language technology resources and tools to construct Swedish FrameNet','LG-LP',2014),('W14-5803','Harmonizing Lexical Data for their Linking to Knowledge Objects in the Linked Data Framework','LG-LP',2014),('W14-5804','Terminology and Knowledge Representation. Italian Linguistic Resources for the Archaeological Domain','LG-LP',2014),('W14-5805','SentiMerge: Combining Sentiment Lexicons in a Bayesian Framework','LG-LP',2014),('W14-5806','Linguistically motivated Language Resources for Sentiment Analysis','LG-LP',2014),('W14-5807','Using Morphosemantic Information in Construction of a Pilot Lexical Semantic Resource for Turkish','LG-LP',2014),('W14-5808','Comparing Czech and English AMRs','LG-LP',2014),('W14-5809','Acquisition and enrichment of morphological and morphosemantic knowledge from the French Wiktionary','LG-LP',2014),('W14-5810','Annotation and Classification of Light Verbs and Light Verb Variations in Mandarin Chinese','LG-LP',2014),('W14-5811','Extended phraseological information in a valence dictionary for NLP applications','LG-LP',2014),('W14-5812','The fuzzy boundaries of operator verb and support verb constructions with dar â€œgiveâ€\x9d and ter â€œhaveâ€\x9d in Brazilian Portuguese','LG-LP',2014),('W14-5813','Collaboratively Constructed Linguistic Resources for Language Variants and their Exploitation in NLP Application â€“ the case of Tunisian Arabic and the Social Media','LG-LP',2014),('W14-5814','A Database of Paradigmatic Semantic Relation Pairs for German Nouns, Verbs, and Adjectives','LG-LP',2014),('W14-5815','Improving the Precision of Synset Links Between Cornetto and Princeton WordNet','LG-LP',2014),('W14-5816','Light verb constructions with be\\' in Hindi: A TAG analysis','LG-LP',2014),('W14-5817','The Lexicon-Grammar of Italian Idioms','LG-LP',2014),('W14-5818','Building a Semantic Transparency Dataset of Chinese Nominal Compounds: A Practice of Crowdsourcing Methodology','LG-LP',2014),('W14-5819','Annotate and Identify Modalities, Speech Acts and Finer-Grained Event Types in Chinese Text','LG-LP',2014),('W14-5901','SocialIrony','SocialNLP',2014),('W14-5902','Feature Selection for Highly Skewed Sentiment Analysis Tasks','SocialNLP',2014),('W14-5903','My Curiosity was Satisfied, but not in a Good Way: Predicting User Ratings for Online Recipes','SocialNLP',2014),('W14-5904','Automatic Identification of Arabic Language Varieties and Dialects in Social Media','SocialNLP',2014),('W14-5905','A Rule-Based Approach to Aspect Extraction from Product Reviews','SocialNLP',2014),('W14-5906','Multi-Lingual Sentiment Analysis of Social Data Based on Emotion-Bearing Patterns','SocialNLP',2014),('W14-5907','Recognition of Sentiment Sequences in Online Discussions','SocialNLP',2014),('W14-5908','Verbal Behaviors and Persuasiveness in Online Multimedia Content','SocialNLP',2014),('W14-5909','Content+Contex','SocialNLP',2014),('W14-6001','Investigating Context Parameters in Technology Term Recognition','SADAATL',2014),('W14-6002','Jargon-Term Extraction by Chunking','SADAATL',2014),('W14-6003','Ontology-based Technical Text Annotation','SADAATL',2014),('W14-6004','Extracting Aspects and Polarity from Patents','SADAATL',2014),('W14-6005','Pre-reordering Model of Chinese Special Sentences for Patent Machine Translation','SADAATL',2014),('W14-6006','A Study of Scientific Writing: Comparing Theoretical Guidelines with Practical Implementation','SADAATL',2014),('W14-6101','Parsing German: How Much Morphology Do We Need?','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6102','Joint Ensemble Model for POS Tagging and Dependency Parsing','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6103','Improving the parsing of French coordination through annotation standards and targeted features','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6104','Experiments with Easy-first nonprojective constituent parsing','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6105','Exploring Options for Fast Domain Adaptation of Dependency Parsers','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6106','Self-Training for Parsing Learner Text','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6107','The effect of disfluencies and learner errors on the parsing of spoken learner language','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6108','Initial Explorations in Two-phase Turkish Dependency Parsing by Incorporating Constituents','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6109','Experiments for Dependency Parsing of Greek','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6110','Introducing the IMS-WrocÅ‚aw-Szeged-CIS entry at the SPMRL 2014 Shared Task: Reranking and Morpho-syntax meet Unlabeled Data','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6111','Introducing the SPMRL 2014 Shared Task on Parsing Morphologically-rich Languages','Joint Workshop on Statistical Parsing and Semantic Processing of Morphologically Rich Languages',2014),('W14-6201','Corpus-based Translation of Ontologies for Improved Multilingual Semantic Annotation','SWAIE',2014),('W14-6202','Information Extraction for Social Media','SWAIE',2014),('W14-6203','Seed Selection for Distantly Supervised Web-Based Relation Extraction','SWAIE',2014),('W14-6204','Ontology-based Extraction of Structured Information from Publications on Preclinical Experiments for Spinal Cord Injury Treatments','SWAIE',2014),('W14-6205','Semi-supervised Sequence Labeling for Named Entity Extraction based on Tri-Training: Case Study on Chinese Person Name Extraction','SWAIE',2014),('W14-6206','Towards a robust framework for the semantic representation of temporal expressions in cultural legacy data','SWAIE',2014),('W90-0101','Using Tree Adjoining Grammars Systemic Framework In The','Workshop On Natural Language Generation',1990),('W90-0102','Generation And Synchronous Tree-Adjoining Grammars','Workshop On Natural Language Generation',1990),('W90-0103','A Connectionist Treatment Of Grammar For Generation: Relying On Emergents','Workshop On Natural Language Generation',1990),('W90-0104','A New Model For Lexical Choice For Open-Class Words','Workshop On Natural Language Generation',1990),('W90-0105','A Collocational Based Approach To Salience-Sensitive Lexical Selection','Workshop On Natural Language Generation',1990),('W90-0106','Natural Discourse Hypothesis Engine','Workshop On Natural Language Generation',1990),('W90-0107','Using Bidirectional Semantic Rules For Generation','Workshop On Natural Language Generation',1990),('W90-0108','Upper Modeling: Organizing Knowledge For Natural Language Processing','Workshop On Natural Language Generation',1990),('W90-0109','Abstract Linguistic Resources For Text Planning','Workshop On Natural Language Generation',1990),('W90-0110','Using Discourse Focus Temporal Focus And Spatial Focus To Generate Multisentential Text','Workshop On Natural Language Generation',1990),('W90-0111','Selection: Salience Relevance And The Coupling Between Domain-Level Tasks And Text Planning','Workshop On Natural Language Generation',1990),('W90-0112','Domain Communication Knowledge','Workshop On Natural Language Generation',1990),('W90-0113','An Object Oriented Approach To Content Planning For Text Generation','Workshop On Natural Language Generation',1990),('W90-0114','The Role Of Underlying Structure In Text Generation','Workshop On Natural Language Generation',1990),('W90-0115','The Basic Block Model Of Extended Explanations','Workshop On Natural Language Generation',1990),('W90-0116','The Local Organization Of Text','Workshop On Natural Language Generation',1990),('W90-0117','Parsimonious And Profligate Approaches To The Question Of Discourse Structure Relations','Workshop On Natural Language Generation',1990),('W90-0118','Reassessing Rhetorical Abstractions And Planning Mechanisms','Workshop On Natural Language Generation',1990),('W90-0119','Resolving Plan Ambiguity For Response Generation','Workshop On Natural Language Generation',1990),('W90-0120','Speaker Attitudes In Text Planning','Workshop On Natural Language Generation',1990),('W90-0121','Generating Peripheral Rhetorical Devices By Consulting A User Model','Workshop On Natural Language Generation',1990),('W90-0122','The Computer Generation Of Speech With Discoursally And Semantically Motivated Intonation','Workshop On Natural Language Generation',1990),('W90-0123','Relational-Grammar-Based Generation In The JETS Japanese-English Machine Translation System','Workshop On Natural Language Generation',1990),('W90-0124','Real-Time Generation From Systemic Grammars','Workshop On Natural Language Generation',1990),('W90-0125','Narrated Animation: A Case For Generation','Workshop On Natural Language Generation',1990),('W91-0101','Monotonicity Headedness And Reversible Grammar','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0102','Reversibility In A Constraint And Type Based Logic Grammar: Application To Secondary Predication','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0103','Towards Uniform Processing Of Constraint-Based Categorial Grammars','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0104','Inherently Reversible Grammars Logic Programming And Computability','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0105','Reversibility And Modularity In Natural Language Generation','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0106','Reversible NLP By Deriving The Grammars From The Knowledge Base','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0107','Syntactic Choice In Language Generation','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0108','Generation And Translation Towards A Formalism-Independent Characterisation','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0109','Reversible Machine Translation: What To Do When The Languages Don\\'t Line Up','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0110','A Uniform Architecture For Parsing Generation And Transfer','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0111','Common Heuristics For Parsing Generation And Whatever...','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0112','A General Computational Method For Grammar Inversion','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0113','Compiling Trace And Unification Grammar For Parsing And Generation','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0114','Shared Preferences','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0115','Handling Pragmatic Information With A Reversible Architecture','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0116','A Semantic Interpreter For Systemic Grammars','Workshop On Reversible Grammar In Natural Language Processing',1991),('W91-0201','Knowledge Representation And Knowledge Of Words','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0202','Rhetoric And Intentions In Discourse','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0203','Knowledge Management For Terminology-Intensive Applications: Needs And Tools','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0204','Interpretation Without Semantics','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0205','Logical Structures In The Lexicon','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0206','Conventional Metaphor And The Lexicon','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0207','Representation Of Semantic Knowledge With Term Subsumption Languages','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0208','Predictable Meaning Shift: Some Linguistic Properties Of Lexical Implication Rules','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0209','Lexical Operations In A Unification-Based Framework','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0210','Lexical Structures For Linguistic Inference','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0211','In So Many Words Knowledge As A Lexical Phenomenon','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0212','Redefining The Level Of The Word','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0213','Lexical And World Knowledge: Theoretical And Applied Viewpoints','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0214','Aspectual Requirements Of Temporal Connectives: Evidence For A Two-Level Approach To Semantics','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0215','A Model For The Interaction Of Lexical And Non-Lexical Knowledge In The Determination Of Word Meaning','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0216','For The Lexicon That Has Everything','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0217','Acquiring And Representing Semantic Information In A Lexical Knowledge Base','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0218','General Lexical Representation For An Effect Predicate','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0219','Development Of The Concept Dictionary Implementation Of Lexical Knowledge','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W91-0220','Presuppositions And Default Reasoning: A Study In Lexical Pragmatics','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0221','Lexicon Ontology And Text Meaning','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0222','A Two-Level Knowledge Representation For Machine Translation: Lexical Semantics And Tense/Aspect','Workshop On Lexical Semantics And Knowledge Representation',1991),('W91-0223','The Autonomy Of Shallow Lexical Knowledge','Workshop On Lexical Semantics And Knowledge Representation',1991),('W93-0101','Word Sense Disambiguation By Human Subjects: Computational And Psycholinguistic Applications','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0102','Towards Building Contextual Representations Of Word Senses Using Statistical Models','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0103','Lexical Concept Acquisition From Collocation Map','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0104','Internal And External Evidence In The Identification And Semantic Categorization Of Proper Names','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0105','Identifying Unknown Proper Names In Newswire Text','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0106','Customizing A Lexicon To Better Suit A Computational Task','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0107','Hierarchical Clustering Of Verbs','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0108','Detecting Dependencies Between Semantic Verb Subclasses And Subcategorization Frames In Text Corpora','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0109','The Automatic Acquisition Of Frequencies Of Verb Subcategorization Frames From Tagged Corpora','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0110','Acquiring Predicate-Argument Mapping Information From Multilingual Texts','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0111','Experiments In Syntactic And Semantic Classification And Disambiguation Using Bootstrapping','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0112','Structural Methods For Lexical/Semantic Patterns','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0113','Evaluation Techniques For Automatic Semantic Extraction: Comparing Syntactic And Window Based Approaches','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0114','Categorization And Standardizing Proper Nouns For Efficient Information Retrieval','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0115','The Long Journey From The Core To The Real Size Of Large LDBs','Workshop On The Acquisition Of Lexical Knowledge From Text',1993),('W93-0201','Rhetorical Relations: Necessary But Not Sufficient','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0202','Rhetoric And Intentions In Discourse','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0203','Knowledge Intention Rhetoric: Levels Of Variation In Multilingual Instructions','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0204','Speaker\\'s Intentions And Beliefs In Negative Imperatives','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0205','A Goal-Based Grammar Of Rhetoric','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0206','An Algorithm For High-Level Organization Of Multi-Paragraph Texts','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0207','Planning For Intentions With Rhetorical Relations','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0208','Structuring Two-Medium Dialog For Learning Language And Other Things','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0209','From Planning To Actions: Realizing Intentions By Rhetorical Means','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0210','In Defense Of Syntax: Informational Intentional And Rhetorical Structures In Discourse','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0211','Observations And Directions In Text Structure','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0212','Act Promptly Make Your God Happy: Representation And Rhetorical Relations In Natural Language Generation','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0213','Using Cue Phrases To Determine Rhetorical Relations','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0214','Towards Stratification Of RST','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0215','Domain-Dependent And Domain-Independent Rhetorical Relations','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0216','Empirical Evidence For Intention-Based Discourse Segmentation','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0217','The Need For Intentionally-Based Approaches To Language','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0218','Intentions In Bilingual Dialogue Processing','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0219','The Representation Of Interdependencies Between Communicative Goals And Rhetorical Relations In The Framework Of Multimedia Document Generation','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0220','On Structure And Intention','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0221','Textual Constraints Rhetorical Relations And Communicative Goals And Rhetorical Relations In The Framework Of Multimedia Document Generation','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0222','Assumption Underlying Discourse Relations: Which Ones Are Really There And Where Are They?','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0223','How Could Rhetorical Relations Be Used In Machine Translation?','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0224','On The Necessity Of Intentions And The Usefulness Of Rhetorical Relations: A Position Paper','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0225','Investigating Discourse Relations','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0226','Intentions Information And Inference: Two Rhetorical Questions','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0227','Rhetoric As Knowledge','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0228','Intentions Rhetoric Or Discourse Relations? A Case From Multilingual Document Generation','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0229','A Model Of Speech Act Planner Adapted To Multiagent Universes','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0230','On The Cognitive And Text-Analytic Status Of Coherence Relations','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0231','Domain Structure Rhetorical Structure And Text Structure','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0232','On Discourse Relations Rhetorical Relations And Rhetoric','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0233','Summarising As A Lever For Studying Large-Scale Discourse Structure','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0234','The Multifaceted Organization Of Discourse','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0235','Rhetorical Relations Action And Intentionality In Conversation','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0236','Intentionality In A Topical Approach Of Discourse Structure','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0237','Rhetorical Relations In Instructional Text Generation','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0238','Information And Deliberation In Discourse','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0239','Issues In Linguistic Segmentation','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0240','Closing The Gap Between Discourse Structure And Communicative Intention','Workshop On Intentionality And Structure In Discource Relations',1993),('W93-0301','Robust Bilingual Word Alignment For Machine Aided Translation','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0302','Robust Text Processing In Automated Information Retrieval','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0303','Document Filtering Using Semantic Information From A Machine Readable Dictionary','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0304','Toward A Cross-Linguistic Tagset','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0305','HMM-Based Part-Of-Speech Tagging For Chinese Corpora','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0306','NPtool A Detector Of English Noun Phrases','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0307','Structural Ambiguity And Conceptual Relations','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0308','Text Recognition And Collocations And Domain Codes','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0309','Extraction Of V-N-Collocations From Text Corpora: A Feasibility Study For German','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0310','Computation Of Word Associations Based On Co-Occurrences Of Words In Large Corpora','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0311','Corpus-Based Adaptation Mechanisms For Chinese Homophone Disambiguation','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0312','Example-Based Sense Tagging Of Running Chinese Text','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W93-0313','Experience About Compound Dictionary On Computer Networks','Workshop On Very Large Corpora: Academic And Industrial Perspectives',1993),('W94-0101','Qualitative And Quantitative Designs For Speech Translation (Invited Talk)','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0102','The Noisy Channel And The Braying Donkey','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0103','AMALGAM: Automatic Mapping Among Lexico-Grammatical Annotation Models','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0104','Study And Implementation Of Combined Techniques For Automatic Extraction Of Terminology','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0105','Parsing With Principles And Probabilities','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0106','Do We Need Linguistics When We Have Statistics? A Comparative Analysis Of The Contributions Of Linguistic Cues To A Statistical Word Grouping System','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0107','Complexity Of Description Of Primitives: Relevance To Local Statistical Computations','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0108','The Automatic Construction Of A Symbolic Parser Via Statistical Techniques','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0109','Integrating Symbolic And Statistical Approches In Speech And Natural Language Applications','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0110','Combining Linguistic With Statistical Methods In Automatic Speech Understanding','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0111','Exploring The Statistical Derivation Of Transformational Rule Sequences For Part-Of-Speech Tagging','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0112','Bootstrapping Statistical Processing Into A Rule-Based Natural Language Parser','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0113','Recovering From Parser Failures: A Hybrid Statistical/Symbolic Approach','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0114','Statistical Versus Symbolic Parsing For Captioned-Information Retrieval','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0115','Learning A Radically Lexical Grammar','Workshop On The Balancing Act: Combining Symbolic And Statistical Approaches To Language',1994),('W94-0201','Automated Tone Transcription','Workshop On Computational Phonology',1994),('W94-0202','Constraint-Based Morpho-Phonology','Workshop On Computational Phonology',1994),('W94-0203','Constraints Exceptions And Representations','Workshop On Computational Phonology',1994),('W94-0204','Default Finite State Machines And Finite State Phonology','Workshop On Computational Phonology',1994),('W94-0205','Lexical Phonology And Speech Style: Using A Model To Test A Theory','Workshop On Computational Phonology',1994),('W94-0206','Parsing Using Linearly Ordered Phonological Rules','Workshop On Computational Phonology',1994),('W94-0207','Qualitative And Quantitative Dynamics Of Vowels','Workshop On Computational Phonology',1994),('W94-0208','Segmenting Speech Without A Lexicon: The Roles Of Phonotactics And Speech Source','Workshop On Computational Phonology',1994),('W94-0301','Discovery And Format Of Input Structures For Tactical Generation','Workshop On Natural Language Generation',1994),('W94-0302','DPOCL: A Principled Approach To Discourse Planning','Workshop On Natural Language Generation',1994),('W94-0303','Building Underlying Structures For Multiparagraph Texts','Workshop On Natural Language Generation',1994),('W94-0304','Sequencing As A Planning Task','Workshop On Natural Language Generation',1994),('W94-0305','Discourse Planning As An Optimization Process','Workshop On Natural Language Generation',1994),('W94-0306','Intentions Structure And Expression In Multi-Lingual Instructions','Workshop On Natural Language Generation',1994),('W94-0307','Content And Rhetorical Status Selection In Instructional Texts','Workshop On Natural Language Generation',1994),('W94-0308','Expressing Procedural Relationships In Multilingual Instructions','Workshop On Natural Language Generation',1994),('W94-0309','On Moving On On Ontologies','Workshop On Natural Language Generation',1994),('W94-0310','On The Creative Use Of Language: The Form Of Lexical Resources','Workshop On Natural Language Generation',1994),('W94-0311','Semantic Lexicons: The Cornerstone For Lexical Choice In Natural Language Generation','Workshop On Natural Language Generation',1994),('W94-0312','Generating Event Descriptions With Sage: A Simulation And Generation Environment','Workshop On Natural Language Generation',1994),('W94-0313','Towards An Account Of Causation In A Multilingual Text Generation System','Workshop On Natural Language Generation',1994),('W94-0314','Generating Context Appropriate Word Orders In Turkish','Workshop On Natural Language Generation',1994),('W94-0315','Using A Textual Representation Level Component In The Context Of Discourse And Dialogue Generation','Workshop On Natural Language Generation',1994),('W94-0316','Building Another Bridge Over The Generation Gap','Workshop On Natural Language Generation',1994),('W94-0317','Planning Reference Choices For Argumentative Texts','Workshop On Natural Language Generation',1994),('W94-0318','Towards The Application Of Text Generation In An Integrated Publication System','Workshop On Natural Language Generation',1994),('W94-0319','Has A Consensus NL Generation Architecture Appeared And Is It Psycholinguistically Plausible?','Workshop On Natural Language Generation',1994),('W94-0320','The Role Of Cognitive Modeling In Communicative Intentions','Workshop On Natural Language Generation',1994),('W94-0321','Recognizing Digressive Questions Using A Model For Interactive Generation For Interactive Generation','Workshop On Natural Language Generation',1994),('W94-0322','Generating Indirect Answers To Yes-No Questions','Workshop On Natural Language Generation',1994),('W94-0323','Real-Time Natural Language Generation In NL-SOAR','Workshop On Natural Language Generation',1994),('W94-0324','Generating Cooperative System Responses In Information Retrieval Dialogues','Workshop On Natural Language Generation',1994),('W94-0325','Situation Viewpoints For Generation','Workshop On Natural Language Generation',1994),('W94-0326','Content Selection And Organization As A Process Involving Compromises','Workshop On Natural Language Generation',1994),('W94-0327','Bidirectional Incremental Generation And Analysis With Categorial Grammar And Indexed Quasi-Logical Form','Workshop On Natural Language Generation',1994),('W94-0328','Toward A Multidimensional Framework To Guide The Automated Generation Of Text Types','Workshop On Natural Language Generation',1994),('W94-0329','CORECT: Combining CSCW With Natural Language Generation For Collaborative Requirement Capture','Workshop On Natural Language Generation',1994),('W94-0330','Semanitic Syntax At Work','Workshop On Natural Language Generation',1994),('W94-0331','Generation In The LOLITA System: An Engineering Approach','Workshop On Natural Language Generation',1994),('W94-0332','Representing Conceptual And Linguistic Knowledge For Multi-Lingual Generation In A Technical Domain','Workshop On Natural Language Generation',1994),('W94-0333','Sign-Language Generation In ZARDOZ: An English To Sign-Language Translation System','Workshop On Natural Language Generation',1994),('W95-0101','Unsupervised Learning Of Disambiguation Rules For Part Of Speech Tagging','VLC',1995),('W95-0102','Lexical Heads Phrase Structure And The Induction Of Grammar','VLC',1995),('W95-0103','Prepositional Phrase Attachment Through A Backed-Off Model','VLC',1995),('W95-0104','A Bayesian Hybrid Method For Context-Sensitive Spelling Correction','VLC',1995),('W95-0105','Disambiguating Noun Groupings With Respect To Wordnet Senses','VLC',1995),('W95-0106','Trainable Coarse Bilingual Grammars For Parallel Text Bracketing','VLC',1995),('W95-0107','Text Chunking Using Transformation-Based Learning','VLC',1995),('W95-0108','Beyond Word N-Grams','VLC',1995),('W95-0109','Automatic Construction Of A Chinese Electronic Dictionary','VLC',1995),('W95-0110','Inverse Document Frequency (IDF): A Measure Of Deviations From Poisson','VLC',1995),('W95-0111','Automatic Suggestion Of Significant Terms For A Predefined Topic','VLC',1995),('W95-0112','Automatically Acquiring Conceptual Patterns Without An Annotated Corpus','VLC',1995),('W95-0113','Development Of A Partially Bracketed Corpus With Part-Of-Speech Information Only','VLC',1995),('W95-0114','Compiling Bilingual Lexicon Entries From A Non-Parallel English-Chinese Corpus','VLC',1995),('W95-0115','Automatic Evaluation And Uniform Filter Cascades For Inducing N-Best Translation Lexicons','VLC',1995),('W96-0007','Multilingual Generation Of Administrative Forms','INLG',1996),('W96-0101','Using Word Class For Part-Of-Speech Disambiguation','Workshop On Very Large Corpora',1996),('W96-0102','MBT: A Memory-Based Part Of Speech Tagger-Generator','Workshop On Very Large Corpora',1996),('W96-0103','Hierarchical Clustering Of Words And Application To NLP Tasks','Workshop On Very Large Corpora',1996),('W96-0104','Learning Similarity-Based Word Sense Disambiguation From Sparse Data','Workshop On Very Large Corpora',1996),('W96-0105','Selective Sampling Of Effective Example Sentence Sets For Word Sense Disambiguation','Workshop On Very Large Corpora',1996),('W96-0106','Relating Turing\\'s Formula And Zipf\\'s Law','Workshop On Very Large Corpora',1996),('W96-0107','Automatic Extraction Of Word Sequence Correspondences In Parallel Corpora','Workshop On Very Large Corpora',1996),('W96-0108','A Statistical Approach To Automatic OCR Error Correction In Context','Workshop On Very Large Corpora',1996),('W96-0109','Exploiting Text Structure For Topic Identification','Workshop On Very Large Corpora',1996),('W96-0110','Statistical Models For Deep-Structure Disambiguation','Workshop On Very Large Corpora',1996),('W96-0111','Two Questions About Data-Oriented Parsing','Workshop On Very Large Corpora',1996),('W96-0112','A Probabilistic Disambiguation Method Based On Psycholinguistic Principles','Workshop On Very Large Corpora',1996),('W96-0113','A Re-Estimation Method For Stochastic Language Modeling From Ambiguous Observations','Workshop On Very Large Corpora',1996),('W96-0114','Towards Automatic Grammar Acquisition From A Bracketed Corpus','Workshop On Very Large Corpora',1996),('W96-0201','A Geometric Approach To Mapping Bitext Correspondence','EMNLP',1996),('W96-0202','Parsing Chinese With An Almost-Context-Free Grammar','EMNLP',1996),('W96-0203','Unsupervised Learning Of Syntactic Knowledge: Methods And Measures','EMNLP',1996),('W96-0204','Modeling Conversational Speech For Speech Recognition','EMNLP',1996),('W96-0205','Automatic Extraction Of New Words From Japanese Texts Using Generalized Forward-Backward Search','EMNLP',1996),('W96-0206','Better Language Models With Model Merging','EMNLP',1996),('W96-0207','Combining Hand-Crafted Rules And Unsupervised Learning In Constraint-Based Morphological Disambiguation','EMNLP',1996),('W96-0208','Comparative Experiments On Disambiguating Word Senses: An Illustration Of The Role Of Bias In Machine Learning','EMNLP',1996),('W96-0209','Apportioning Development Effort In A Probabilistic LR Parsing System Through Evaluation','EMNLP',1996),('W96-0210','The Measure Of A Model','EMNLP',1996),('W96-0211','Automating Feature Set Selection For Case-Based Learning Of Linguistic Knowledge','EMNLP',1996),('W96-0212','Figures Of Merit For Best-First Probabilistic Chart Parsing','EMNLP',1996),('W96-0213','A Maximum Entropy Model For Part-Of-Speech Tagging','EMNLP',1996),('W96-0214','Efficient Algorithms For Parsing The DOP Model','EMNLP',1996),('W96-0301','Breadth And Depth Of Semantic Lexicons - Notes On The Workshop','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0302','How Language Structures Concepts - An Outline','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0303','Controlling The Application Of Lexical Rules','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0304','Using Lexical Semantic Techniques To Classify Free-Responses','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0305','Acquisition Of Computational-Semantic Lexicons From Machine Readable Lexical Resources','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0306','Acquisition Of Semantic Lexicons: Using Word Sense Disambiguation To Improve Precision','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0307','The Lexical Semantics Of English Count And Mass Nouns','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0308','Lexical Rules Is Italicized','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0309','Qualia Structure And The Compositional Interpretation Of Compounds','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0310','Lexical Rules For Deverbal Adjectives','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0311','Morphological Productivity In The Lexicon','Workshop On Breadth And Depth Of Semantic Lexicons',1996),('W96-0401','The HealthDoc Sentence Planner','INLG',1996),('W96-0402','Learning Micro-Planning Rules For Preventive Expressions','INLG',1996),('W96-0403','Paraphrasing And Aggregating Argumentative Texts Using Text Structure','INLG',1996),('W96-0404','Approximate Generation From Non-Hierarchical Representations','INLG',1996),('W96-0405','Input Specification In The WAG Sentence Generation System','INLG',1996),('W96-0406','PostGraphe: A System For The Generation Of Statistical Graphics And Text','INLG',1996),('W96-0407','Generating Patent Claims From Interactive Input','INLG',1996),('W96-0408','Considering The Effects Of Second Language Learning On Generation','INLG',1996),('W96-0409','Tactical Generation In A Free Constituent Order Language','INLG',1996),('W96-0410','Paying Heed To Collocations','INLG',1996),('W96-0411','Best-First Surface Realization','INLG',1996),('W96-0412','An Evaluation Of Anaphor Generation In Chinese','INLG',1996),('W96-0413','An Algorithm For Generating Quantifiers','INLG',1996),('W96-0414','A Study\\'of Some Lexical Differences Between French And Englisfi Instructions In A Multilingual Generation Framework','INLG',1996),('W96-0415','A Generative Perspective On Verbs And Their Readings','INLG',1996),('W96-0416','Sources Of Flexibility In Dynamic Hypertext Generation','INLG',1996),('W96-0417','Strategies For Comparison In Encyclopedia Descriptions','INLG',1996),('W96-0418','Matchmaking: Dialogue Modelling And Speech Generation Meet','INLG',1996),('W96-0501','An Overview Of SURGE: A Reusable Comprehensive Syntactic Realization Component','INLG',1996),('W96-0502','SPLAT: A Sentence-Plan Authoring Tool','INLG',1996),('W96-0503','The ModelExplainer','INLG',1996),('W96-0504','Drafter: An Interactive Support Tool For Writing','INLG',1996),('W96-0506','PICARD: The Next Generator','INLG',1996),('W96-0507','Overview Of AlethGen','INLG',1996),('W96-0508','On Lexical Aggregation And Ordering','INLG',1996),('W96-0509','Generating \\'Distributed\\' Referring Expressions: An Initial Report','INLG',1996),('W96-0510','Summarization: An Application For NL Generation','INLG',1996),('W96-0511','Implementing An Integration Of The Systemic Flowchart Model Of Dialogue And Rhetorical Structure Theory','INLG',1996),('W96-0512','An Architecture For Distributed Natural Language Summarization','INLG',1996),('W96-0513','Multilinguality And Reversibility In Computational Semantic Lexicons','INLG',1996),('W96-0514','The Computation Of The Informational Status Of Discourse Entities','INLG',1996),('W97-0101','Summary Of Invited Speech','Workshop On Very Large Corpora',1997),('W97-0102','Commercial Implementation Of Text Recognition Tools For VLC','Workshop On Very Large Corpora',1997),('W97-0103','Commercial Impact Of VLC Research','Workshop On Very Large Corpora',1997),('W97-0104','A Statistics-Based Chinese Parser','Workshop On Very Large Corpora',1997),('W97-0105','Probabilistic Parsing Of Unrestricted English Text With A Highly-Detailed Grammar','Workshop On Very Large Corpora',1997),('W97-0106','Grammar Acquisition Based On Clustering Analysis And Its Application To Statistical Parsing','Workshop On Very Large Corpora',1997),('W97-0107','Reestimation And Best-First Parsing Algorithm For Probabilistic Dependency Grammars','Workshop On Very Large Corpora',1997),('W97-0108','Domain-Specific Semantic Class Disambiguation Using WordNet','Workshop On Very Large Corpora',1997),('W97-0109','Corpus Based PP Attachment Ambiguity Resolution With A Semantic Dictionary','Workshop On Very Large Corpora',1997),('W97-0110','Corpus Based Statistical Generalization Tree In Rule Optimization','Workshop On Very Large Corpora',1997),('W97-0111','Clustering Co-Occurrence Graph Based On Transitivity','Workshop On Very Large Corpora',1997),('W97-0112','Knowledge Acquisition: Classification Of Terms In A Thesaurus From A Corpus','Workshop On Very Large Corpora',1997),('W97-0113','Data Reliability And Its Effects On Automatic Abstracting','Workshop On Very Large Corpora',1997),('W97-0114','Automatic Identification Of Zero Pronouns And Their Antecedents Within Aligned Sentence Pairs','Workshop On Very Large Corpora',1997),('W97-0115','Statistical Acquisition Of Terminology Dictionary','Workshop On Very Large Corpora',1997),('W97-0116','Acquiring German Prepositional Subcategorization Frames From Corpora','Workshop On Very Large Corpora',1997),('W97-0117','A Natural Language Correction Model For Continuous Speech Recognition','Workshop On Very Large Corpora',1997),('W97-0118','The Effects Of Corpus Size And Homogeneity On Language Model Quality','Workshop On Very Large Corpora',1997),('W97-0119','Finding Terminology Translations From Non-Parallel Corpora','Workshop On Very Large Corpora',1997),('W97-0120','A Self-Organizing Japanese Word Segmenter Using Heuristic Word Identification And Re-Estimation','Workshop On Very Large Corpora',1997),('W97-0121','Collocation Lattices And Maximum Entropy Models','Workshop On Very Large Corpora',1997),('W97-0122','Using Word Frequency Lists To Measure Corpus Homogeneity And Similarity Between Corpora','Workshop On Very Large Corpora',1997),('W97-0123','Maximum Entropy Model Learning Of Subcategorization Preference','Workshop On Very Large Corpora',1997),('W97-0124','Analysis Of Unknown Lexical Items Using Morphological And Syntactic Information With The TIMIT Corpus','Workshop On Very Large Corpora',1997),('W97-0125','A Local Grammar-Based Approach To Recognizing Of Proper Names In Korean Texts','Workshop On Very Large Corpora',1997),('W97-0126','A Statistical Approach To Thai Morphological Analyzer','Workshop On Very Large Corpora',1997),('W97-0127','Probabilistic Word Classification Based On Context-Sensitive Binary Tree Method','Workshop On Very Large Corpora',1997),('W97-0201','Getting Serious About Word Sense Disambiguation','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0202','Experience In WordNet Sense Tagging In The Wall Street Journal','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0203','Desiderata For Tagging With WordNet Synsets Or MCCA Categories','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0204','A Frame-Semantic Approach To Semantic Annotation','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0205','A Lexicon For Underspecified Semantic Tagging','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0206','Analysis Of A Hand-Tagging Task','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0207','Measuring Semantic Entropy','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0208','Sense Tagging: Semantic Tagging With A Lexicon','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0209','Selectional Preference And Sense Disambiguation','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0210','Investigating Complementary Methods For Verb Sense Pruning','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0211','Towards A Bootstrapping Framework For Corpus Semantic Tagging','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0212','Sense Tagging In Action Combining Different Tests With Additive Weighangs','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0213','A Perspective On Word Sense Disambiguation Methods And Their Evaluation','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0214','Writing Annotation Instructions','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0215','Combining Knowledge Sources For Automatic Semantic Tagging','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0216','Semantic Tagging And NLP Applications','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0217','Evaluating Automatic Semantic Taggers','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0218','Constructing Semantic Tagsets','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0219','Structured Lexicons And Semantic Tagging','Workshop On Tagging Text With Lexical Semantics: Why What And How?',1997),('W97-0301','A Linear Observed Time Statistical Parser Based On Maximum Entropy Models','EMNLP',1997),('W97-0302','Global Thresholding And Multiple-Pass Parsing','EMNLP',1997),('W97-0303','An Efficient Distribution Of Labor In A Two Stage Robust Interpretation Process','EMNLP',1997),('W97-0304','Text Segmentation Using Exponential Models','EMNLP',1997),('W97-0305','Detecting Subject Boundaries Within Text: A Language Independent Statistical Approach','EMNLP',1997),('W97-0306','Mistake-Driven Learning In Text Categorization','EMNLP',1997),('W97-0307','Tagging Grammatical Functions','EMNLP',1997),('W97-0308','On Aligning Trees','EMNLP',1997),('W97-0309','Aggregate And Mixed-Order Markov Models For Statistical Language Processing','EMNLP',1997),('W97-0310','Assigning Grammatical Relations With A Back-Off Model','EMNLP',1997),('W97-0311','Automatic Discovery Of Non-Compositional Compounds In Parallel Data','EMNLP',1997),('W97-0312','Learning To Tag Multilingual Texts Through Observation','EMNLP',1997),('W97-0313','A Corpus-Based Approach For Building Semantic Lexicons','EMNLP',1997),('W97-0314','Inducing Terminology For Lexical Acquisition','EMNLP',1997),('W97-0315','Name Searching And Information Retrieval','EMNLP',1997),('W97-0316','Lexicon Effects On Chinese Information Retrieval','EMNLP',1997),('W97-0317','Attaching Multiple Prepositional Phrases: Generalized Backed-Off Estimation','EMNLP',1997),('W97-0318','Learning Methods For Combining Linguistic Indicators To Classify Verbs','EMNLP',1997),('W97-0319','Probabilistic Coreference In Information Extraction','EMNLP',1997),('W97-0320','An Empirical Approach To Temporal Reference Resolution','EMNLP',1997),('W97-0321','Word Sense Disambiguation Based On Structured Semantic Space','EMNLP',1997),('W97-0322','Distinguishing Word Senses In Untagged Text','EMNLP',1997),('W97-0323','Exemplar-Based Word Sense Disambiguation: Some Recent Improvements','EMNLP',1997),('W97-0400','Spoken Language Translation','Workshop On Spoken Language Translation',1997),('W97-0401','Discourse Particles And Routine Formulas In Spoken Language Translation','Workshop On Spoken Language Translation',1997),('W97-0402','A Dialogue Analysis Model With Statistical Speech Act Processing For Dialogue Machine Translation','Workshop On Spoken Language Translation',1997),('W97-0403','Towards Translating Spoken Language Pragmatics In An Analogical Framework','Workshop On Spoken Language Translation',1997),('W97-0404','Correct Parts Extraction From Speech Recognition Results Using Semantic Distance Calculation And Its Application To Speech Translation','Workshop On Spoken Language Translation',1997),('W97-0405','A Formal Basis For Spoken Language Translation By Analogy','Workshop On Spoken Language Translation',1997),('W97-0406','Dealing With Multilinguality In A Spoken Language Query Translator','Workshop On Spoken Language Translation',1997),('W97-0407','Using Categories In The EUTRANS System','Workshop On Spoken Language Translation',1997),('W97-0408','English-To-Mandarin Speech Translation With Head Transducers','Workshop On Spoken Language Translation',1997),('W97-0409','Interactive Speech Translation In The DIPLOMAT Project','Workshop On Spoken Language Translation',1997),('W97-0410','Expanding The Domain Of A Multi-Lingual Speech-To-Speech Translation System','Workshop On Spoken Language Translation',1997),('W97-0411','Translation Methodology In The Spoken Language Translator: An Evaluation','Workshop On Spoken Language Translation',1997),('W97-0412','Six Issues In Speech Translation','Workshop On Spoken Language Translation',1997),('W97-0413','Combining Situated Reasoning With Semantic Transfer Minimally','Workshop On Spoken Language Translation',1997),('W97-0414','A Polish-To-English Text-To-Text Translation System Based On An Electronic Dictionary','Workshop On Spoken Language Translation',1997),('W97-0415','Spoken Language Translation With The ITSVox System','Workshop On Spoken Language Translation',1997),('W97-0501','Pragmatics And AAC Approaches To Conversational Goals','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0502','Automatic Message Indexing And Full Text Retrieval For A Communication Aid','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0503','Simple NLP Techniques For Expanding Telegraphic Sentences','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0504','Profet A New Generation Of Word Prediction: An Evaluation Study','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0505','Word Prediction For Inflected Languages: Application To Basque Language','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0506','Augmented And Alternative NLP Techniques For Augmentative And Alternative Communication','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0507','Using NLP In The Design Of A Conversation Aid For Non-Speaking Children','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0508','A Tutor For Teaching English As A Second Language For Deaf Users Of American Sign Language','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0509','Application Of NLP Technology To Production Of Closed-Caption TV. Programs In Japanese For The Hearing Impaired','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0510','A Software For Language Education And Rehabilitation Of Autistic-Like Children','Workshop On Natural Language Processing For Communication Aids',1997),('W97-0601','Evaluating Interactive Dialogue Systems: Extending Component Evaluation To Integrated System Evaluation','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0602','A Generic Template To Evaluate Integrated Components In Spoken Dialogue Systems','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0603','Generality And Objectivity: Central Issues In Putting A Dialogue Evaluation Tool Into Practical Use','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0604','An Object-Oriented Model For The Design Of Cross-Domain Dialogue Systems','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0605','Automatic Lexicon Enhancement By Means Of Corpus Tagging','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0606','Clarification Dialogues As Measure To Increase Robustness In A Spoken Dialogue System','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0607','Performance Measures For The Next Generation Of Spoken Natural Language Dialog Systems','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0608','A Practical Message-To-Speech Strategy For Dialogue Systems','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0609','Turn Off The Radio And Call Again: How Acoustic Clues Can Improve Dialogue Management','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0610','Context Modeling For Language And Speech Generation','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0611','Planning Efficient Mixed Initiative Dialogue','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0612','A Robust Dialogue System With Spontaneous Speech Understanding And Cooperative Response','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0613','The Casual Cashmere Diaper Bag: Constraining Speech Recognition Using Examples','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0614','Grammatical Analysis In The OVIS Spoken-Dialogue System','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0615','Filtering Errors And Repairing Linguistic Anomalies For Spoken Dialogue Systems','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0616','How To Obey The 7 Commandments For Spoken Dialogue?','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0617','Towards A PURE Spoken Dialogue System For Information Access','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0618','A Programmable Multi-Blackboard Architecture For Dialogue Processing Systems','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0619','Corpus-Based Information Presentation For A Spoken Public Transport Information System','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0620','Dialogue Strategies For Improving The Usability Of Telephone Human-Machine Communication','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0621','Speech-Graphics Dialogue Systems','Workshop On Interactive Spoken Dialog Systems: Bringing Speech And NLP Together In Real Applications',1997),('W97-0701','Summarising: Where Are We Now? Where Should We Go?','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0702','Salience-Based Content Characterisation Of Text Documents','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0703','Using Lexical Chains For Text Summarization','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0704','Automated Text Summarization In SUMMARIST','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0705','How To Appreciate The Quality Of Automatic Text Summarization? Examples Of FAN And MLUCE Protocols And Their Results On SERAPHIN','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0706','A Proposal For Task-Based Evaluation Of Text Summarization Systems','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0707','Automatic Text Summarization By Paragraph Extraction','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0708','Goal-Directed Approach For Text Summarization','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0709','Statistical Methods For Retrieving Most Significant Paragraphs In Newspaper Articles','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0710','Sentence Extraction As A Classification Task','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0711','A Scalable Summarization System Using Robust NLP','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0712','COSY-MATS: An Intelligent And Scalable Summarisation Shell','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0713','From Discourse Structures To Text Summaries','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0714','SimSum: Simulation Of Summarizing','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0715','A Formal Model Of Text Summarization Based On Condensation Operators Of A Terminological Logic','Workshop On Intelligent Scalable Text Summarization',1997),('W97-0801','Multilingual Design Of EuroWordNet','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0802','GermaNet - A Lexical-Semantic Net For German','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0803','Extending A Thesaurus By Classifying Words','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0804','Formal Redundancy And Consistency Checking Rules For The Lexicai Database WordNet 1.5','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0805','Lexical Discrimination With The Italian Version Of WordNet','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0806','Integrating A Lexical Database And A Training Collection For Text Categorization','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0807','Integration Of Hand-Crafted And Statistical Resources In Measuring Word Similarity','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0808','Word Sense Disambiguation For Acquisition Of Selectional Preferences','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0809','The Use Of Lexical Semantics In Information Extraction','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0810','Subject And Object Dependency Extraction Using Finite-State Transducers','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0811','An Experiment In Semantic Tagging Using Hidden Markov Model Tagging','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0812','Using Semantic Similarity To Acquire Cooccurrence Restrictions From Corpora','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0813','Inferring Semantic Similarity From Distributional Evidence: An Analogy-Based Approach To Word Sense Disambiguation','Workshop On Automatic Information Extraction And Building Of Lexical Semantic Resources For NLP Applications',1997),('W97-0901','Reuse Of A Proper Noun Recognition System In Commercial And Operational NLP Applications','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-0902','Developing A New Grammar Checker For English As A Second Language','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-0903','Software Re-Use And Evolution In Text Generation Applications','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-0904','Estimating The True Performance Of Classification-Based NLP Technology','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-0905','Tailored Patient Information: Some Issues And Questions','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-0906','Practical Considerations In Building A Multi-Lingual Authoring System For Business Letters','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-0907','A Language Identification Application Built On The Java Client / Server Platform','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-0908','Practical Experience With Grammar Sharing In Multilingual NLP','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-0909','NLP And Industry: Transfer And Reuse Of Technologies','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-0910','Recycling Lingware In A Multilingual MT System','Workshop On From Research To Commercial Applications: Making NLP Work In Practice',1997),('W97-1001','A Trainable Message Understanding System','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1002','Relational Learning Of Pattern-Match Rules For Information Extraction','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1003','A Preliminary Study Of Word Clustering Based On Syntactic Behavior','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1004','Learning New Compositions From Given Ones','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1005','A Statistical Decision Making Method: A Case Study On Prepositional Phrase Attachment','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1006','Method For Improving Automatic Word Categorization','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1007','From Psycholinguistic Modelling Of Interlanguage In Second Language Acquisition To A Computational Model','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1008','What Makes A Word: Learning Base Units In Japanese For Speech Recognition','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1009','Evolution Of A Rapidly Learned Representation For Speech','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1010','Learning Stochastic Categorial Grammars','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1011','Learning And Application Of Differential Grammars','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1012','Recurrent Neural-Network Learning Of Phonological Regularities In Turkish','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1013','Explanation-Based Learning Of Data-Oriented Parsing','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1014','Word Triggers And The EM Algorithm','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1015','A Comparative Study Of The Application Of Different Learning Techniques To Natural Language Interfaces','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1016','Resolving PP Attachment Ambiguities With Memory-Based Learning','Workshop On Computational Natural Language Learning CoNLL',1997),('W97-1101','A Complexity Measure For Diachronic Chinese Phonology','Workshop On Computational Phonology',1997),('W97-1102','Measuring Dialect Distance Phonetically','Workshop On Computational Phonology',1997),('W97-1103','Self Organisation In Vowel Systems Through Imitation','Workshop On Computational Phonology',1997),('W97-1104','Prediction Of Vowel And Consonant Place Of Articulation','Workshop On Computational Phonology',1997),('W97-1105','A Lexical Database Tool For Quantitative Phonological Research','Workshop On Computational Phonology',1997),('W97-1106','A Czech Morphological Lexicon','Workshop On Computational Phonology',1997),('W97-1107','Stochastic Phonological Grammars And Acceptability','Workshop On Computational Phonology',1997),('W97-1108','Linearization Of Nonlinear Lexical Representations','Workshop On Computational Phonology',1997),('W97-1201','Probabilistic Model Of Acoustic/Prosody/Concept Relationships For Speech Synthesis','Workshop On Concept To Speech Generation Systems',1997),('W97-1202','Message-To-Speech: High Quality Speech Generation For Messaging And Dialogue Systems','Workshop On Concept To Speech Generation Systems',1997),('W97-1203','A Compact Representation Of Prosodically Relevant Knowledge In A Speech Dialogue System','Workshop On Concept To Speech Generation Systems',1997),('W97-1204','Integrating Language Generation With Speech Synthesis In A Concept To Speech System','Workshop On Concept To Speech Generation Systems',1997),('W97-1205','Can Pitch Accent Type Convey Information Status In Yes-No Questions?','Workshop On Concept To Speech Generation Systems',1997),('W97-1206','Computing Prosodic Properties In A Data-To-Speech System','Workshop On Concept To Speech Generation Systems',1997),('W97-1207','Semantic And Discourse Information For Text-To-Speech Intonation','Workshop On Concept To Speech Generation Systems',1997),('W97-1208','Looking For The Presence Of Linguistic Concepts In The Prosody Of Spoken Utterances','Workshop On Concept To Speech Generation Systems',1997),('W97-1301','Resolving Bridging References In Unrestricted Text','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1302','Constraints And Defaults Of Zero Pronouns In Japanese Instruction Manuals','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1303','Factors In Anaphora Resolution: They Are Not The Only Things That Matter - A Case Study Based On Two Different Approaches','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1304','Automatic Extraction Of Rules For Anaphora Resolution Of Japanese Zero Pronouns From Aligned Sentence Pairs','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1305','Resolving Anaphoric References On Deficient Syntactic Descriptions','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1306','CogNIAC: High Precision Coreference With Limited Knowledge And Linguistic Resources','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1307','Recognizing Referential Links: An Information Extraction Perspective','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1308','Supporting Anaphor Resolution In Dialogues With A Corpus-Based Probabilistic Model','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1309','Towards Reliable Partial Anaphora Resolution','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1310','Corpus Annotation And Reference Resolution','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1311','Event Coreference For Information Extraction','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1312','How Far Are We From (Semi-)Automatic Of Anaphoric Links In Corpora?','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1313','What Brings A Higher-Order Entity Into Focus Of Attention? Sentential Pronouns In English And Norwegian','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1314','Cooperation Between Pronoun And Reference Resolution For Unrestricted Texts','Workshop On Operational Factors In Practical Robust Anaphora Resolution For Unrestricted Texts',1997),('W97-1401','Integration And Synchronization Of Input Modes During Multimodal Human-Computer Interaction','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1402','Referring In Multimodal Systems: The Importance Of User Expertise And System Features','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1403','Towards Generation Of Fluent Referring Action In Multimodal Situations','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1404','Hypertext And Deixis','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1405','Multimodal References In GEORAL TACTILE','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1406','Active And Passive Gestures - Problems With The Resolution Of Deictic And Elliptic Expressions In A Multimodal System','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1407','Scene Direction Based Reference In Drama Scenes','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1408','Generating Referential Descriptions In Multimedia Environments','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1409','Planning Referential Acts For Animated Presentation Agents','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1410','Exploiting Image Descriptions For The Generation Of Referring Expressions','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1411','Referring To Displays In Multimodal Interfaces','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1412','A Syndetic Approach To Referring Phenomena In Multimodal Interaction','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1413','Constraints On The Use Of Language Gesture And Speech For Multimodal Dialogues','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1414','A Model For Multimodal Reference Resolution','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1415','The CARTOON Project: Towards Integration Of Multimodal And Linguistic Analysis For Cartographic Applications','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1416','Recognition Of Referring Expressions','Workshop On Referring Phenomena In A Multimedia Context And Their Computational Treatment',1997),('W97-1501','Some Apparently Disjoint Aims And Requirements For Grammar Development Environments The Case Of Natural Language Generation','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1502','The TreeBanker: A Tool For Supervised Training Of Parsed Corpora','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1503','Participatory Design For Linguistic Engineering: The Case Of The GEPPETTO Development Environment','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1504','Hypertextual Grammar Development','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1505','Maintaining The Forest And Burning Out The Underbrush In XTAG','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1506','The ConTroll System As Large Grammar Development Platform','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1507','Application-Driven Automatic Subgrammar Extraction','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1508','Lexical Resource Reconciliation In The Xerox Linguistic Environment','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1509','Head-Driven Generation And Indexing In ALE','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1510','EFLUF - An Implementation Of A FLexible Unification Formalism','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1511','Exploiting Contextual Information In Hypothesis Selection For Grammar Refinement','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1512','ALEP-Based Distributed Grammar Engineering','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1513','Hdrug: A Flexible And Extendible Development Environment For Natural Language Processing','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1514','An Object-Oriented Linguistic Engineering Environment Using LFG (Lexical Functional Grammar) And CG (Conceptual Graphs)','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W97-1515','Experiences With The GTU Grammar Development Environment','Workshop On Computational Environments For Grammar Development And Linguistic Engineering',1997),('W98-0201','The Pausanian Notation: A Method For Representing The Structure And The Content Of A Hyperdocument','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0202','Intelligent Network News Reader With Visual User Interface','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0203','Coreference As The Foundations For Link Analysis Over Free Text Databases','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0204','Texplore - Exploring Expository Texts Via Hierarchical Representation','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0205','Visualization For Large Collections Of Multimedia Information','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0206','I Just Played That A Minute Ago! - Designing User Interfaces For Audio Navigation','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0207','Interactive Multimedia Navigation','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0208','Semantic Visualization','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0209','Integrated Generation Of Graphics And Text - A Corpus Study','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0210','A Media-Independent Content Language For Integrated Text And Graphics Generation','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0211','How To Build A (Quite General) Linguistic Diagram Editor','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0212','Visualization Of Protocols Of The Parsing And Semantic Interpretation Steps In A Machine Translation System','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0213','Multimodal Visualization Of Geometrical Constructions','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0214','Navigating Maps With Little Or No Sight: An Audio-Tactile Approach','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0215','Visualization By People Without Vision','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0216','Integration Of Speech And Vision In A Small Mobile Robot','Workshop On Content Visualization And Intermedia Representations',1998),('W98-0301','A Surface-Based Approach To Identifying Discourse Markers And Elementary Textual Units In Unrestricted Texts','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0302','Identifying The Linguistic Correlates Of Rhetorical Relations','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0303','Enriching Automated Essay Scoring Using Discourse Marking','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0304','Representing Temporal Discourse Markers For Generation Purposes','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0305','On Classifying Connectives And Coherence Relations','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0306','Lexical Marking Of Discourse Relations - Some Experimental Findings','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0307','Meta-Discourse Markers And Problem-Structuring In Scientific Articles','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0308','Linguistic Ways For Expressing A Discourse Relation In A Lexicalized Text Generation System','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0309','Similarity And Contrast Relations And Inductive Rules','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0310','Temporal Discourse Markers And The Flow Of Events','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0311','Some Exotic Discourse Markers Of Spoken Dialog','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0312','Lexical Marking And The Recovery Of Discourse Structure','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0313','Discourse Relations Versus Discourse Marker Relations','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0314','Signalling In Written Text: A Corpus-Based Approach','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0315','Anchoring A Lexicalized Tree-Adjoining Grammar For Discourse','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0316','Discourse Markers In Spontaneous Dialogue: A Corpus Based Study Of Japanese And English','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0317','Cue Phrase Selection In Instruction Dialogue Using Machine Learning','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0318','Automatic Disambiguation Of Discourse Particles','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0319','Lexical Prosodic And Syntactic Cues For Dialog Acts','Workshop On Discourse Relations And Discourse Markers',1998),('W98-0501','Towards An Implementable Dependency Grammar','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0502','Unit Coordination And Gapping In Dependency Theory','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0503','Two Useful Measures Of Word Order Complexity','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0504','How To Define A Context-Free Backbone For DGs: Implementing A DG In The LFG Formalism','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0505','Types Of Syntagmatic Grammatical Relations And Their Representation','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0506','Movement Rules Revisited','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0507','Integration Of Syntactic And Lexical Information In A Hierarchical Dependency Grammar','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0508','On Parsing Binary Dependency Structures Deterministically In Linear Time','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0509','Decision Procedures For Dependency Parsing Using Graded Constraints','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0510','A Case Study In Implementing Dependency-Based Grammars','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0511','Parsing With Dependency Relations And Robust Parsing','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0512','Complements And Adjuncts In Dependency Grammar Parsing Emulated By A Constrained Context-Free Grammar','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0513','An Annotated Corpus In Japanese Using Tesniere\\'s Structural Syntax','Workshop On Processing Of Dependency-Based Grammars',1998),('W98-0601','The Representation Of Syntactically Unexpressed Complements To Nouns','Workshop On The Computational Treatment Of Nominals',1998),('W98-0602','A Dynamic Temporal Logic Of Events Intervals And States For Nominalization In Natural Language','Workshop On The Computational Treatment Of Nominals',1998),('W98-0603','Representation And Processing Of Chinese Nominals And Compounds','Workshop On The Computational Treatment Of Nominals',1998),('W98-0604','Using NOMLEX To Produce Nominalization Patterns For Information Extraction','Workshop On The Computational Treatment Of Nominals',1998),('W98-0605','Construction Of Japanese Nominal Semantic Dictionary Using A NOT B Phrases In Corpora','Workshop On The Computational Treatment Of Nominals',1998),('W98-0606','The Treatment Of Noun Phrase Queries In A Natural Language Database Access System','Workshop On The Computational Treatment Of Nominals',1998),('W98-0607','Integrating Referring And Informing In NP Planning','Workshop On The Computational Treatment Of Nominals',1998),('W98-0608','Coreference In Knowledge Editing','Workshop On The Computational Treatment Of Nominals',1998),('W98-0609','Automatic Collection And Analysis Of GermanCompounds','Workshop On The Computational Treatment Of Nominals',1998),('W98-0610','SIMPLEX NPS Clustered By Head: A Method For Identifying Significant Topics Within A Document','Workshop On The Computational Treatment Of Nominals',1998),('W98-0611','Tools For Locating Noun Phrases With Finite State Transducers','Workshop On The Computational Treatment Of Nominals',1998),('W98-0612','Exemplar-Based Sense Modulation','Workshop On The Computational Treatment Of Nominals',1998),('W98-0613','Nominal Metonymy Processing','Workshop On The Computational Treatment Of Nominals',1998),('W98-0614','The Role Of Cardinality In Metonymic Extensions To Nouns','Workshop On The Computational Treatment Of Nominals',1998),('W98-0701','General Word Sense Disambiguation Method Based On A Full Sentential Context','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0702','Disambiguating Verbs With The WordNet Category Of The Direct Object','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0703','Word Sense Disambiguation Based On Semantic Density','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0704','The Use Of WordNet In Information Retrieval','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0705','Indexing With WordNet Synsets Can Improve Text Retrieval','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0706','Text Classification Using WordNet Hypernyms','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0707','Towards A Representation Of Idioms In WordNet','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0708','Linking WordNet Verb Classes To Semantic Interpretation','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0709','Using WordNet For Building WordNets','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0710','Aligning WordNet With Additional Lexical Resources','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0711','Automatic Adaptation Of WordNet To Sublanguages And To Computational Tasks','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0712','Augmenting WordNet-Like Lexical Resources With Distributional Evidence: An Application-Oriented Perspective','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0713','Lexical Acquisition With WordNet And The Mikrokosmos Ontology','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0714','Algorithms For Ontological Mediation','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0715','Semi-Automatic Induction Of Systematic Polysemy From WordNet','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0716','A Comparison Of WordNet And Roget\\'s Taxonomy For Measuring Semantic Similarity','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0717','Incorporating Knowledge In Natural Language Learning: A Case Study','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0718','Usage Of WordNet In Natural Language Generation','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0719','Lexical Discovery With An Enriched Semantic Network','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0720','Deriving Metonymic Coercions From WordNet','Workshop On Usage Of WordNet In Natural Language Processing Systems',1998),('W98-0801','Recognition Of Spontaneous Speech','Workshop On Partially Automated Techniques For Transcribing Naturally Occurring Continuous Speech',1998),('W98-0802','Towards Multimodal Spoken Language Corpora: TransTool And SyncTool','Workshop On Partially Automated Techniques For Transcribing Naturally Occurring Continuous Speech',1998),('W98-0803','Speech Annotation By Multi-Sensory Recording','Workshop On Partially Automated Techniques For Transcribing Naturally Occurring Continuous Speech',1998),('W98-0804','Grapheme-To-Phoneme Transcription Rules For Spanish With Application To Automatic Speech Recognition And Synthesis','Workshop On Partially Automated Techniques For Transcribing Naturally Occurring Continuous Speech',1998),('W98-0805','The Value Of Minimal Prosodic Information In Spoken Language Corpora','Workshop On Partially Automated Techniques For Transcribing Naturally Occurring Continuous Speech',1998),('W98-0901','Generating Interlanguage Syllabification In Optimality Theory','SIGPHON Workshop On The Computation Of Phonological Constraints',1998),('W98-0902','Computing Declarative Prosodic Morphology','SIGPHON Workshop On The Computation Of Phonological Constraints',1998),('W98-0903','Three Formal Extensions To Primitive Optimality Theory','SIGPHON Workshop On The Computation Of Phonological Constraints',1998),('W98-0904','Optimal Morphology','SIGPHON Workshop On The Computation Of Phonological Constraints',1998),('W98-0905','An Approach To The Automatic Acquisition Of Phonotactic Constraints','SIGPHON Workshop On The Computation Of Phonological Constraints',1998),('W98-0906','Loanword Formation: A Neural Network Approach','SIGPHON Workshop On The Computation Of Phonological Constraints',1998),('W98-1001','Discovering Lexical Information By Tagging Arabic Newspaper Text','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1002','TAGARAB: A Fast Accurate Arabic Name Recognizer Using High-Precision Morphological Analysis','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1003','Etiquetage Grammatical De L\\'arabe Voyelle Ou Non','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1004','Finite State Automata And Arabic Writing','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1005','Translating Names And Technical Terms In Arabic Text','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1006','Voyellation Automatique De L\\'arabe','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1007','Arabic Morphology Using Only Finite-State Operations','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1008','Paradigmatic Treatment Of Arabic Morphology','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1009','A Computational Morphology System For Arabic','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1010','A Morphological Analyzer For Akkadian Verbal Forms With A Model Of Phonetic Transformations','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1011','Towards A Linguistically Motivated Computational Grammar For Hebrew','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1012','Generating Determiners And Quantifiers In Hebrew','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1013','Maltilex: A Computational Lexicon For Maltese','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1014','Rule Based Lexical Analysis Of MALTESE','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1015','A New Pattern Matching Approach To The Recognition Of Printed Arabic','Workshop On Computational Approaches To Semitic Languages',1998),('W98-1101','Bayesian Stratified Sampling To Assess Corpus Utility','Workshop On Very Large Corpora',1998),('W98-1102','Encoding Linguistic Corpora','Workshop On Very Large Corpora',1998),('W98-1103','Using A Probabilistic Translation Model For Cross-Language Information Retrieval','Workshop On Very Large Corpora',1998),('W98-1104','Using Suffix Arrays To Compute Term Frequency And Document Frequency For All Substrings In A Corpus','Workshop On Very Large Corpora',1998),('W98-1105','Semantic Tagging Using A Probabilistic Context Free Grammar','Workshop On Very Large Corpora',1998),('W98-1106','An Empirical Approach To Conceptual Case Frame Acquisition','Workshop On Very Large Corpora',1998),('W98-1107','Semantic Lexicon Acquisition For Learning Natural Language Interfaces','Workshop On Very Large Corpora',1998),('W98-1108','The Effect Of Topological Structure On Hierarchical Text Categorization','Workshop On Very Large Corpora',1998),('W98-1109','Refining The Automatic Identification Of Conceptual Relations In Large-Scale Corpora','Workshop On Very Large Corpora',1998),('W98-1110','Generalized Unknown Morpheme Guessing For Hybrid POS Tagging Of Korean','Workshop On Very Large Corpora',1998),('W98-1111','Language Identification With Confidence Limits','Workshop On Very Large Corpora',1998),('W98-1112','Aligning Tagged Bitexts','Workshop On Very Large Corpora',1998),('W98-1113','Towards Unsupervised Extraction Of Verb Paradigms From Large Corpora','Workshop On Very Large Corpora',1998),('W98-1114','Can Subcategorisation Probabilities Help A Statistical Parser','Workshop On Very Large Corpora',1998),('W98-1115','Edge-Based Best-First Chart Parsing','Workshop On Very Large Corpora',1998),('W98-1116','What Grammars Tell Us About Corpora: The Case Of Reduced Relative Clauses','Workshop On Very Large Corpora',1998),('W98-1117','A Maximum-Entropy Partial Parser For Unrestricted Text','Workshop On Very Large Corpora',1998),('W98-1118','Exploiting Diverse Knowledge Sources Via Maximum Entropy In Named Entity Recognition','Workshop On Very Large Corpora',1998),('W98-1119','A Statistical Approach To Anaphora Resolution','Workshop On Very Large Corpora',1998),('W98-1120','A Decision Tree Method For Finding And Classifying Names In Japanese Texts','Workshop On Very Large Corpora',1998),('W98-1121','POS Tagging Versus Classes In Language Modeling','Workshop On Very Large Corpora',1998),('W98-1122','Automatic Acquisition Of Phrase Grammars For Stochastic Language Modeling','Workshop On Very Large Corpora',1998),('W98-1123','Linear Segmentation And Segment Significance','Workshop On Very Large Corpora',1998),('W98-1124','Improving Summarization Through Rhetorical Parsing Tuning','Workshop On Very Large Corpora',1998),('W98-1125','Discourse Parsing: A Decision Tree Approach','Workshop On Very Large Corpora',1998),('W98-1126','Mapping Collocational Properties Into Machine Learning Features','Workshop On Very Large Corpora',1998),('W98-1201','Abstraction Is Harmful In Language Learning','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1202','Natural Language Learning By Recurrent Neural Networks: A Comparison With Probabilistic Approaches','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1203','Learning A Lexicalized Grammar For German','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1204','A Lexically-Intensive Algorithm For Domain-Specific Knowlegde Acquisition','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1205','Look-Back And Look-Ahead In The Conversion Of Hidden Markov Models Into Finite State Transducers','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1206','The Effect Of Alternative Tree Representations On Tree Bank Grammars','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1207','Automation Of Treebank Annotation','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1208','Implementing A Sense Tagger In A General Architecture For Text Engineering','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1209','Knowledge Extraction And Recurrent Neural Networks: An Analysis Of An Elman Network Trained On A Natural Language Learning Task','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1210','Finding Structure Via Compression','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1211','Linguistic Theory In Statistical Language Learning','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1212','A Bayesian Approach To Automating Argumentation','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1213','Automatically Generating Hypertext In Newspaper Articles By Computing Semantic Relatedness','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1214','Choosing A Distance Metric For Automatic Word Categorization','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1215','Sense Variation And Lexical Semantics Generative Operations','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1216','An Attempt To Use Weighted Cusums To Identify Sublanguages','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1217','Cross-Entropy And Linguistic Typology','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1218','Applications And Explanations Of Zipf\\'s Law','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1219','Proper Name Classification In An Information Extraction Toolset','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1220','Evolution And Evaluation Of Document Retrieval Queries','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1221','Generation Of Simple Turkish Sentences With Systemic-Functional Grammar','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1222','Extracting Phoneme Pronunciation Information From Corpora','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1223','Modularity In Inductively-Learned Word Pronunciation Systems','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1224','Do Not Forget: Full Memory In Memory-Based Learning Of Word Pronunciation','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1225','Natural Language Concept Analysis','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1226','The Present Use Of Statistics In The Evaluation Of NLP Parsers','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1227','A Method Of Incorporating Bigram Constraints Into An LR Table And Its Effectiveness In Natural Language Processing','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1228','Selective Attention And The Acquisition Of Spatial Semantics','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1229','Towards Language Acquisition By An Attention-Sharing Robot','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1230','A Constructivist Approach To Machine Translation','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1231','Shallow Post Morphological Processing With KURD','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1232','Induction Of A Stem Lexicon For Two-Level Morphological Analysis','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1233','Introducing MegaHAL','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1234','Methods And Tricks Used In An Attempt To Pass The Turing Test','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1235','The Total Turing Test And The Loebner Prize','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1236','Language Model And Sentence Structure Manipulations For Natural Language Application Systems','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1237','Position Paper On Appropriate Audio/Visual Turing Test','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1238','Learning Feature-Value Grammars From Plain Text','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1239','Morphemes As Necessary Concept For Structures Discovery From Untagged Corpora','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1240','The Segmentation Problem In Morphology Learning','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1241','Reconciliation Of Unsupervised Clustering Segmentation And Cohesion','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1242','Syntactico-Semantic Learning Of Categorial Grammars','Workshop On New Methods In Language Processing And Computational Natural Language Learning',1998),('W98-1301','The Proper Treatment Of Optimality In Computational Phonology','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1302','Context-Free Parsing Through Regular Approximation','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1303','Does Tagging Help Parsing? A Case Study On Finite State Parsing','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1304','Robust Parsing Using A Hidden Markov Model','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1305','Incremental Construction Of Minimal Acyclic Finite State Automata And Transducers','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1306','Treatment Of E-Moves In Subset Construction','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1307','Learning Finite-State Models For Language Understanding','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1308','A Multilingual Natural-Language Interface To Regular Expressions','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1309','Implementing Voting Constraints With Finite State Transducers','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1310','Feature Structures Unification And Finite-State Transducers','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1311','Using Genericity To Create Cutomizable Finite-State Tools','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1312','Constraining Separated Morphotactic Dependencies In Finite-State Grammars','Workshop On Finite State Methods In Natural Language Processing',1998),('W98-1401','Natural Language Generation Journeys To Interactive 3D Worlds Invited Talk Extended Abstract','Workshop On Natural Language Generation EWNLG',1998),('W98-1402','Communicative Goal-Driven NL Generation And Data-Driven Graphics Generation: An Architectural Synthesis For Multimedia Page Generation','Workshop On Natural Language Generation EWNLG',1998),('W98-1403','A Principled Representation Of Attributive Descriptions For Generating Integrated Text And Information Graphics Presentations','Workshop On Natural Language Generation EWNLG',1998),('W98-1404','An Architecture For Opportunistic Text Generation','Workshop On Natural Language Generation EWNLG',1998),('W98-1405','Controlled Realization Of Complex Objects','Workshop On Natural Language Generation EWNLG',1998),('W98-1406','De-Constraining Text Generation','Workshop On Natural Language Generation EWNLG',1998),('W98-1407','Automatic Generation Of Subway Directions: Salience Gradation As A Factor For Determining Message And Form','Workshop On Natural Language Generation EWNLG',1998),('W98-1408','Introducing Maximal Variation In Text Planning For Small Domains','Workshop On Natural Language Generation EWNLG',1998),('W98-1409','A New Approach To Expert System Explanations','Workshop On Natural Language Generation EWNLG',1998),('W98-1410','Macroplanning With A Cognitive Architecture For The Adaptive Explanation Of Proofs','Workshop On Natural Language Generation EWNLG',1998),('W98-1411','Experiments Using Stochastic Search For Text Planning','Workshop On Natural Language Generation EWNLG',1998),('W98-1412','Abductive Reasoning For Syntactic Realization','Workshop On Natural Language Generation EWNLG',1998),('W98-1413','Generating Warning Instructions By Planning Accidents And Injuries','Workshop On Natural Language Generation EWNLG',1998),('W98-1414','Discourse Marker Choice In Sentence Planning','Workshop On Natural Language Generation EWNLG',1998),('W98-1415','Clause Aggregation Using Linguistic Knowledge','Workshop On Natural Language Generation EWNLG',1998),('W98-1416','Attention During Argument Generation And Presentation','Workshop On Natural Language Generation EWNLG',1998),('W98-1417','Planning Dialogue Contributions With New Information','Workshop On Natural Language Generation EWNLG',1998),('W98-1418','Generation Of Noun Compounds In Hebrew: Can Syntactic Knowledge Be Fully Encapsulated?','Workshop On Natural Language Generation EWNLG',1998),('W98-1419','Textual Economy Through Close Coupling Of Syntax And Semantics','Workshop On Natural Language Generation EWNLG',1998),('W98-1420','A Language-Independent System For Generating Feature Structures From Interlingua Representations','Workshop On Natural Language Generation EWNLG',1998),('W98-1421','Towards Multilingual Protocol Generation For Spontaneous Speech Dialogues','Workshop On Natural Language Generation EWNLG',1998),('W98-1422','Fully Lexicalized Head-Driven Syntactic Generation','Workshop On Natural Language Generation EWNLG',1998),('W98-1423','Approaches To Surface Realization With HPSG','Workshop On Natural Language Generation EWNLG',1998),('W98-1424','The Multex Generator And Its Environment: Application And Development','Workshop On Natural Language Generation EWNLG',1998),('W98-1425','A Flexible Shallow Approach To Text Generation','Workshop On Natural Language Generation EWNLG',1998),('W98-1426','The Practical Value Of N-Grams Is In Generation','Workshop On Natural Language Generation EWNLG',1998),('W98-1427','Generation As A Solution To Its Own Problem','Workshop On Natural Language Generation EWNLG',1998),('W98-1428','EXEMPLARS: A Practical Extensible Framework For Dynamic Text Generation','Workshop On Natural Language Generation EWNLG',1998),('W98-1429','Natural Language Generation With Abstract Machine','Workshop On Natural Language Generation EWNLG',1998),('W98-1430','Content Planning As The Basis For An Intelligent Tutoring System','Workshop On Natural Language Generation EWNLG',1998),('W98-1431','FLAUBERT: An User Friendly System For Multilingual Text Generation','Workshop On Natural Language Generation EWNLG',1998),('W98-1432','Overview Of GBGEN','Workshop On Natural Language Generation EWNLG',1998),('W98-1433','GOALGETTER: Generation Of Spoken Soccer Reports','Workshop On Natural Language Generation EWNLG',1998),('W98-1434','Multilingual Weather Forecast Generation System','Workshop On Natural Language Generation EWNLG',1998),('W98-1435','Interactive Generation And Knowledge Administration In Multimeteo','Workshop On Natural Language Generation EWNLG',1998),('W98-1436','ROMVOX Experiments Regarding Unrestricted Text To Speech Synthesis For The Romanian Language','Workshop On Natural Language Generation EWNLG',1998),('W98-1437','WYSIWYM: Knowledge Editing With Natural Language Feedback','Workshop On Natural Language Generation EWNLG',1998),('W99-0101','An Integrated Approach To Reference And Presupposition Resolution','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0102','Approaches To Japanese Zero Pronouns: Centering And Relevance','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0103','Anaphora Resolution Using Extended Centering Algorithm In A Multi-Modal Dialogue System','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0104','Knowledge-Lean Coreference Resolution And Its Relation To Textual Cohesion And Coherence','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0105','Positing And Resolving Bridging Anaphora In Deverba! NPs','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0106','Discourse Structure And Co-Reference: An Empirical Study','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0107','Building A Tool For Annotating Reference In Discourse','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0108','Generating Anaphoric Expressions: Pronoun Or Definite Description?','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0109','Cb Or Not Cb? Centering Theory Applied To NLG','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0110','Comprehension Of Coreferentiai Expressions','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0111','Reference-Based Discourse Structure For Reference Resolution','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0112','Reference Hashed','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0113','Logical Structure And Discourse Anaphora Resolution','Workshop On The Relation Of Discourse/Dialogue Structure And Reference',1999),('W99-0201','Cross-Document Event Coreference: Annotations Experiments And Observations','Workshop On Coreference And Its Applications',1999),('W99-0202','Is Hillary Rodham Clinton The President? Disambiguating Names Across Documents','Workshop On Coreference And Its Applications',1999),('W99-0203','Identification Of Coreference Between Names And Faces','Workshop On Coreference And Its Applications',1999),('W99-0204','Automatic Slide Presentation From Semantically Annotated Documents','Workshop On Coreference And Its Applications',1999),('W99-0205','Resolution Of Indirect Anaphora In Japanese Sentences Using Examples','Workshop On Coreference And Its Applications',1999),('W99-0206','Pronoun Resolution In Japanese Sentences Using Surface Expressions And Examples','Workshop On Coreference And Its Applications',1999),('W99-0207','Corpus-Based Anaphora Resolution Towards Antecedent Preference','Workshop On Coreference And Its Applications',1999),('W99-0208','Coreference Resolution In Dialogues In English And Portuguese','Workshop On Coreference And Its Applications',1999),('W99-0209','Orthographic Co-Reference Resolution Between Proper Nouns Through The Calculation Of The Relation Of Replicancia','Workshop On Coreference And Its Applications',1999),('W99-0210','Coreference-Oriented Interlingual Slot Structure And Machine Translation','Workshop On Coreference And Its Applications',1999),('W99-0211','Using Coreference Chains For Text Summarization','Workshop On Coreference And Its Applications',1999),('W99-0212','Using Coreference For Question Answering','Workshop On Coreference And Its Applications',1999),('W99-0213','What Is Coreference And What Should Coreference Annotation Be?','Workshop On Coreference And Its Applications',1999),('W99-0301','Annotation Graphs As A Framework For Multidimensional Linguistic Data Analysis','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0302','The MATE Annotation Workbench: User Requirements','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0303','Argumentation Mark-Up: A Proposal','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0304','Evaluation Of Annotation Schemes For Japanese Discourse Japanese Discourse Tagging Working Group','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0305','Standardisation Efforts On The Level Of Dialogue Act In The MATE Project','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0306','Tagging Of Speech Acts And Dialogue Games In Spanish Call Home','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0307','Experiments In Constructing A Corpus Of Discourse Trees','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0308','Tagging Psychotherapeutic Interviews For Linguistic Analysis','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0309','The MATE Meta-Scheme For Coreference In Dialogues In Multiple Languages','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0310','A Recognition-Based Meta-Scheme For Dialogue Acts Annotation','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0311','Discourse-Level Argumentation In Scientific Articles: Human And Automatic Annotation','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0312','A Mark Up Language For Tagging Discourse And Annotating Documents In Context Sensitive Interpretation Environments','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0313','A Two-Level Approach To Coding Dialogue For Discourse Structure: Activities Of The 1998 DRI Working Group On Higher-Level Structures','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0314','Automatically Extracting Grounding Tags From BF Tags','Workshop On Towards Standards And Tools For Discourse Tagging',1999),('W99-0402','Eliciting Natural Speech From Non-Native Users: Collecting Speech Data For LVCSR','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0403','Speech Comparison In The Rosetta Stone TM','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0404','Multimedia Computer Technology And Performance-Based Language Testing: A Demonstration Of The Computerized Oral Proficiency Instrument (COPI)','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0405','Modeling The Language Assessment Process And Result: Proposed Architecture For Automatic Oral Proficiency Assessment','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0406','Dual Use Of Linguistic Resources: Evaluation Of MT Systems And Language Learners','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0407','FAME: A Functional Annotation Meta-Scheme For Multi-Modal And Multi-Lingual Parsing Evaluation','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0408','Modeling User Language Proficiency In A Writing Tutor For Deaf Learners Of English','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0409','Exploiting The Student Model To Emphasize Language Pedagogy In Natural Language Processing','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0410','A Web-Based System For Automatic Language Skill Assessment: EVALING','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0411','Automated Essay Scoring For Nonnative English Speakers','Workshop On Computer Mediated Language Assessment And Evaluation In Natural Language Processing',1999),('W99-0501','WordNet 2 - A Morphologically And Semantically Enhanced Resource','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0502','A Case Study On Inter-Annotator Agreement For Word Sense Disambiguation','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0503','Supervised Learning Of Lexical Semantic Verb Classes Using Frequency Distributions','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0504','On The Concept Of Diathesis Alternations As Semantic Oppositions','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0505','Towards A Meaning-Full Comparison Of Lexical Resources','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0506','On Some Aspects Of Lexical Standardization','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0507','Simple - Semantic Information For Multifunctional Plurilingual Lexica: Some Examples Of Danish Concrete Nouns','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0508','Parallel Translations As Sense Discriminators','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0509','An Overt Semantics With A Machine-Guided Approach For Robust LKBs','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0510','Statistical Matching Of Two Ontologies','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0511','A Computational Lexicon Of Portuguese For Automatic Text Parsing','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0512','Towards A Universal Index Of Meaning','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0513','Electronic Dictionaries And Linguistic Analysis Of Italian Large Corpora','SIGLEX Workshop On Standardizing Lexical Resources',1999),('W99-0601','What\\'s Happened Since The First SIGDAT Meeting?','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0602','Text-Translation Alignment: Three Languages Are Better Than Two','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0603','Mapping Multilingual Hierarchies Using Relaxation Labeling','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0604','Improved Alignment Models For Statistical Machine Translation','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0605','Cross-Language Information Retrieval For Technical Documents','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0606','Boosting Applied To Tagging And PP Attachment','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0607','Applying Extrasentential Context To Maximum Entropy Based Tagging With A Large Semantic And Syntactic Tagset','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0608','Improving POS Tagging Using Machine-Learning Techniques','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0609','Determining The Specificity Of Nouns From Text','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0610','Retrieving Collocations From Korean Text','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0611','Noun Phrase Coreference As Clustering','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0612','Language Independent Named Entity Recognition Combining Morphological And Contextual Evidence','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0613','Unsupervised Models For Named Entity Classification','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0614','Hybrid Disambiguation Of Prepositional Phrase Attachment And Interpretation','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0615','HMM Specialization With Selective Lexicalization','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0616','Why Doesn\\'t Natural Language Come Naturally?','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0617','POS Tags And Decision Trees For Language Modeling','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0618','An Information-Theoretic Empirical Analysis Of Dependency-Based Feature Types For Word Prediction Models','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0619','Word Informativeness And Automatic Pitch Accent Modeling','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0620','Learning Discourse Relations With Active Data Selection','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0621','A Learning Approach To Shallow Parsing','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0622','Guiding A Well-Founded Parser With Corpus Statistics','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0623','Exploiting Diversity In Natural Language Processing: Combining Parsers','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0624','Lexical Ambiguity And Information Retrieval Revisited','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0625','Detecting Text Similarity Over Short Passages: Exploring Linguistic Feature Combinations Via Machine Learning','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0626','Automatic Construction Of Weighted String Similarity Measures','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0627','Taking The Load Off The Conference Chairs - Towards A Digital Paper-Routing Assistant','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0628','PP-Attachment: A Committee Machine Approach','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0629','Cascaded Grammatical Relation Assignment','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0630','Automatically Merging Lexicons That Have Incompatible Part-Of-Speech Categories','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0631','An Iterative Approach To Estimating Frequencies Over A Semantic Hierarchy','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0632','Using Subcategorization To Resolve Verb Class Ambiguity','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0633','Improving Brill\\'s POS Tagger For An Agglutinative Language','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0634','Corpus-Based Learning For Noun Phrase Coreference Resolution','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0635','Corpus-Based Approach For Nominal Compound Analysis For Korean Based On Linguistic And Statistical Information','2000 Joint SIGDAT Conference on Empirical Methods in Natural Language Processing and Very Large Corpora',1999),('W99-0701','Unsupervised Learning Of Word Boundary With Description Length Gain','Workshop On Computational Natural Language Learning CoNLL',1999),('W99-0702','Experiments In Unsupervised Entropy-Based Corpus Segmentation','Workshop On Computational Natural Language Learning CoNLL',1999),('W99-0703','Practical Bootstrapping Of Morphological Analyzers','Workshop On Computational Natural Language Learning CoNLL',1999),('W99-0704','Finding Representations For Memory-Based Language Learning','Workshop On Computational Natural Language Learning CoNLL',1999),('W99-0705','The U-TBL System: Logic Programming Tools For Transformation-Based Learning','Workshop On Computational Natural Language Learning CoNLL',1999),('W99-0706','Learning Transformation Rules To Find Grammatical Relations','Workshop On Computational Natural Language Learning CoNLL',1999),('W99-0707','Memory-Based Shallow Parsing','Workshop On Computational Natural Language Learning CoNLL',1999),('W99-0708','MDL-Based DCG Induction For NP Identification','Workshop On Computational Natural Language Learning CoNLL',1999),('W99-0801','Diamonds On My Windshield: The Use Of Computer-Based Instruction In Computational Linguistics','Workshop On Computer And Internet Supported Education In Language And Speech Technology',1999),('W99-0802','A Modern Computational Linguistics Course Using Dutch','Workshop On Computer And Internet Supported Education In Language And Speech Technology',1999),('W99-0803','Web Tools For Introductory Computational Linguistics','Workshop On Computer And Internet Supported Education In Language And Speech Technology',1999),('W99-0804','Intranet Learning Tools For NLP','Workshop On Computer And Internet Supported Education In Language And Speech Technology',1999),('W99-0805','Interactive Auditory Demonstrations','Workshop On Computer And Internet Supported Education In Language And Speech Technology',1999),('W99-0806','Web Access To Corpora: The W3Corpora Project','Workshop On Computer And Internet Supported Education In Language And Speech Technology',1999),('W99-0807','A Corpus-Based Grammar Tutor For Education In Language And Speech Technology','Workshop On Computer And Internet Supported Education In Language And Speech Technology',1999),('W99-0808','An Open Distance Learning Web-Course For NLP In IR','Workshop On Computer And Internet Supported Education In Language And Speech Technology',1999),('W99-0901','Hiding A Semantic Hierarchy In A Markov Model','Workshop On Unsupervised Learning In Natural Language Processing',1999),('W99-0902','The Applications Of Unsupervised Learning To Japanese Grapheme-Phoneme Alignment','Workshop On Unsupervised Learning In Natural Language Processing',1999),('W99-0903','Dual Distributional Verb Sense Disambiguation With Small Corpora And Machine Readable Dictionaries','Workshop On Unsupervised Learning In Natural Language Processing',1999),('W99-0904','Unsupervised Learning Of Derivational Morphology From Inflectional Lexicons','Workshop On Unsupervised Learning In Natural Language Processing',1999),('W99-0905','Resolving Translation Ambiguity Using Non-Parallel Bilingual Corpora','Workshop On Unsupervised Learning In Natural Language Processing',1999),('W99-0906','A Computational Approach To Deciphering Unknown Scripts','Workshop On Unsupervised Learning In Natural Language Processing',1999),('W99-0907','Detecting Sub-Topic Correspondence Through Bipartite Term Clustering','Workshop On Unsupervised Learning In Natural Language Processing',1999),('W99-0908','Text Classification By Bootstrapping With Keywords EM And Shrinkage','Workshop On Unsupervised Learning In Natural Language Processing',1999),('W99-0909','Unsupervised Lexical Learning With Categorial Grammars','Workshop On Unsupervised Learning In Natural Language Processing',1999),('X93-1001','TIPSTER Program Overview','Workshop On TIPSTER Text Program',1993),('X93-1002','TIPSTER Program History','Workshop On TIPSTER Text Program',1993),('X93-1003','The Message Understanding Conferences','Workshop On TIPSTER Text Program',1993),('X93-1004','The Text Retrieval Conferences','Workshop On TIPSTER Text Program',1993),('X93-1005','Document Detection Overview','Workshop On TIPSTER Text Program',1993),('X93-1006','Document Detection Data Preparation','Workshop On TIPSTER Text Program',1993),('X93-1007','Document Detection Summary Of Results','Workshop On TIPSTER Text Program',1993),('X93-1008','Inquery System Overview','Workshop On TIPSTER Text Program',1993),('X93-1009','TIPSTER Phase I Final Report','Workshop On TIPSTER Text Program',1993),('X93-1010','DR-LINK System: Phase I Summary','Workshop On TIPSTER Text Program',1993),('X93-1011','TRW Japanese Fast Data Finder','Workshop On TIPSTER Text Program',1993),('X93-1012','Information Extraction Overview','Workshop On TIPSTER Text Program',1993),('X93-1013','Tasks Domains And Languages For Information Extraction','Workshop On TIPSTER Text Program',1993),('X93-1014','Corpora And Data Preparation For Information Extraction','Workshop On TIPSTER Text Program',1993),('X93-1015','Template Design For Information Extraction','Workshop On TIPSTER Text Program',1993),('X93-1016','TIPSTER/MUC-5 Information Extraction System Evaluation','Workshop On TIPSTER Text Program',1993),('X93-1017','An Analysis Of The Joint Venture Japanese Text Prototype And Its Effect On System Performance','Workshop On TIPSTER Text Program',1993),('X93-1018','Comparing Human And Machine Performance For Natural Language Information Extraction: Results From The Tipster Text Evaluation','Workshop On TIPSTER Text Program',1993),('X93-1019','BBN\\'s PLUM Probabilistic Language Understanding System','Workshop On TIPSTER Text Program',1993),('X93-1020','The TIPSTER SHOGUN Project','Workshop On TIPSTER Text Program',1993),('X93-1021','CRL/BRANDEIS: The DIDEROT System','Workshop On TIPSTER Text Program',1993),('X93-1022','UMASS/HUGHES: Description Of The CIRCUS System Used For TIPSTER Text','Workshop On TIPSTER Text Program',1993),('X93-1023','Dictionary Construction By Domain Experts','Workshop On TIPSTER Text Program',1993),('X96-1002','Focus Of TIPSTER Phases I And II','Workshop On TIPSTER Text Program',1996),('X96-1003','Evaluation Driven Research: The Foundation Of The TIPSTER Text Program','Workshop On TIPSTER Text Program',1996),('X96-1004','Technology Transfer: Observations From The TIPSTER Text Program','Workshop On TIPSTER Text Program',1996),('X96-1005','Architecture Overview','Workshop On TIPSTER Text Program',1996),('X96-1006','The Message Understanding Conferences','Workshop On TIPSTER Text Program',1996),('X96-1007','The Text REtrieval Conferences (TRECs) - Summary','Workshop On TIPSTER Text Program',1996),('X96-1008','TIPSTER Phase III Goals','Workshop On TIPSTER Text Program',1996),('X96-1009','TIPSTER II Activities At HNC','Workshop On TIPSTER Text Program',1996),('X96-1010','The Lockheed Martin TIPSTER II Project','Workshop On TIPSTER Text Program',1996),('X96-1011','CERVANTES - A System Supporting Text Analysis','Workshop On TIPSTER Text Program',1996),('X96-1012','The NYU TIPSTER II Project','Workshop On TIPSTER Text Program',1996),('X96-1013','SRA Participation In TIPSTER Phase II','Workshop On TIPSTER Text Program',1996),('X96-1014','The SRI TIPSTER II Project','Workshop On TIPSTER Text Program',1996),('X96-1015','SPOT: TRW\\'S Multi-Lingual Text Search Tool','Workshop On TIPSTER Text Program',1996),('X96-1016','Advanced Data Extraction And Preparation Via TIPSTER (ADEPT)','Workshop On TIPSTER Text Program',1996),('X96-1017','Cable Abstracting And Indexing System (CANIS) Prototype','Workshop On TIPSTER Text Program',1996),('X96-1018','Management Of Free Text For NDIC: An Overview Of The FTM Project','Workshop On TIPSTER Text Program',1996),('X96-1019','The HOOKAH Information Extraction System','Workshop On TIPSTER Text Program',1996),('X96-1020','Message Handler','Workshop On TIPSTER Text Program',1996),('X96-1021','Oleada: User-Centered TIPSTER Technology For Language Instruction','Workshop On TIPSTER Text Program',1996),('X96-1022','An Overview Of The Prototype Information Dissemination System (PRIDES)','Workshop On TIPSTER Text Program',1996),('X96-1023','SPOT: TRW\\'S Multi-Lingual Text Search Tool','Workshop On TIPSTER Text Program',1996),('X96-1024','The Temple Translator\\'s Workstation Project','Workshop On TIPSTER Text Program',1996),('X96-1025','SRA Project For ARPA / USACOM','Workshop On TIPSTER Text Program',1996),('X96-1026','Chinese Information Extraction And Retrieval','Workshop On TIPSTER Text Program',1996),('X96-1027','TIPSTER-Compatible Projects At Sheffield','Workshop On TIPSTER Text Program',1996),('X96-1028','Progress In Information Extraction','Workshop On TIPSTER Text Program',1996),('X96-1029','The Role Of Syntax In Information Extraction','Workshop On TIPSTER Text Program',1996),('X96-1030','Natural Language Information Retrieval: TIPSTER-2 Final Report','Workshop On TIPSTER Text Program',1996),('X96-1031','Recent Advances In HNC\\'S Context Vector Information Retrieval Technology','Workshop On TIPSTER Text Program',1996),('X96-1032','A Context Vector-Based Self Organizing Map For Information Visualization','Workshop On TIPSTER Text Program',1996),('X96-1033','A Simple Probabilistic Approach To Classification And Routing','Workshop On TIPSTER Text Program',1996),('X96-1034','An Evaluation Of Coreference Resolution Strategies For Acquiring Associated Information','Workshop On TIPSTER Text Program',1996),('X96-1035','Advances In Multilingual Text Retrieval','Workshop On TIPSTER Text Program',1996),('X96-1036','Integration Of Document Detection And Information Extraction','Workshop On TIPSTER Text Program',1996),('X96-1037','SRI\\'s Tipster II Project','Workshop On TIPSTER Text Program',1996),('X96-1038','Overview And Accomplishments The SE/CM Perspective','Workshop On TIPSTER Text Program',1996),('X96-1039','Building An Architecture: A CAWG Saga','Workshop On TIPSTER Text Program',1996),('X96-1040','The Architecture Demonstration System','Workshop On TIPSTER Text Program',1996),('X96-1041','TUIT: A Toolkit For Constructing Multilingual TIPSTER User Interfaces','Workshop On TIPSTER Text Program',1996),('X96-1043','TIPSTER Text Phase II Architecture Design Version 2.1p 19 June 1996','Workshop On TIPSTER Text Program',1996),('X96-1046','The Text REtrieval Conferences (TRECs) - Summary Results Of TREC-3 And TREC-4','Workshop On TIPSTER Text Program',1996),('X96-1047','Design Of The MUC-6 Evaluation','Workshop On TIPSTER Text Program',1996),('X96-1048','Overview Of Results Of The MUC-6 Evaluation','Workshop On TIPSTER Text Program',1996),('X96-1049','The Multilingual Entity Task (MET) Overview','Workshop On TIPSTER Text Program',1996),('X96-1050','Multilingual Entity Task (MET): Japanese Results','Workshop On TIPSTER Text Program',1996),('X96-1051','An Interpretative Data Analysis Of Chinese Named Entity Subtypes','Workshop On TIPSTER Text Program',1996),('X96-1052','The Multilingual Entity Task A Descriptive Analysis Of ENAMEX In Spanish','Workshop On TIPSTER Text Program',1996),('X96-1053','MITRE: Description Of The ALEMBIC System As Used In MET','Workshop On TIPSTER Text Program',1996),('X96-1054','NameTag(TM) Japanese And Spanish Systems As Used For MET','Workshop On TIPSTER Text Program',1996),('X96-1055','Approaches In MET (Multi-Lingual Entity Task)','Workshop On TIPSTER Text Program',1996),('X96-1056','CRL\\'s Approach To MET','Workshop On TIPSTER Text Program',1996),('X96-1057','NTT Data: Description Of The ERIE System Used For MUC-6','Workshop On TIPSTER Text Program',1996),('X96-1058','MET Name Recognition With Japanese FASTUS','Workshop On TIPSTER Text Program',1996),('X96-1059','NEC Corporation And University Of Sheffield: Description Of NEC/Sheffleld System Used For MET Japanese','Workshop On TIPSTER Text Program',1996),('X96-1060','How To Get Information About TIPSTER','Workshop On TIPSTER Text Program',1996),('X96-1061','List Of Available Documents','Workshop On TIPSTER Text Program',1996),('X98-1001','The TIPSTER Text Program Overview','Workshop On TIPSTER Text Program',1998),('X98-1002','TIPSTER Phase III Accomplishments','Workshop On TIPSTER Text Program',1998),('X98-1003','TIPSTER Lessons Learned: The SE/CM Perspective','Workshop On TIPSTER Text Program',1998),('X98-1004','The Common Pattern Specification Language','Workshop On TIPSTER Text Program',1998),('X98-1005','Project Penlight - A Government Perspective','Workshop On TIPSTER Text Program',1998),('X98-1006','Project Underline - A Government Perspective','Workshop On TIPSTER Text Program',1998),('X98-1007','The Cornell TIPSTER Phase III Project','Workshop On TIPSTER Text Program',1998),('X98-1008','The SRI TIPSTER III Project','Workshop On TIPSTER Text Program',1998),('X98-1009','Reflections Of Accomplishments In Natural Language Based Detection And Summarization','Workshop On TIPSTER Text Program',1998),('X98-1010','Coreference Resolution Strategies From An Application Perspective','Workshop On TIPSTER Text Program',1998),('X98-1011','Extracting And Normalizing Temporal Expressions','Workshop On TIPSTER Text Program',1998),('X98-1012','Research In Information Extraction: 1996-98','Workshop On TIPSTER Text Program',1998),('X98-1013','Information Extraction Research And Applications: Current Progress And Future Directions','Workshop On TIPSTER Text Program',1998),('X98-1014','Algorithms That Learn To Extract Information BBN: TIPSTER Phase III','Workshop On TIPSTER Text Program',1998),('X98-1015','Japanese IE System And Customization Tool','Workshop On TIPSTER Text Program',1998),('X98-1016','Transforming Examples Into Patterns For Information Extraction','Workshop On TIPSTER Text Program',1998),('X98-1017','The Smart/Empire TIPSTER IR System','Workshop On TIPSTER Text Program',1998),('X98-1018','Dynamic Data Fusion','Workshop On TIPSTER Text Program',1998),('X98-1019','Improving English And Chinese Ad-Hoc Retrieval: TIPSTER Text Phase 3 Final Report','Workshop On TIPSTER Text Program',1998),('X98-1020','Enhancing Detection Through Linguistic Indexing And Topic Expansion','Workshop On TIPSTER Text Program',1998),('X98-1021','Overview Of The University Of Pennsylvania\\'s TIPSTER Project','Workshop On TIPSTER Text Program',1998),('X98-1022','An NTU-Approach To Automatic Sentence Extraction For Summary Generation','Workshop On TIPSTER Text Program',1998),('X98-1023','Improving Robust Domain Independent Summarization','Workshop On TIPSTER Text Program',1998),('X98-1024','Automatic Text Summarization In TIPSTER','Workshop On TIPSTER Text Program',1998),('X98-1025','Summarization: (1) Using MMR For Diversity-Based Reranking And (2) Evaluating Summaries','Workshop On TIPSTER Text Program',1998),('X98-1026','Automated Text Summarization And The Summarist System','Workshop On TIPSTER Text Program',1998),('X98-1027','Multiple And Single Document Summarization Using DR-LINK','Workshop On TIPSTER Text Program',1998),('X98-1028','A Text-Extraction Based Summarizer','Workshop On TIPSTER Text Program',1998),('X98-1029','TIPSTER Information Extraction Evaluation: The MUC-7 Workshop','Workshop On TIPSTER Text Program',1998),('X98-1030','MUC/MET Evaluation Trends','Workshop On TIPSTER Text Program',1998),('X98-1031','The Text REtrieval Conferences (TRECS)','Workshop On TIPSTER Text Program',1998);"]

###Input:
###Input:
How many authors do we have?

###Response:

###Response:
############pred end###############
pred End time: Sun Oct 27 21:06:47 CST 2024
Time elapsed:   hour 50 min 
